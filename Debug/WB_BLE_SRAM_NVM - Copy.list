
WB_BLE_SRAM_NVM - Copy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ece0  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001510  0800ee20  0800ee20  0001ee20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010330  08010330  00020330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010338  08010338  00020338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801033c  0801033c  0002033c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000110  20000008  08010340  00030008  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  7 BLE_DRIVER_CONTEXT 0000001d  20000118  08010450  00030118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000138  0801046d  00030138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001728  2000014c  0801047e  0003014c  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  20001874  0801047e  00031874  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031253  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00040000  2**2
                  ALLOC
 14 .MB_MEM2      0000106f  200301e4  0801047e  000301e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .comment      00000043  00000000  00000000  00031283  2**0
                  CONTENTS, READONLY
 16 .debug_info   000309e9  00000000  00000000  000312c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000071ee  00000000  00000000  00061caf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002b68  00000000  00000000  00068ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002125  00000000  00000000  0006ba08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002dee1  00000000  00000000  0006db2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00032f60  00000000  00000000  0009ba0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000fc391  00000000  00000000  000ce96e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000bd3c  00000000  00000000  001cad00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000058  00000000  00000000  001d6a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000014c 	.word	0x2000014c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ee00 	.word	0x0800ee00

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000150 	.word	0x20000150
 800017c:	0800ee00 	.word	0x0800ee00

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	; 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__aeabi_uldivmod>:
 80007fc:	b953      	cbnz	r3, 8000814 <__aeabi_uldivmod+0x18>
 80007fe:	b94a      	cbnz	r2, 8000814 <__aeabi_uldivmod+0x18>
 8000800:	2900      	cmp	r1, #0
 8000802:	bf08      	it	eq
 8000804:	2800      	cmpeq	r0, #0
 8000806:	bf1c      	itt	ne
 8000808:	f04f 31ff 	movne.w	r1, #4294967295
 800080c:	f04f 30ff 	movne.w	r0, #4294967295
 8000810:	f000 b970 	b.w	8000af4 <__aeabi_idiv0>
 8000814:	f1ad 0c08 	sub.w	ip, sp, #8
 8000818:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800081c:	f000 f806 	bl	800082c <__udivmoddi4>
 8000820:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000828:	b004      	add	sp, #16
 800082a:	4770      	bx	lr

0800082c <__udivmoddi4>:
 800082c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000830:	9e08      	ldr	r6, [sp, #32]
 8000832:	460d      	mov	r5, r1
 8000834:	4604      	mov	r4, r0
 8000836:	460f      	mov	r7, r1
 8000838:	2b00      	cmp	r3, #0
 800083a:	d14a      	bne.n	80008d2 <__udivmoddi4+0xa6>
 800083c:	428a      	cmp	r2, r1
 800083e:	4694      	mov	ip, r2
 8000840:	d965      	bls.n	800090e <__udivmoddi4+0xe2>
 8000842:	fab2 f382 	clz	r3, r2
 8000846:	b143      	cbz	r3, 800085a <__udivmoddi4+0x2e>
 8000848:	fa02 fc03 	lsl.w	ip, r2, r3
 800084c:	f1c3 0220 	rsb	r2, r3, #32
 8000850:	409f      	lsls	r7, r3
 8000852:	fa20 f202 	lsr.w	r2, r0, r2
 8000856:	4317      	orrs	r7, r2
 8000858:	409c      	lsls	r4, r3
 800085a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800085e:	fa1f f58c 	uxth.w	r5, ip
 8000862:	fbb7 f1fe 	udiv	r1, r7, lr
 8000866:	0c22      	lsrs	r2, r4, #16
 8000868:	fb0e 7711 	mls	r7, lr, r1, r7
 800086c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000870:	fb01 f005 	mul.w	r0, r1, r5
 8000874:	4290      	cmp	r0, r2
 8000876:	d90a      	bls.n	800088e <__udivmoddi4+0x62>
 8000878:	eb1c 0202 	adds.w	r2, ip, r2
 800087c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000880:	f080 811c 	bcs.w	8000abc <__udivmoddi4+0x290>
 8000884:	4290      	cmp	r0, r2
 8000886:	f240 8119 	bls.w	8000abc <__udivmoddi4+0x290>
 800088a:	3902      	subs	r1, #2
 800088c:	4462      	add	r2, ip
 800088e:	1a12      	subs	r2, r2, r0
 8000890:	b2a4      	uxth	r4, r4
 8000892:	fbb2 f0fe 	udiv	r0, r2, lr
 8000896:	fb0e 2210 	mls	r2, lr, r0, r2
 800089a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800089e:	fb00 f505 	mul.w	r5, r0, r5
 80008a2:	42a5      	cmp	r5, r4
 80008a4:	d90a      	bls.n	80008bc <__udivmoddi4+0x90>
 80008a6:	eb1c 0404 	adds.w	r4, ip, r4
 80008aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ae:	f080 8107 	bcs.w	8000ac0 <__udivmoddi4+0x294>
 80008b2:	42a5      	cmp	r5, r4
 80008b4:	f240 8104 	bls.w	8000ac0 <__udivmoddi4+0x294>
 80008b8:	4464      	add	r4, ip
 80008ba:	3802      	subs	r0, #2
 80008bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008c0:	1b64      	subs	r4, r4, r5
 80008c2:	2100      	movs	r1, #0
 80008c4:	b11e      	cbz	r6, 80008ce <__udivmoddi4+0xa2>
 80008c6:	40dc      	lsrs	r4, r3
 80008c8:	2300      	movs	r3, #0
 80008ca:	e9c6 4300 	strd	r4, r3, [r6]
 80008ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d2:	428b      	cmp	r3, r1
 80008d4:	d908      	bls.n	80008e8 <__udivmoddi4+0xbc>
 80008d6:	2e00      	cmp	r6, #0
 80008d8:	f000 80ed 	beq.w	8000ab6 <__udivmoddi4+0x28a>
 80008dc:	2100      	movs	r1, #0
 80008de:	e9c6 0500 	strd	r0, r5, [r6]
 80008e2:	4608      	mov	r0, r1
 80008e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008e8:	fab3 f183 	clz	r1, r3
 80008ec:	2900      	cmp	r1, #0
 80008ee:	d149      	bne.n	8000984 <__udivmoddi4+0x158>
 80008f0:	42ab      	cmp	r3, r5
 80008f2:	d302      	bcc.n	80008fa <__udivmoddi4+0xce>
 80008f4:	4282      	cmp	r2, r0
 80008f6:	f200 80f8 	bhi.w	8000aea <__udivmoddi4+0x2be>
 80008fa:	1a84      	subs	r4, r0, r2
 80008fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000900:	2001      	movs	r0, #1
 8000902:	4617      	mov	r7, r2
 8000904:	2e00      	cmp	r6, #0
 8000906:	d0e2      	beq.n	80008ce <__udivmoddi4+0xa2>
 8000908:	e9c6 4700 	strd	r4, r7, [r6]
 800090c:	e7df      	b.n	80008ce <__udivmoddi4+0xa2>
 800090e:	b902      	cbnz	r2, 8000912 <__udivmoddi4+0xe6>
 8000910:	deff      	udf	#255	; 0xff
 8000912:	fab2 f382 	clz	r3, r2
 8000916:	2b00      	cmp	r3, #0
 8000918:	f040 8090 	bne.w	8000a3c <__udivmoddi4+0x210>
 800091c:	1a8a      	subs	r2, r1, r2
 800091e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000922:	fa1f fe8c 	uxth.w	lr, ip
 8000926:	2101      	movs	r1, #1
 8000928:	fbb2 f5f7 	udiv	r5, r2, r7
 800092c:	fb07 2015 	mls	r0, r7, r5, r2
 8000930:	0c22      	lsrs	r2, r4, #16
 8000932:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000936:	fb0e f005 	mul.w	r0, lr, r5
 800093a:	4290      	cmp	r0, r2
 800093c:	d908      	bls.n	8000950 <__udivmoddi4+0x124>
 800093e:	eb1c 0202 	adds.w	r2, ip, r2
 8000942:	f105 38ff 	add.w	r8, r5, #4294967295
 8000946:	d202      	bcs.n	800094e <__udivmoddi4+0x122>
 8000948:	4290      	cmp	r0, r2
 800094a:	f200 80cb 	bhi.w	8000ae4 <__udivmoddi4+0x2b8>
 800094e:	4645      	mov	r5, r8
 8000950:	1a12      	subs	r2, r2, r0
 8000952:	b2a4      	uxth	r4, r4
 8000954:	fbb2 f0f7 	udiv	r0, r2, r7
 8000958:	fb07 2210 	mls	r2, r7, r0, r2
 800095c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000960:	fb0e fe00 	mul.w	lr, lr, r0
 8000964:	45a6      	cmp	lr, r4
 8000966:	d908      	bls.n	800097a <__udivmoddi4+0x14e>
 8000968:	eb1c 0404 	adds.w	r4, ip, r4
 800096c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000970:	d202      	bcs.n	8000978 <__udivmoddi4+0x14c>
 8000972:	45a6      	cmp	lr, r4
 8000974:	f200 80bb 	bhi.w	8000aee <__udivmoddi4+0x2c2>
 8000978:	4610      	mov	r0, r2
 800097a:	eba4 040e 	sub.w	r4, r4, lr
 800097e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000982:	e79f      	b.n	80008c4 <__udivmoddi4+0x98>
 8000984:	f1c1 0720 	rsb	r7, r1, #32
 8000988:	408b      	lsls	r3, r1
 800098a:	fa22 fc07 	lsr.w	ip, r2, r7
 800098e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000992:	fa05 f401 	lsl.w	r4, r5, r1
 8000996:	fa20 f307 	lsr.w	r3, r0, r7
 800099a:	40fd      	lsrs	r5, r7
 800099c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009a0:	4323      	orrs	r3, r4
 80009a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80009a6:	fa1f fe8c 	uxth.w	lr, ip
 80009aa:	fb09 5518 	mls	r5, r9, r8, r5
 80009ae:	0c1c      	lsrs	r4, r3, #16
 80009b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009b4:	fb08 f50e 	mul.w	r5, r8, lr
 80009b8:	42a5      	cmp	r5, r4
 80009ba:	fa02 f201 	lsl.w	r2, r2, r1
 80009be:	fa00 f001 	lsl.w	r0, r0, r1
 80009c2:	d90b      	bls.n	80009dc <__udivmoddi4+0x1b0>
 80009c4:	eb1c 0404 	adds.w	r4, ip, r4
 80009c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80009cc:	f080 8088 	bcs.w	8000ae0 <__udivmoddi4+0x2b4>
 80009d0:	42a5      	cmp	r5, r4
 80009d2:	f240 8085 	bls.w	8000ae0 <__udivmoddi4+0x2b4>
 80009d6:	f1a8 0802 	sub.w	r8, r8, #2
 80009da:	4464      	add	r4, ip
 80009dc:	1b64      	subs	r4, r4, r5
 80009de:	b29d      	uxth	r5, r3
 80009e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80009e4:	fb09 4413 	mls	r4, r9, r3, r4
 80009e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80009f0:	45a6      	cmp	lr, r4
 80009f2:	d908      	bls.n	8000a06 <__udivmoddi4+0x1da>
 80009f4:	eb1c 0404 	adds.w	r4, ip, r4
 80009f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80009fc:	d26c      	bcs.n	8000ad8 <__udivmoddi4+0x2ac>
 80009fe:	45a6      	cmp	lr, r4
 8000a00:	d96a      	bls.n	8000ad8 <__udivmoddi4+0x2ac>
 8000a02:	3b02      	subs	r3, #2
 8000a04:	4464      	add	r4, ip
 8000a06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a0e:	eba4 040e 	sub.w	r4, r4, lr
 8000a12:	42ac      	cmp	r4, r5
 8000a14:	46c8      	mov	r8, r9
 8000a16:	46ae      	mov	lr, r5
 8000a18:	d356      	bcc.n	8000ac8 <__udivmoddi4+0x29c>
 8000a1a:	d053      	beq.n	8000ac4 <__udivmoddi4+0x298>
 8000a1c:	b156      	cbz	r6, 8000a34 <__udivmoddi4+0x208>
 8000a1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000a22:	eb64 040e 	sbc.w	r4, r4, lr
 8000a26:	fa04 f707 	lsl.w	r7, r4, r7
 8000a2a:	40ca      	lsrs	r2, r1
 8000a2c:	40cc      	lsrs	r4, r1
 8000a2e:	4317      	orrs	r7, r2
 8000a30:	e9c6 7400 	strd	r7, r4, [r6]
 8000a34:	4618      	mov	r0, r3
 8000a36:	2100      	movs	r1, #0
 8000a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3c:	f1c3 0120 	rsb	r1, r3, #32
 8000a40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a44:	fa20 f201 	lsr.w	r2, r0, r1
 8000a48:	fa25 f101 	lsr.w	r1, r5, r1
 8000a4c:	409d      	lsls	r5, r3
 8000a4e:	432a      	orrs	r2, r5
 8000a50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000a60:	0c11      	lsrs	r1, r2, #16
 8000a62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a66:	fb00 f50e 	mul.w	r5, r0, lr
 8000a6a:	428d      	cmp	r5, r1
 8000a6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000a70:	d908      	bls.n	8000a84 <__udivmoddi4+0x258>
 8000a72:	eb1c 0101 	adds.w	r1, ip, r1
 8000a76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a7a:	d22f      	bcs.n	8000adc <__udivmoddi4+0x2b0>
 8000a7c:	428d      	cmp	r5, r1
 8000a7e:	d92d      	bls.n	8000adc <__udivmoddi4+0x2b0>
 8000a80:	3802      	subs	r0, #2
 8000a82:	4461      	add	r1, ip
 8000a84:	1b49      	subs	r1, r1, r5
 8000a86:	b292      	uxth	r2, r2
 8000a88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000a90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a94:	fb05 f10e 	mul.w	r1, r5, lr
 8000a98:	4291      	cmp	r1, r2
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x282>
 8000a9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000aa0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000aa4:	d216      	bcs.n	8000ad4 <__udivmoddi4+0x2a8>
 8000aa6:	4291      	cmp	r1, r2
 8000aa8:	d914      	bls.n	8000ad4 <__udivmoddi4+0x2a8>
 8000aaa:	3d02      	subs	r5, #2
 8000aac:	4462      	add	r2, ip
 8000aae:	1a52      	subs	r2, r2, r1
 8000ab0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ab4:	e738      	b.n	8000928 <__udivmoddi4+0xfc>
 8000ab6:	4631      	mov	r1, r6
 8000ab8:	4630      	mov	r0, r6
 8000aba:	e708      	b.n	80008ce <__udivmoddi4+0xa2>
 8000abc:	4639      	mov	r1, r7
 8000abe:	e6e6      	b.n	800088e <__udivmoddi4+0x62>
 8000ac0:	4610      	mov	r0, r2
 8000ac2:	e6fb      	b.n	80008bc <__udivmoddi4+0x90>
 8000ac4:	4548      	cmp	r0, r9
 8000ac6:	d2a9      	bcs.n	8000a1c <__udivmoddi4+0x1f0>
 8000ac8:	ebb9 0802 	subs.w	r8, r9, r2
 8000acc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	e7a3      	b.n	8000a1c <__udivmoddi4+0x1f0>
 8000ad4:	4645      	mov	r5, r8
 8000ad6:	e7ea      	b.n	8000aae <__udivmoddi4+0x282>
 8000ad8:	462b      	mov	r3, r5
 8000ada:	e794      	b.n	8000a06 <__udivmoddi4+0x1da>
 8000adc:	4640      	mov	r0, r8
 8000ade:	e7d1      	b.n	8000a84 <__udivmoddi4+0x258>
 8000ae0:	46d0      	mov	r8, sl
 8000ae2:	e77b      	b.n	80009dc <__udivmoddi4+0x1b0>
 8000ae4:	3d02      	subs	r5, #2
 8000ae6:	4462      	add	r2, ip
 8000ae8:	e732      	b.n	8000950 <__udivmoddi4+0x124>
 8000aea:	4608      	mov	r0, r1
 8000aec:	e70a      	b.n	8000904 <__udivmoddi4+0xd8>
 8000aee:	4464      	add	r4, ip
 8000af0:	3802      	subs	r0, #2
 8000af2:	e742      	b.n	800097a <__udivmoddi4+0x14e>

08000af4 <__aeabi_idiv0>:
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <LL_EXTI_EnableIT_32_63+0x24>)
 8000b02:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000b06:	4905      	ldr	r1, [pc, #20]	; (8000b1c <LL_EXTI_EnableIT_32_63+0x24>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	58000800 	.word	0x58000800

08000b20 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4013      	ands	r3, r2
 8000b42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b44:	68fb      	ldr	r3, [r7, #12]
}
 8000b46:	bf00      	nop
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b52:	b480      	push	{r7}
 8000b54:	b085      	sub	sp, #20
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b5e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000b62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b72:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
}
 8000b7e:	bf00      	nop
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000b8e:	f002 fb27 	bl	80031e0 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000b92:	f002 fb2b 	bl	80031ec <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000b96:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000b9a:	f7ff ffad 	bl	8000af8 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000b9e:	f00a fe3f 	bl	800b820 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000ba2:	f000 f821 	bl	8000be8 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000ba6:	f000 f8c1 	bl	8000d2c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000baa:	bf00      	nop
}
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000bb0:	b5b0      	push	{r4, r5, r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <APPD_EnableCPU2+0x34>)
 8000bb8:	1d3c      	adds	r4, r7, #4
 8000bba:	461d      	mov	r5, r3
 8000bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bc4:	c403      	stmia	r4!, {r0, r1}
 8000bc6:	8022      	strh	r2, [r4, #0]
 8000bc8:	3402      	adds	r4, #2
 8000bca:	0c13      	lsrs	r3, r2, #16
 8000bcc:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000bce:	f00a fd3b 	bl	800b648 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f009 ff9a 	bl	800ab0e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000bda:	bf00      	nop
}
 8000bdc:	3720      	adds	r7, #32
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bdb0      	pop	{r4, r5, r7, pc}
 8000be2:	bf00      	nop
 8000be4:	0800ee20 	.word	0x0800ee20

08000be8 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c08:	2300      	movs	r3, #0
 8000c0a:	77fb      	strb	r3, [r7, #31]
 8000c0c:	e036      	b.n	8000c7c <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000c0e:	7ffb      	ldrb	r3, [r7, #31]
 8000c10:	4a43      	ldr	r2, [pc, #268]	; (8000d20 <APPD_SetCPU2GpioConfig+0x138>)
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	4413      	add	r3, r2
 8000c16:	799b      	ldrb	r3, [r3, #6]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d02c      	beq.n	8000c76 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000c1c:	7ffb      	ldrb	r3, [r7, #31]
 8000c1e:	4a40      	ldr	r2, [pc, #256]	; (8000d20 <APPD_SetCPU2GpioConfig+0x138>)
 8000c20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c24:	4a3f      	ldr	r2, [pc, #252]	; (8000d24 <APPD_SetCPU2GpioConfig+0x13c>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d01b      	beq.n	8000c62 <APPD_SetCPU2GpioConfig+0x7a>
 8000c2a:	4a3e      	ldr	r2, [pc, #248]	; (8000d24 <APPD_SetCPU2GpioConfig+0x13c>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d821      	bhi.n	8000c74 <APPD_SetCPU2GpioConfig+0x8c>
 8000c30:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c34:	d003      	beq.n	8000c3e <APPD_SetCPU2GpioConfig+0x56>
 8000c36:	4a3c      	ldr	r2, [pc, #240]	; (8000d28 <APPD_SetCPU2GpioConfig+0x140>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d009      	beq.n	8000c50 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8000c3c:	e01a      	b.n	8000c74 <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000c3e:	7ffb      	ldrb	r3, [r7, #31]
 8000c40:	4a37      	ldr	r2, [pc, #220]	; (8000d20 <APPD_SetCPU2GpioConfig+0x138>)
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	4413      	add	r3, r2
 8000c46:	889a      	ldrh	r2, [r3, #4]
 8000c48:	8bbb      	ldrh	r3, [r7, #28]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	83bb      	strh	r3, [r7, #28]
          break;
 8000c4e:	e012      	b.n	8000c76 <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000c50:	7ffb      	ldrb	r3, [r7, #31]
 8000c52:	4a33      	ldr	r2, [pc, #204]	; (8000d20 <APPD_SetCPU2GpioConfig+0x138>)
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	4413      	add	r3, r2
 8000c58:	889a      	ldrh	r2, [r3, #4]
 8000c5a:	8b7b      	ldrh	r3, [r7, #26]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	837b      	strh	r3, [r7, #26]
          break;
 8000c60:	e009      	b.n	8000c76 <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000c62:	7ffb      	ldrb	r3, [r7, #31]
 8000c64:	4a2e      	ldr	r2, [pc, #184]	; (8000d20 <APPD_SetCPU2GpioConfig+0x138>)
 8000c66:	00db      	lsls	r3, r3, #3
 8000c68:	4413      	add	r3, r2
 8000c6a:	889a      	ldrh	r2, [r3, #4]
 8000c6c:	8b3b      	ldrh	r3, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	833b      	strh	r3, [r7, #24]
          break;
 8000c72:	e000      	b.n	8000c76 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8000c74:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c76:	7ffb      	ldrb	r3, [r7, #31]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	77fb      	strb	r3, [r7, #31]
 8000c7c:	7ffb      	ldrb	r3, [r7, #31]
 8000c7e:	2b25      	cmp	r3, #37	; 0x25
 8000c80:	d9c5      	bls.n	8000c0e <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000c8e:	8bbb      	ldrh	r3, [r7, #28]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d014      	beq.n	8000cbe <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000c94:	8bbb      	ldrh	r3, [r7, #28]
 8000c96:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f7ff ff41 	bl	8000b20 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f7ff ff57 	bl	8000b52 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cac:	f003 f8a0 	bl	8003df0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000cb0:	8bbb      	ldrh	r3, [r7, #28]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cba:	f003 fa09 	bl	80040d0 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000cbe:	8b7b      	ldrh	r3, [r7, #26]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d012      	beq.n	8000cea <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000cc4:	8b7b      	ldrh	r3, [r7, #26]
 8000cc6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc8:	2002      	movs	r0, #2
 8000cca:	f7ff ff29 	bl	8000b20 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000cce:	2002      	movs	r0, #2
 8000cd0:	f7ff ff3f 	bl	8000b52 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4813      	ldr	r0, [pc, #76]	; (8000d28 <APPD_SetCPU2GpioConfig+0x140>)
 8000cda:	f003 f889 	bl	8003df0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000cde:	8b7b      	ldrh	r3, [r7, #26]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4810      	ldr	r0, [pc, #64]	; (8000d28 <APPD_SetCPU2GpioConfig+0x140>)
 8000ce6:	f003 f9f3 	bl	80040d0 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000cea:	8b3b      	ldrh	r3, [r7, #24]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d013      	beq.n	8000d18 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000cf0:	8b3b      	ldrh	r3, [r7, #24]
 8000cf2:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf4:	2004      	movs	r0, #4
 8000cf6:	f7ff ff13 	bl	8000b20 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000cfa:	2004      	movs	r0, #4
 8000cfc:	f7ff ff29 	bl	8000b52 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	4619      	mov	r1, r3
 8000d04:	4807      	ldr	r0, [pc, #28]	; (8000d24 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d06:	f003 f873 	bl	8003df0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000d0a:	8b3b      	ldrh	r3, [r7, #24]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d12:	f003 f9dd 	bl	80040d0 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000d16:	bf00      	nop
 8000d18:	bf00      	nop
}
 8000d1a:	3720      	adds	r7, #32
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	0801000c 	.word	0x0801000c
 8000d24:	48000800 	.word	0x48000800
 8000d28:	48000400 	.word	0x48000400

08000d2c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000d30:	bf00      	nop
}
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000d3e:	f001 fb7d 	bl	800243c <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000d42:	bf00      	nop
}
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b084      	sub	sp, #16
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	60f8      	str	r0, [r7, #12]
 8000d4e:	460b      	mov	r3, r1
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000d54:	897a      	ldrh	r2, [r7, #10]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	68f9      	ldr	r1, [r7, #12]
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f001 f9a8 	bl	80020b0 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000d60:	bf00      	nop
}
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d76:	f023 0207 	bic.w	r2, r3, #7
 8000d7a:	4905      	ldr	r1, [pc, #20]	; (8000d90 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000d84:	bf00      	nop
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	58000400 	.word	0x58000400

08000d94 <LL_EXTI_EnableIT_32_63>:
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <LL_EXTI_EnableIT_32_63+0x24>)
 8000d9e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000da2:	4905      	ldr	r1, [pc, #20]	; (8000db8 <LL_EXTI_EnableIT_32_63+0x24>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	58000800 	.word	0x58000800

08000dbc <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000dca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000dd6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	021b      	lsls	r3, r3, #8
 8000dde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000de2:	4313      	orrs	r3, r2
 8000de4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	cafecafe 	.word	0xcafecafe

08000df8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000e0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	608b      	str	r3, [r1, #8]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <LL_DBGMCU_GetDeviceID+0x18>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e0042000 	.word	0xe0042000

08000e3c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <LL_DBGMCU_GetRevisionID+0x18>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	0c1b      	lsrs	r3, r3, #16
 8000e46:	b29b      	uxth	r3, r3
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e0042000 	.word	0xe0042000

08000e58 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	22ff      	movs	r2, #255	; 0xff
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	22ca      	movs	r2, #202	; 0xca
 8000e7e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2253      	movs	r2, #83	; 0x53
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
 8000e9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	f023 0207 	bic.w	r2, r3, #7
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <MX_APPE_Config+0x18>)
 8000ebe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ec2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000ec4:	f000 f828 	bl	8000f18 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000ec8:	f000 f82d 	bl	8000f26 <Config_HSE>

  return;
 8000ecc:	bf00      	nop
}
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	58004000 	.word	0x58004000

08000ed4 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000ed8:	f000 f839 	bl	8000f4e <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000edc:	f000 f852 	bl	8000f84 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000ee0:	4905      	ldr	r1, [pc, #20]	; (8000ef8 <MX_APPE_Init+0x24>)
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f000 fef2 	bl	8001ccc <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000ee8:	f7ff fe4f 	bl	8000b8a <APPD_Init>
  EEPROM_Emul_Init();
 8000eec:	f001 fbac 	bl	8002648 <EEPROM_Emul_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000ef0:	f000 f856 	bl	8000fa0 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000ef4:	bf00      	nop
}
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000504 	.word	0x20000504

08000efc <Init_Smps>:

void Init_Smps(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000f00:	bf00      	nop
}
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <Init_Exti>:

void Init_Exti(void)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000f0e:	2050      	movs	r0, #80	; 0x50
 8000f10:	f7ff ff40 	bl	8000d94 <LL_EXTI_EnableIT_32_63>

  return;
 8000f14:	bf00      	nop
}
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000f1c:	bf00      	nop
}
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f00a fcf5 	bl	800b91c <OTP_Read>
 8000f32:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d005      	beq.n	8000f46 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	799b      	ldrb	r3, [r3, #6]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff ff3c 	bl	8000dbc <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
}
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <System_Init>:

static void System_Init(void)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	af00      	add	r7, sp, #0
  Init_Smps();
 8000f52:	f7ff ffd3 	bl	8000efc <Init_Smps>

  Init_Exti();
 8000f56:	f7ff ffd8 	bl	8000f0a <Init_Exti>

  Init_Rtc();
 8000f5a:	f000 f803 	bl	8000f64 <Init_Rtc>

  return;
 8000f5e:	bf00      	nop
}
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000f68:	4805      	ldr	r0, [pc, #20]	; (8000f80 <Init_Rtc+0x1c>)
 8000f6a:	f7ff ff82 	bl	8000e72 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4803      	ldr	r0, [pc, #12]	; (8000f80 <Init_Rtc+0x1c>)
 8000f72:	f7ff ff8e 	bl	8000e92 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000f76:	4802      	ldr	r0, [pc, #8]	; (8000f80 <Init_Rtc+0x1c>)
 8000f78:	f7ff ff6e 	bl	8000e58 <LL_RTC_EnableWriteProtection>

  return;
 8000f7c:	bf00      	nop
}
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40002800 	.word	0x40002800

08000f84 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000f88:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f8c:	f7ff ff34 	bl	8000df8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000f90:	f00c fcb4 	bl	800d8fc <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000f94:	2004      	movs	r0, #4
 8000f96:	f7ff fee7 	bl	8000d68 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8000f9a:	bf00      	nop
}
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 8000fa6:	f00a f999 	bl	800b2dc <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000faa:	4a11      	ldr	r2, [pc, #68]	; (8000ff0 <appe_Tl_Init+0x50>)
 8000fac:	2100      	movs	r1, #0
 8000fae:	2004      	movs	r0, #4
 8000fb0:	f00c fde2 	bl	800db78 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <appe_Tl_Init+0x54>)
 8000fb6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <appe_Tl_Init+0x58>)
 8000fba:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	480e      	ldr	r0, [pc, #56]	; (8000ffc <appe_Tl_Init+0x5c>)
 8000fc2:	f00a f84d 	bl	800b060 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <appe_Tl_Init+0x60>)
 8000fc8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <appe_Tl_Init+0x64>)
 8000fcc:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <appe_Tl_Init+0x68>)
 8000fd0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000fd2:	f240 533c 	movw	r3, #1340	; 0x53c
 8000fd6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000fd8:	f107 0308 	add.w	r3, r7, #8
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f00a fabf 	bl	800b560 <TL_MM_Init>

  TL_Enable();
 8000fe2:	f00a f975 	bl	800b2d0 <TL_Enable>

  return;
 8000fe6:	bf00      	nop
}
 8000fe8:	3720      	adds	r7, #32
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	0800b099 	.word	0x0800b099
 8000ff4:	20030734 	.word	0x20030734
 8000ff8:	0800100d 	.word	0x0800100d
 8000ffc:	08001025 	.word	0x08001025
 8001000:	2003094c 	.word	0x2003094c
 8001004:	20030840 	.word	0x20030840
 8001008:	200301f8 	.word	0x200301f8

0800100c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001016:	bf00      	nop
}
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001024:	b5b0      	push	{r4, r5, r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	330b      	adds	r3, #11
 8001032:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	b29b      	uxth	r3, r3
 800103a:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800103e:	2b07      	cmp	r3, #7
 8001040:	f200 80e4 	bhi.w	800120c <APPE_SysUserEvtRx+0x1e8>
 8001044:	a201      	add	r2, pc, #4	; (adr r2, 800104c <APPE_SysUserEvtRx+0x28>)
 8001046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104a:	bf00      	nop
 800104c:	0800106d 	.word	0x0800106d
 8001050:	080010ff 	.word	0x080010ff
 8001054:	08001121 	.word	0x08001121
 8001058:	0800120d 	.word	0x0800120d
 800105c:	0800118d 	.word	0x0800118d
 8001060:	080011b1 	.word	0x080011b1
 8001064:	080011cd 	.word	0x080011cd
 8001068:	080011f1 	.word	0x080011f1
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	4618      	mov	r0, r3
 8001072:	f009 fdab 	bl	800abcc <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8001076:	4868      	ldr	r0, [pc, #416]	; (8001218 <APPE_SysUserEvtRx+0x1f4>)
 8001078:	f00a fb72 	bl	800b760 <DbgTraceGetFileName>
 800107c:	4601      	mov	r1, r0
 800107e:	f240 136d 	movw	r3, #365	; 0x16d
 8001082:	4a66      	ldr	r2, [pc, #408]	; (800121c <APPE_SysUserEvtRx+0x1f8>)
 8001084:	4866      	ldr	r0, [pc, #408]	; (8001220 <APPE_SysUserEvtRx+0x1fc>)
 8001086:	f00c ff7b 	bl	800df80 <iprintf>
 800108a:	7b3b      	ldrb	r3, [r7, #12]
 800108c:	4619      	mov	r1, r3
 800108e:	7b7b      	ldrb	r3, [r7, #13]
 8001090:	461a      	mov	r2, r3
 8001092:	7bbb      	ldrb	r3, [r7, #14]
 8001094:	4863      	ldr	r0, [pc, #396]	; (8001224 <APPE_SysUserEvtRx+0x200>)
 8001096:	f00c ff73 	bl	800df80 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 800109a:	485f      	ldr	r0, [pc, #380]	; (8001218 <APPE_SysUserEvtRx+0x1f4>)
 800109c:	f00a fb60 	bl	800b760 <DbgTraceGetFileName>
 80010a0:	4601      	mov	r1, r0
 80010a2:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80010a6:	4a5d      	ldr	r2, [pc, #372]	; (800121c <APPE_SysUserEvtRx+0x1f8>)
 80010a8:	485d      	ldr	r0, [pc, #372]	; (8001220 <APPE_SysUserEvtRx+0x1fc>)
 80010aa:	f00c ff69 	bl	800df80 <iprintf>
 80010ae:	7c3b      	ldrb	r3, [r7, #16]
 80010b0:	4619      	mov	r1, r3
 80010b2:	485d      	ldr	r0, [pc, #372]	; (8001228 <APPE_SysUserEvtRx+0x204>)
 80010b4:	f00c ff64 	bl	800df80 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80010b8:	4857      	ldr	r0, [pc, #348]	; (8001218 <APPE_SysUserEvtRx+0x1f4>)
 80010ba:	f00a fb51 	bl	800b760 <DbgTraceGetFileName>
 80010be:	4601      	mov	r1, r0
 80010c0:	f240 136f 	movw	r3, #367	; 0x16f
 80010c4:	4a55      	ldr	r2, [pc, #340]	; (800121c <APPE_SysUserEvtRx+0x1f8>)
 80010c6:	4856      	ldr	r0, [pc, #344]	; (8001220 <APPE_SysUserEvtRx+0x1fc>)
 80010c8:	f00c ff5a 	bl	800df80 <iprintf>
 80010cc:	7dbb      	ldrb	r3, [r7, #22]
 80010ce:	4619      	mov	r1, r3
 80010d0:	7dfb      	ldrb	r3, [r7, #23]
 80010d2:	461a      	mov	r2, r3
 80010d4:	7e3b      	ldrb	r3, [r7, #24]
 80010d6:	4855      	ldr	r0, [pc, #340]	; (800122c <APPE_SysUserEvtRx+0x208>)
 80010d8:	f00c ff52 	bl	800df80 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80010dc:	484e      	ldr	r0, [pc, #312]	; (8001218 <APPE_SysUserEvtRx+0x1f4>)
 80010de:	f00a fb3f 	bl	800b760 <DbgTraceGetFileName>
 80010e2:	4601      	mov	r1, r0
 80010e4:	f240 1371 	movw	r3, #369	; 0x171
 80010e8:	4a4c      	ldr	r2, [pc, #304]	; (800121c <APPE_SysUserEvtRx+0x1f8>)
 80010ea:	484d      	ldr	r0, [pc, #308]	; (8001220 <APPE_SysUserEvtRx+0x1fc>)
 80010ec:	f00c ff48 	bl	800df80 <iprintf>
 80010f0:	484f      	ldr	r0, [pc, #316]	; (8001230 <APPE_SysUserEvtRx+0x20c>)
 80010f2:	f00c ff45 	bl	800df80 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 f8f6 	bl	80012e8 <APPE_SysEvtReadyProcessing>
    break;
 80010fc:	e087      	b.n	800120e <APPE_SysUserEvtRx+0x1ea>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80010fe:	4846      	ldr	r0, [pc, #280]	; (8001218 <APPE_SysUserEvtRx+0x1f4>)
 8001100:	f00a fb2e 	bl	800b760 <DbgTraceGetFileName>
 8001104:	4601      	mov	r1, r0
 8001106:	f44f 73bb 	mov.w	r3, #374	; 0x176
 800110a:	4a44      	ldr	r2, [pc, #272]	; (800121c <APPE_SysUserEvtRx+0x1f8>)
 800110c:	4844      	ldr	r0, [pc, #272]	; (8001220 <APPE_SysUserEvtRx+0x1fc>)
 800110e:	f00c ff37 	bl	800df80 <iprintf>
 8001112:	4848      	ldr	r0, [pc, #288]	; (8001234 <APPE_SysUserEvtRx+0x210>)
 8001114:	f00c ff34 	bl	800df80 <iprintf>
    APPE_SysEvtError(pPayload);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f000 f89b 	bl	8001254 <APPE_SysEvtError>
    break;
 800111e:	e076      	b.n	800120e <APPE_SysUserEvtRx+0x1ea>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001120:	483d      	ldr	r0, [pc, #244]	; (8001218 <APPE_SysUserEvtRx+0x1f4>)
 8001122:	f00a fb1d 	bl	800b760 <DbgTraceGetFileName>
 8001126:	4601      	mov	r1, r0
 8001128:	f240 137b 	movw	r3, #379	; 0x17b
 800112c:	4a3b      	ldr	r2, [pc, #236]	; (800121c <APPE_SysUserEvtRx+0x1f8>)
 800112e:	483c      	ldr	r0, [pc, #240]	; (8001220 <APPE_SysUserEvtRx+0x1fc>)
 8001130:	f00c ff26 	bl	800df80 <iprintf>
 8001134:	4840      	ldr	r0, [pc, #256]	; (8001238 <APPE_SysUserEvtRx+0x214>)
 8001136:	f00c ff91 	bl	800e05c <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800113a:	4837      	ldr	r0, [pc, #220]	; (8001218 <APPE_SysUserEvtRx+0x1f4>)
 800113c:	f00a fb10 	bl	800b760 <DbgTraceGetFileName>
 8001140:	4601      	mov	r1, r0
 8001142:	f44f 73be 	mov.w	r3, #380	; 0x17c
 8001146:	4a35      	ldr	r2, [pc, #212]	; (800121c <APPE_SysUserEvtRx+0x1f8>)
 8001148:	4835      	ldr	r0, [pc, #212]	; (8001220 <APPE_SysUserEvtRx+0x1fc>)
 800114a:	f00c ff19 	bl	800df80 <iprintf>
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3302      	adds	r3, #2
 8001152:	6819      	ldr	r1, [r3, #0]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	3302      	adds	r3, #2
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	461a      	mov	r2, r3
 800115c:	4837      	ldr	r0, [pc, #220]	; (800123c <APPE_SysUserEvtRx+0x218>)
 800115e:	f00c ff0f 	bl	800df80 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    PrintNVM();
 8001162:	f001 fba3 	bl	80028ac <PrintNVM>
    NVM_write_flash(((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress, ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size, Get_SRAM_buffer_address());
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3302      	adds	r3, #2
 800116a:	681c      	ldr	r4, [r3, #0]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	3302      	adds	r3, #2
 8001170:	685d      	ldr	r5, [r3, #4]
 8001172:	f001 fb91 	bl	8002898 <Get_SRAM_buffer_address>
 8001176:	4603      	mov	r3, r0
 8001178:	461a      	mov	r2, r3
 800117a:	4629      	mov	r1, r5
 800117c:	4620      	mov	r0, r4
 800117e:	f001 fb0b 	bl	8002798 <NVM_write_flash>
    HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001182:	2102      	movs	r1, #2
 8001184:	482e      	ldr	r0, [pc, #184]	; (8001240 <APPE_SysUserEvtRx+0x21c>)
 8001186:	f002 ffbb 	bl	8004100 <HAL_GPIO_TogglePin>
    break;
 800118a:	e040      	b.n	800120e <APPE_SysUserEvtRx+0x1ea>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 800118c:	4822      	ldr	r0, [pc, #136]	; (8001218 <APPE_SysUserEvtRx+0x1f4>)
 800118e:	f00a fae7 	bl	800b760 <DbgTraceGetFileName>
 8001192:	4601      	mov	r1, r0
 8001194:	f240 1385 	movw	r3, #389	; 0x185
 8001198:	4a20      	ldr	r2, [pc, #128]	; (800121c <APPE_SysUserEvtRx+0x1f8>)
 800119a:	4821      	ldr	r0, [pc, #132]	; (8001220 <APPE_SysUserEvtRx+0x1fc>)
 800119c:	f00c fef0 	bl	800df80 <iprintf>
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	3302      	adds	r3, #2
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4619      	mov	r1, r3
 80011a8:	4826      	ldr	r0, [pc, #152]	; (8001244 <APPE_SysUserEvtRx+0x220>)
 80011aa:	f00c fee9 	bl	800df80 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 80011ae:	e02e      	b.n	800120e <APPE_SysUserEvtRx+0x1ea>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 80011b0:	4819      	ldr	r0, [pc, #100]	; (8001218 <APPE_SysUserEvtRx+0x1f4>)
 80011b2:	f00a fad5 	bl	800b760 <DbgTraceGetFileName>
 80011b6:	4601      	mov	r1, r0
 80011b8:	f44f 73c5 	mov.w	r3, #394	; 0x18a
 80011bc:	4a17      	ldr	r2, [pc, #92]	; (800121c <APPE_SysUserEvtRx+0x1f8>)
 80011be:	4818      	ldr	r0, [pc, #96]	; (8001220 <APPE_SysUserEvtRx+0x1fc>)
 80011c0:	f00c fede 	bl	800df80 <iprintf>
 80011c4:	4820      	ldr	r0, [pc, #128]	; (8001248 <APPE_SysUserEvtRx+0x224>)
 80011c6:	f00c fedb 	bl	800df80 <iprintf>
    break;
 80011ca:	e020      	b.n	800120e <APPE_SysUserEvtRx+0x1ea>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 80011cc:	4812      	ldr	r0, [pc, #72]	; (8001218 <APPE_SysUserEvtRx+0x1f4>)
 80011ce:	f00a fac7 	bl	800b760 <DbgTraceGetFileName>
 80011d2:	4601      	mov	r1, r0
 80011d4:	f44f 73c7 	mov.w	r3, #398	; 0x18e
 80011d8:	4a10      	ldr	r2, [pc, #64]	; (800121c <APPE_SysUserEvtRx+0x1f8>)
 80011da:	4811      	ldr	r0, [pc, #68]	; (8001220 <APPE_SysUserEvtRx+0x1fc>)
 80011dc:	f00c fed0 	bl	800df80 <iprintf>
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	3302      	adds	r3, #2
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4619      	mov	r1, r3
 80011e8:	4818      	ldr	r0, [pc, #96]	; (800124c <APPE_SysUserEvtRx+0x228>)
 80011ea:	f00c fec9 	bl	800df80 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 80011ee:	e00e      	b.n	800120e <APPE_SysUserEvtRx+0x1ea>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80011f0:	4809      	ldr	r0, [pc, #36]	; (8001218 <APPE_SysUserEvtRx+0x1f4>)
 80011f2:	f00a fab5 	bl	800b760 <DbgTraceGetFileName>
 80011f6:	4601      	mov	r1, r0
 80011f8:	f240 1393 	movw	r3, #403	; 0x193
 80011fc:	4a07      	ldr	r2, [pc, #28]	; (800121c <APPE_SysUserEvtRx+0x1f8>)
 80011fe:	4808      	ldr	r0, [pc, #32]	; (8001220 <APPE_SysUserEvtRx+0x1fc>)
 8001200:	f00c febe 	bl	800df80 <iprintf>
 8001204:	4812      	ldr	r0, [pc, #72]	; (8001250 <APPE_SysUserEvtRx+0x22c>)
 8001206:	f00c febb 	bl	800df80 <iprintf>
    break;
 800120a:	e000      	b.n	800120e <APPE_SysUserEvtRx+0x1ea>

  default:
    break;
 800120c:	bf00      	nop
  }

  return;
 800120e:	bf00      	nop
}
 8001210:	3720      	adds	r7, #32
 8001212:	46bd      	mov	sp, r7
 8001214:	bdb0      	pop	{r4, r5, r7, pc}
 8001216:	bf00      	nop
 8001218:	0800ee3c 	.word	0x0800ee3c
 800121c:	0801013c 	.word	0x0801013c
 8001220:	0800ee54 	.word	0x0800ee54
 8001224:	0800ee68 	.word	0x0800ee68
 8001228:	0800ee8c 	.word	0x0800ee8c
 800122c:	0800eea8 	.word	0x0800eea8
 8001230:	0800eec0 	.word	0x0800eec0
 8001234:	0800eee0 	.word	0x0800eee0
 8001238:	0800ef04 	.word	0x0800ef04
 800123c:	0800ef54 	.word	0x0800ef54
 8001240:	48000400 	.word	0x48000400
 8001244:	0800ef7c 	.word	0x0800ef7c
 8001248:	0800efb8 	.word	0x0800efb8
 800124c:	0800efdc 	.word	0x0800efdc
 8001250:	0800f018 	.word	0x0800f018

08001254 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	330b      	adds	r3, #11
 8001262:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	3302      	adds	r3, #2
 8001268:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 800126a:	4819      	ldr	r0, [pc, #100]	; (80012d0 <APPE_SysEvtError+0x7c>)
 800126c:	f00a fa78 	bl	800b760 <DbgTraceGetFileName>
 8001270:	4601      	mov	r1, r0
 8001272:	f240 13ab 	movw	r3, #427	; 0x1ab
 8001276:	4a17      	ldr	r2, [pc, #92]	; (80012d4 <APPE_SysEvtError+0x80>)
 8001278:	4817      	ldr	r0, [pc, #92]	; (80012d8 <APPE_SysEvtError+0x84>)
 800127a:	f00c fe81 	bl	800df80 <iprintf>
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	4619      	mov	r1, r3
 8001284:	4815      	ldr	r0, [pc, #84]	; (80012dc <APPE_SysEvtError+0x88>)
 8001286:	f00c fe7b 	bl	800df80 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10d      	bne.n	80012ae <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8001292:	480f      	ldr	r0, [pc, #60]	; (80012d0 <APPE_SysEvtError+0x7c>)
 8001294:	f00a fa64 	bl	800b760 <DbgTraceGetFileName>
 8001298:	4601      	mov	r1, r0
 800129a:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800129e:	4a0d      	ldr	r2, [pc, #52]	; (80012d4 <APPE_SysEvtError+0x80>)
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <APPE_SysEvtError+0x84>)
 80012a2:	f00c fe6d 	bl	800df80 <iprintf>
 80012a6:	480e      	ldr	r0, [pc, #56]	; (80012e0 <APPE_SysEvtError+0x8c>)
 80012a8:	f00c fed8 	bl	800e05c <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80012ac:	e00d      	b.n	80012ca <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80012ae:	4808      	ldr	r0, [pc, #32]	; (80012d0 <APPE_SysEvtError+0x7c>)
 80012b0:	f00a fa56 	bl	800b760 <DbgTraceGetFileName>
 80012b4:	4601      	mov	r1, r0
 80012b6:	f44f 73da 	mov.w	r3, #436	; 0x1b4
 80012ba:	4a06      	ldr	r2, [pc, #24]	; (80012d4 <APPE_SysEvtError+0x80>)
 80012bc:	4806      	ldr	r0, [pc, #24]	; (80012d8 <APPE_SysEvtError+0x84>)
 80012be:	f00c fe5f 	bl	800df80 <iprintf>
 80012c2:	4808      	ldr	r0, [pc, #32]	; (80012e4 <APPE_SysEvtError+0x90>)
 80012c4:	f00c feca 	bl	800e05c <puts>
  return;
 80012c8:	bf00      	nop
}
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	0800ee3c 	.word	0x0800ee3c
 80012d4:	08010150 	.word	0x08010150
 80012d8:	0800ee54 	.word	0x0800ee54
 80012dc:	0800f03c 	.word	0x0800f03c
 80012e0:	0800f06c 	.word	0x0800f06c
 80012e4:	0800f0a8 	.word	0x0800f0a8

080012e8 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80012f0:	f107 0308 	add.w	r3, r7, #8
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	330b      	adds	r3, #11
 800130c:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3302      	adds	r3, #2
 8001312:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d14e      	bne.n	80013ba <APPE_SysEvtReadyProcessing+0xd2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 800131c:	483a      	ldr	r0, [pc, #232]	; (8001408 <APPE_SysEvtReadyProcessing+0x120>)
 800131e:	f00a fa1f 	bl	800b760 <DbgTraceGetFileName>
 8001322:	4601      	mov	r1, r0
 8001324:	f44f 73e5 	mov.w	r3, #458	; 0x1ca
 8001328:	4a38      	ldr	r2, [pc, #224]	; (800140c <APPE_SysEvtReadyProcessing+0x124>)
 800132a:	4839      	ldr	r0, [pc, #228]	; (8001410 <APPE_SysEvtReadyProcessing+0x128>)
 800132c:	f00c fe28 	bl	800df80 <iprintf>
 8001330:	4838      	ldr	r0, [pc, #224]	; (8001414 <APPE_SysEvtReadyProcessing+0x12c>)
 8001332:	f00c fe93 	bl	800e05c <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001336:	f7ff fc3b 	bl	8000bb0 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800133a:	230f      	movs	r3, #15
 800133c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800133e:	237f      	movs	r3, #127	; 0x7f
 8001340:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001342:	f7ff fd7b 	bl	8000e3c <LL_DBGMCU_GetRevisionID>
 8001346:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001348:	482f      	ldr	r0, [pc, #188]	; (8001408 <APPE_SysEvtReadyProcessing+0x120>)
 800134a:	f00a fa09 	bl	800b760 <DbgTraceGetFileName>
 800134e:	4601      	mov	r1, r0
 8001350:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8001354:	4a2d      	ldr	r2, [pc, #180]	; (800140c <APPE_SysEvtReadyProcessing+0x124>)
 8001356:	482e      	ldr	r0, [pc, #184]	; (8001410 <APPE_SysEvtReadyProcessing+0x128>)
 8001358:	f00c fe12 	bl	800df80 <iprintf>
 800135c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800135e:	482e      	ldr	r0, [pc, #184]	; (8001418 <APPE_SysEvtReadyProcessing+0x130>)
 8001360:	f00c fe0e 	bl	800df80 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	b29b      	uxth	r3, r3
 8001368:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800136a:	f7ff fd59 	bl	8000e20 <LL_DBGMCU_GetDeviceID>
 800136e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001370:	4825      	ldr	r0, [pc, #148]	; (8001408 <APPE_SysEvtReadyProcessing+0x120>)
 8001372:	f00a f9f5 	bl	800b760 <DbgTraceGetFileName>
 8001376:	4601      	mov	r1, r0
 8001378:	f240 13e7 	movw	r3, #487	; 0x1e7
 800137c:	4a23      	ldr	r2, [pc, #140]	; (800140c <APPE_SysEvtReadyProcessing+0x124>)
 800137e:	4824      	ldr	r0, [pc, #144]	; (8001410 <APPE_SysEvtReadyProcessing+0x128>)
 8001380:	f00c fdfe 	bl	800df80 <iprintf>
 8001384:	6a39      	ldr	r1, [r7, #32]
 8001386:	4825      	ldr	r0, [pc, #148]	; (800141c <APPE_SysEvtReadyProcessing+0x134>)
 8001388:	f00c fdfa 	bl	800df80 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 800138c:	6a3b      	ldr	r3, [r7, #32]
 800138e:	b29b      	uxth	r3, r3
 8001390:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001392:	f107 0308 	add.w	r3, r7, #8
 8001396:	4618      	mov	r0, r3
 8001398:	f009 fc02 	bl	800aba0 <SHCI_C2_Config>

    APP_BLE_Init();
 800139c:	f00a ffca 	bl	800c334 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80013a0:	2100      	movs	r1, #0
 80013a2:	2001      	movs	r0, #1
 80013a4:	f00c fabc 	bl	800d920 <UTIL_LPM_SetOffMode>

    /* We activate the semaphore 7 flash protection to be used by CPU2 */
    if( SHCI_C2_SetFlashActivityControl(FLASH_ACTIVITY_CONTROL_SEM7) != SHCI_Success )
 80013a8:	2001      	movs	r0, #1
 80013aa:	f009 fbe0 	bl	800ab6e <SHCI_C2_SetFlashActivityControl>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d025      	beq.n	8001400 <APPE_SysEvtReadyProcessing+0x118>
    {
      Error_Handler();
 80013b4:	f001 f92a 	bl	800260c <Error_Handler>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80013b8:	e022      	b.n	8001400 <APPE_SysEvtReadyProcessing+0x118>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d110      	bne.n	80013e4 <APPE_SysEvtReadyProcessing+0xfc>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 80013c2:	4811      	ldr	r0, [pc, #68]	; (8001408 <APPE_SysEvtReadyProcessing+0x120>)
 80013c4:	f00a f9cc 	bl	800b760 <DbgTraceGetFileName>
 80013c8:	4601      	mov	r1, r0
 80013ca:	f44f 73fd 	mov.w	r3, #506	; 0x1fa
 80013ce:	4a0f      	ldr	r2, [pc, #60]	; (800140c <APPE_SysEvtReadyProcessing+0x124>)
 80013d0:	480f      	ldr	r0, [pc, #60]	; (8001410 <APPE_SysEvtReadyProcessing+0x128>)
 80013d2:	f00c fdd5 	bl	800df80 <iprintf>
 80013d6:	4812      	ldr	r0, [pc, #72]	; (8001420 <APPE_SysEvtReadyProcessing+0x138>)
 80013d8:	f00c fdd2 	bl	800df80 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
  return;
 80013e2:	e00d      	b.n	8001400 <APPE_SysEvtReadyProcessing+0x118>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 80013e4:	4808      	ldr	r0, [pc, #32]	; (8001408 <APPE_SysEvtReadyProcessing+0x120>)
 80013e6:	f00a f9bb 	bl	800b760 <DbgTraceGetFileName>
 80013ea:	4601      	mov	r1, r0
 80013ec:	f240 2301 	movw	r3, #513	; 0x201
 80013f0:	4a06      	ldr	r2, [pc, #24]	; (800140c <APPE_SysEvtReadyProcessing+0x124>)
 80013f2:	4807      	ldr	r0, [pc, #28]	; (8001410 <APPE_SysEvtReadyProcessing+0x128>)
 80013f4:	f00c fdc4 	bl	800df80 <iprintf>
 80013f8:	480a      	ldr	r0, [pc, #40]	; (8001424 <APPE_SysEvtReadyProcessing+0x13c>)
 80013fa:	f00c fdc1 	bl	800df80 <iprintf>
  return;
 80013fe:	bf00      	nop
 8001400:	bf00      	nop
}
 8001402:	3728      	adds	r7, #40	; 0x28
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	0800ee3c 	.word	0x0800ee3c
 800140c:	08010164 	.word	0x08010164
 8001410:	0800ee54 	.word	0x0800ee54
 8001414:	0800f0e0 	.word	0x0800f0e0
 8001418:	0800f0fc 	.word	0x0800f0fc
 800141c:	0800f120 	.word	0x0800f120
 8001420:	0800f140 	.word	0x0800f140
 8001424:	0800f174 	.word	0x0800f174

08001428 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f00c faa6 	bl	800d980 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800143c:	bf00      	nop
}
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	f00c fa94 	bl	800d980 <UTIL_SEQ_Run>
  return;
 8001458:	bf00      	nop
}
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001468:	2100      	movs	r1, #0
 800146a:	2004      	movs	r0, #4
 800146c:	f00c fba6 	bl	800dbbc <UTIL_SEQ_SetTask>
  return;
 8001470:	bf00      	nop
}
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001480:	2002      	movs	r0, #2
 8001482:	f00c fc07 	bl	800dc94 <UTIL_SEQ_SetEvt>
  return;
 8001486:	bf00      	nop
}
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001496:	2002      	movs	r0, #2
 8001498:	f00c fc1c 	bl	800dcd4 <UTIL_SEQ_WaitEvt>
  return;
 800149c:	bf00      	nop
}
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <LL_EXTI_EnableIT_0_31>:
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <LL_EXTI_EnableIT_0_31+0x24>)
 80014ae:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80014b2:	4905      	ldr	r1, [pc, #20]	; (80014c8 <LL_EXTI_EnableIT_0_31+0x24>)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	58000800 	.word	0x58000800

080014cc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4904      	ldr	r1, [pc, #16]	; (80014ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4313      	orrs	r3, r2
 80014de:	600b      	str	r3, [r1, #0]

}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	58000800 	.word	0x58000800

080014f0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80014f6:	4b0d      	ldr	r3, [pc, #52]	; (800152c <ReadRtcSsrValue+0x3c>)
 80014f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <ReadRtcSsrValue+0x3c>)
 8001500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001502:	b29b      	uxth	r3, r3
 8001504:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001506:	e005      	b.n	8001514 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800150c:	4b07      	ldr	r3, [pc, #28]	; (800152c <ReadRtcSsrValue+0x3c>)
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	b29b      	uxth	r3, r3
 8001512:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	429a      	cmp	r2, r3
 800151a:	d1f5      	bne.n	8001508 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800151c:	683b      	ldr	r3, [r7, #0]
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40002800 	.word	0x40002800

08001530 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	460a      	mov	r2, r1
 800153a:	71fb      	strb	r3, [r7, #7]
 800153c:	4613      	mov	r3, r2
 800153e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001540:	79ba      	ldrb	r2, [r7, #6]
 8001542:	491d      	ldr	r1, [pc, #116]	; (80015b8 <LinkTimerAfter+0x88>)
 8001544:	4613      	mov	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4413      	add	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	440b      	add	r3, r1
 800154e:	3315      	adds	r3, #21
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	2b06      	cmp	r3, #6
 8001558:	d009      	beq.n	800156e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800155a:	7bfa      	ldrb	r2, [r7, #15]
 800155c:	4916      	ldr	r1, [pc, #88]	; (80015b8 <LinkTimerAfter+0x88>)
 800155e:	4613      	mov	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4413      	add	r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	440b      	add	r3, r1
 8001568:	3314      	adds	r3, #20
 800156a:	79fa      	ldrb	r2, [r7, #7]
 800156c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800156e:	79fa      	ldrb	r2, [r7, #7]
 8001570:	4911      	ldr	r1, [pc, #68]	; (80015b8 <LinkTimerAfter+0x88>)
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	440b      	add	r3, r1
 800157c:	3315      	adds	r3, #21
 800157e:	7bfa      	ldrb	r2, [r7, #15]
 8001580:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001582:	79fa      	ldrb	r2, [r7, #7]
 8001584:	490c      	ldr	r1, [pc, #48]	; (80015b8 <LinkTimerAfter+0x88>)
 8001586:	4613      	mov	r3, r2
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	440b      	add	r3, r1
 8001590:	3314      	adds	r3, #20
 8001592:	79ba      	ldrb	r2, [r7, #6]
 8001594:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001596:	79ba      	ldrb	r2, [r7, #6]
 8001598:	4907      	ldr	r1, [pc, #28]	; (80015b8 <LinkTimerAfter+0x88>)
 800159a:	4613      	mov	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	440b      	add	r3, r1
 80015a4:	3315      	adds	r3, #21
 80015a6:	79fa      	ldrb	r2, [r7, #7]
 80015a8:	701a      	strb	r2, [r3, #0]

  return;
 80015aa:	bf00      	nop
}
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000168 	.word	0x20000168

080015bc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	460a      	mov	r2, r1
 80015c6:	71fb      	strb	r3, [r7, #7]
 80015c8:	4613      	mov	r3, r2
 80015ca:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80015cc:	4b29      	ldr	r3, [pc, #164]	; (8001674 <LinkTimerBefore+0xb8>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	79ba      	ldrb	r2, [r7, #6]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d032      	beq.n	800163e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80015d8:	79ba      	ldrb	r2, [r7, #6]
 80015da:	4927      	ldr	r1, [pc, #156]	; (8001678 <LinkTimerBefore+0xbc>)
 80015dc:	4613      	mov	r3, r2
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	4413      	add	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	440b      	add	r3, r1
 80015e6:	3314      	adds	r3, #20
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80015ec:	7bfa      	ldrb	r2, [r7, #15]
 80015ee:	4922      	ldr	r1, [pc, #136]	; (8001678 <LinkTimerBefore+0xbc>)
 80015f0:	4613      	mov	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	4413      	add	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	440b      	add	r3, r1
 80015fa:	3315      	adds	r3, #21
 80015fc:	79fa      	ldrb	r2, [r7, #7]
 80015fe:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001600:	79fa      	ldrb	r2, [r7, #7]
 8001602:	491d      	ldr	r1, [pc, #116]	; (8001678 <LinkTimerBefore+0xbc>)
 8001604:	4613      	mov	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	440b      	add	r3, r1
 800160e:	3315      	adds	r3, #21
 8001610:	79ba      	ldrb	r2, [r7, #6]
 8001612:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001614:	79fa      	ldrb	r2, [r7, #7]
 8001616:	4918      	ldr	r1, [pc, #96]	; (8001678 <LinkTimerBefore+0xbc>)
 8001618:	4613      	mov	r3, r2
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4413      	add	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	440b      	add	r3, r1
 8001622:	3314      	adds	r3, #20
 8001624:	7bfa      	ldrb	r2, [r7, #15]
 8001626:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001628:	79ba      	ldrb	r2, [r7, #6]
 800162a:	4913      	ldr	r1, [pc, #76]	; (8001678 <LinkTimerBefore+0xbc>)
 800162c:	4613      	mov	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4413      	add	r3, r2
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	440b      	add	r3, r1
 8001636:	3314      	adds	r3, #20
 8001638:	79fa      	ldrb	r2, [r7, #7]
 800163a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800163c:	e014      	b.n	8001668 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800163e:	79fa      	ldrb	r2, [r7, #7]
 8001640:	490d      	ldr	r1, [pc, #52]	; (8001678 <LinkTimerBefore+0xbc>)
 8001642:	4613      	mov	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4413      	add	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	440b      	add	r3, r1
 800164c:	3315      	adds	r3, #21
 800164e:	79ba      	ldrb	r2, [r7, #6]
 8001650:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001652:	79ba      	ldrb	r2, [r7, #6]
 8001654:	4908      	ldr	r1, [pc, #32]	; (8001678 <LinkTimerBefore+0xbc>)
 8001656:	4613      	mov	r3, r2
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4413      	add	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	440b      	add	r3, r1
 8001660:	3314      	adds	r3, #20
 8001662:	79fa      	ldrb	r2, [r7, #7]
 8001664:	701a      	strb	r2, [r3, #0]
  return;
 8001666:	bf00      	nop
}
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	200001f8 	.word	0x200001f8
 8001678:	20000168 	.word	0x20000168

0800167c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001686:	4b4e      	ldr	r3, [pc, #312]	; (80017c0 <linkTimer+0x144>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b06      	cmp	r3, #6
 800168e:	d118      	bne.n	80016c2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001690:	4b4b      	ldr	r3, [pc, #300]	; (80017c0 <linkTimer+0x144>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4b4b      	ldr	r3, [pc, #300]	; (80017c4 <linkTimer+0x148>)
 8001698:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800169a:	4a49      	ldr	r2, [pc, #292]	; (80017c0 <linkTimer+0x144>)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80016a0:	79fa      	ldrb	r2, [r7, #7]
 80016a2:	4949      	ldr	r1, [pc, #292]	; (80017c8 <linkTimer+0x14c>)
 80016a4:	4613      	mov	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4413      	add	r3, r2
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	440b      	add	r3, r1
 80016ae:	3315      	adds	r3, #21
 80016b0:	2206      	movs	r2, #6
 80016b2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80016b4:	4b45      	ldr	r3, [pc, #276]	; (80017cc <linkTimer+0x150>)
 80016b6:	f04f 32ff 	mov.w	r2, #4294967295
 80016ba:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	81fb      	strh	r3, [r7, #14]
 80016c0:	e078      	b.n	80017b4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80016c2:	f000 f909 	bl	80018d8 <ReturnTimeElapsed>
 80016c6:	4603      	mov	r3, r0
 80016c8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80016ca:	79fa      	ldrb	r2, [r7, #7]
 80016cc:	493e      	ldr	r1, [pc, #248]	; (80017c8 <linkTimer+0x14c>)
 80016ce:	4613      	mov	r3, r2
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4413      	add	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	440b      	add	r3, r1
 80016d8:	3308      	adds	r3, #8
 80016da:	6819      	ldr	r1, [r3, #0]
 80016dc:	89fb      	ldrh	r3, [r7, #14]
 80016de:	79fa      	ldrb	r2, [r7, #7]
 80016e0:	4419      	add	r1, r3
 80016e2:	4839      	ldr	r0, [pc, #228]	; (80017c8 <linkTimer+0x14c>)
 80016e4:	4613      	mov	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	4403      	add	r3, r0
 80016ee:	3308      	adds	r3, #8
 80016f0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80016f2:	79fa      	ldrb	r2, [r7, #7]
 80016f4:	4934      	ldr	r1, [pc, #208]	; (80017c8 <linkTimer+0x14c>)
 80016f6:	4613      	mov	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	440b      	add	r3, r1
 8001700:	3308      	adds	r3, #8
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001706:	4b2e      	ldr	r3, [pc, #184]	; (80017c0 <linkTimer+0x144>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	4619      	mov	r1, r3
 800170e:	4a2e      	ldr	r2, [pc, #184]	; (80017c8 <linkTimer+0x14c>)
 8001710:	460b      	mov	r3, r1
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	440b      	add	r3, r1
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4413      	add	r3, r2
 800171a:	3308      	adds	r3, #8
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	429a      	cmp	r2, r3
 8001722:	d337      	bcc.n	8001794 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001724:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <linkTimer+0x144>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800172a:	7b7a      	ldrb	r2, [r7, #13]
 800172c:	4926      	ldr	r1, [pc, #152]	; (80017c8 <linkTimer+0x14c>)
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	440b      	add	r3, r1
 8001738:	3315      	adds	r3, #21
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800173e:	e013      	b.n	8001768 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001740:	7b7a      	ldrb	r2, [r7, #13]
 8001742:	4921      	ldr	r1, [pc, #132]	; (80017c8 <linkTimer+0x14c>)
 8001744:	4613      	mov	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	440b      	add	r3, r1
 800174e:	3315      	adds	r3, #21
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001754:	7b7a      	ldrb	r2, [r7, #13]
 8001756:	491c      	ldr	r1, [pc, #112]	; (80017c8 <linkTimer+0x14c>)
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	440b      	add	r3, r1
 8001762:	3315      	adds	r3, #21
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001768:	7b3b      	ldrb	r3, [r7, #12]
 800176a:	2b06      	cmp	r3, #6
 800176c:	d00b      	beq.n	8001786 <linkTimer+0x10a>
 800176e:	7b3a      	ldrb	r2, [r7, #12]
 8001770:	4915      	ldr	r1, [pc, #84]	; (80017c8 <linkTimer+0x14c>)
 8001772:	4613      	mov	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	440b      	add	r3, r1
 800177c:	3308      	adds	r3, #8
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68ba      	ldr	r2, [r7, #8]
 8001782:	429a      	cmp	r2, r3
 8001784:	d2dc      	bcs.n	8001740 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001786:	7b7a      	ldrb	r2, [r7, #13]
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fecf 	bl	8001530 <LinkTimerAfter>
 8001792:	e00f      	b.n	80017b4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <linkTimer+0x144>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	4611      	mov	r1, r2
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff ff0c 	bl	80015bc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <linkTimer+0x144>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <linkTimer+0x148>)
 80017ac:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80017ae:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <linkTimer+0x144>)
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80017b4:	89fb      	ldrh	r3, [r7, #14]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200001f8 	.word	0x200001f8
 80017c4:	200001f9 	.word	0x200001f9
 80017c8:	20000168 	.word	0x20000168
 80017cc:	200001fc 	.word	0x200001fc

080017d0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	460a      	mov	r2, r1
 80017da:	71fb      	strb	r3, [r7, #7]
 80017dc:	4613      	mov	r3, r2
 80017de:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80017e0:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <UnlinkTimer+0xf8>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	79fa      	ldrb	r2, [r7, #7]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d111      	bne.n	8001810 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80017ec:	4b36      	ldr	r3, [pc, #216]	; (80018c8 <UnlinkTimer+0xf8>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4b36      	ldr	r3, [pc, #216]	; (80018cc <UnlinkTimer+0xfc>)
 80017f4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80017f6:	79fa      	ldrb	r2, [r7, #7]
 80017f8:	4935      	ldr	r1, [pc, #212]	; (80018d0 <UnlinkTimer+0x100>)
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	440b      	add	r3, r1
 8001804:	3315      	adds	r3, #21
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <UnlinkTimer+0xf8>)
 800180c:	701a      	strb	r2, [r3, #0]
 800180e:	e03e      	b.n	800188e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001810:	79fa      	ldrb	r2, [r7, #7]
 8001812:	492f      	ldr	r1, [pc, #188]	; (80018d0 <UnlinkTimer+0x100>)
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	440b      	add	r3, r1
 800181e:	3314      	adds	r3, #20
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001824:	79fa      	ldrb	r2, [r7, #7]
 8001826:	492a      	ldr	r1, [pc, #168]	; (80018d0 <UnlinkTimer+0x100>)
 8001828:	4613      	mov	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4413      	add	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	440b      	add	r3, r1
 8001832:	3315      	adds	r3, #21
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001838:	79f9      	ldrb	r1, [r7, #7]
 800183a:	7bfa      	ldrb	r2, [r7, #15]
 800183c:	4824      	ldr	r0, [pc, #144]	; (80018d0 <UnlinkTimer+0x100>)
 800183e:	460b      	mov	r3, r1
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	440b      	add	r3, r1
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	4403      	add	r3, r0
 8001848:	3315      	adds	r3, #21
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	b2d8      	uxtb	r0, r3
 800184e:	4920      	ldr	r1, [pc, #128]	; (80018d0 <UnlinkTimer+0x100>)
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	440b      	add	r3, r1
 800185a:	3315      	adds	r3, #21
 800185c:	4602      	mov	r2, r0
 800185e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001860:	7bbb      	ldrb	r3, [r7, #14]
 8001862:	2b06      	cmp	r3, #6
 8001864:	d013      	beq.n	800188e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001866:	79f9      	ldrb	r1, [r7, #7]
 8001868:	7bba      	ldrb	r2, [r7, #14]
 800186a:	4819      	ldr	r0, [pc, #100]	; (80018d0 <UnlinkTimer+0x100>)
 800186c:	460b      	mov	r3, r1
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	440b      	add	r3, r1
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	4403      	add	r3, r0
 8001876:	3314      	adds	r3, #20
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	b2d8      	uxtb	r0, r3
 800187c:	4914      	ldr	r1, [pc, #80]	; (80018d0 <UnlinkTimer+0x100>)
 800187e:	4613      	mov	r3, r2
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	4413      	add	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	440b      	add	r3, r1
 8001888:	3314      	adds	r3, #20
 800188a:	4602      	mov	r2, r0
 800188c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800188e:	79fa      	ldrb	r2, [r7, #7]
 8001890:	490f      	ldr	r1, [pc, #60]	; (80018d0 <UnlinkTimer+0x100>)
 8001892:	4613      	mov	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4413      	add	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	440b      	add	r3, r1
 800189c:	330c      	adds	r3, #12
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <UnlinkTimer+0xf8>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b06      	cmp	r3, #6
 80018aa:	d107      	bne.n	80018bc <UnlinkTimer+0xec>
 80018ac:	79bb      	ldrb	r3, [r7, #6]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d104      	bne.n	80018bc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80018b2:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <UnlinkTimer+0x104>)
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295
 80018b8:	601a      	str	r2, [r3, #0]
  }

  return;
 80018ba:	bf00      	nop
 80018bc:	bf00      	nop
}
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	200001f8 	.word	0x200001f8
 80018cc:	200001f9 	.word	0x200001f9
 80018d0:	20000168 	.word	0x20000168
 80018d4:	200001fc 	.word	0x200001fc

080018d8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80018de:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <ReturnTimeElapsed+0x70>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e6:	d026      	beq.n	8001936 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80018e8:	f7ff fe02 	bl	80014f0 <ReadRtcSsrValue>
 80018ec:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80018ee:	4b16      	ldr	r3, [pc, #88]	; (8001948 <ReturnTimeElapsed+0x70>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d805      	bhi.n	8001904 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80018f8:	4b13      	ldr	r3, [pc, #76]	; (8001948 <ReturnTimeElapsed+0x70>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	e00a      	b.n	800191a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <ReturnTimeElapsed+0x74>)
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001910:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <ReturnTimeElapsed+0x70>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	4413      	add	r3, r2
 8001918:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800191a:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <ReturnTimeElapsed+0x78>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	fb02 f303 	mul.w	r3, r2, r3
 8001926:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <ReturnTimeElapsed+0x7c>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	40d3      	lsrs	r3, r2
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	e001      	b.n	800193a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	b29b      	uxth	r3, r3
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200001fc 	.word	0x200001fc
 800194c:	20000204 	.word	0x20000204
 8001950:	20000202 	.word	0x20000202
 8001954:	20000201 	.word	0x20000201

08001958 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d108      	bne.n	800197a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001968:	f7ff fdc2 	bl	80014f0 <ReadRtcSsrValue>
 800196c:	4603      	mov	r3, r0
 800196e:	4a21      	ldr	r2, [pc, #132]	; (80019f4 <RestartWakeupCounter+0x9c>)
 8001970:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001972:	2003      	movs	r0, #3
 8001974:	f001 fdbd 	bl	80034f2 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001978:	e039      	b.n	80019ee <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d803      	bhi.n	8001988 <RestartWakeupCounter+0x30>
 8001980:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <RestartWakeupCounter+0xa0>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d002      	beq.n	800198e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	3b01      	subs	r3, #1
 800198c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800198e:	bf00      	nop
 8001990:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <RestartWakeupCounter+0xa4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f8      	beq.n	8001990 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <RestartWakeupCounter+0xa4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <RestartWakeupCounter+0xa4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80019ae:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <RestartWakeupCounter+0xa8>)
 80019b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019b6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80019b8:	2003      	movs	r0, #3
 80019ba:	f001 fda8 	bl	800350e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <RestartWakeupCounter+0xac>)
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	0c1b      	lsrs	r3, r3, #16
 80019c4:	041b      	lsls	r3, r3, #16
 80019c6:	88fa      	ldrh	r2, [r7, #6]
 80019c8:	490e      	ldr	r1, [pc, #56]	; (8001a04 <RestartWakeupCounter+0xac>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80019ce:	f7ff fd8f 	bl	80014f0 <ReadRtcSsrValue>
 80019d2:	4603      	mov	r3, r0
 80019d4:	4a07      	ldr	r2, [pc, #28]	; (80019f4 <RestartWakeupCounter+0x9c>)
 80019d6:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80019d8:	4b08      	ldr	r3, [pc, #32]	; (80019fc <RestartWakeupCounter+0xa4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <RestartWakeupCounter+0xa4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019e6:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80019e8:	f3af 8000 	nop.w
  return ;
 80019ec:	bf00      	nop
}
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	200001fc 	.word	0x200001fc
 80019f8:	20000201 	.word	0x20000201
 80019fc:	20000504 	.word	0x20000504
 8001a00:	58000800 	.word	0x58000800
 8001a04:	40002800 	.word	0x40002800

08001a08 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001a0e:	4b45      	ldr	r3, [pc, #276]	; (8001b24 <RescheduleTimerList+0x11c>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1a:	d107      	bne.n	8001a2c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001a1c:	bf00      	nop
 8001a1e:	4b42      	ldr	r3, [pc, #264]	; (8001b28 <RescheduleTimerList+0x120>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f8      	bne.n	8001a1e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001a2c:	4b3e      	ldr	r3, [pc, #248]	; (8001b28 <RescheduleTimerList+0x120>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	4b3d      	ldr	r3, [pc, #244]	; (8001b28 <RescheduleTimerList+0x120>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a3a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001a3c:	4b3b      	ldr	r3, [pc, #236]	; (8001b2c <RescheduleTimerList+0x124>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001a42:	7bfa      	ldrb	r2, [r7, #15]
 8001a44:	493a      	ldr	r1, [pc, #232]	; (8001b30 <RescheduleTimerList+0x128>)
 8001a46:	4613      	mov	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4413      	add	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	440b      	add	r3, r1
 8001a50:	3308      	adds	r3, #8
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001a56:	f7ff ff3f 	bl	80018d8 <ReturnTimeElapsed>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d205      	bcs.n	8001a72 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001a6a:	4b32      	ldr	r3, [pc, #200]	; (8001b34 <RescheduleTimerList+0x12c>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
 8001a70:	e04d      	b.n	8001b0e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	4a30      	ldr	r2, [pc, #192]	; (8001b38 <RescheduleTimerList+0x130>)
 8001a76:	8812      	ldrh	r2, [r2, #0]
 8001a78:	b292      	uxth	r2, r2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d906      	bls.n	8001a92 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001a84:	4b2c      	ldr	r3, [pc, #176]	; (8001b38 <RescheduleTimerList+0x130>)
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001a8a:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <RescheduleTimerList+0x12c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
 8001a90:	e03d      	b.n	8001b0e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001a9c:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <RescheduleTimerList+0x12c>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001aa2:	e034      	b.n	8001b0e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001aa4:	7bfa      	ldrb	r2, [r7, #15]
 8001aa6:	4922      	ldr	r1, [pc, #136]	; (8001b30 <RescheduleTimerList+0x128>)
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4413      	add	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	440b      	add	r3, r1
 8001ab2:	3308      	adds	r3, #8
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d20a      	bcs.n	8001ad2 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001abc:	7bfa      	ldrb	r2, [r7, #15]
 8001abe:	491c      	ldr	r1, [pc, #112]	; (8001b30 <RescheduleTimerList+0x128>)
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4413      	add	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	440b      	add	r3, r1
 8001aca:	3308      	adds	r3, #8
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	e013      	b.n	8001afa <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001ad2:	7bfa      	ldrb	r2, [r7, #15]
 8001ad4:	4916      	ldr	r1, [pc, #88]	; (8001b30 <RescheduleTimerList+0x128>)
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4413      	add	r3, r2
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	440b      	add	r3, r1
 8001ae0:	3308      	adds	r3, #8
 8001ae2:	6819      	ldr	r1, [r3, #0]
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	7bfa      	ldrb	r2, [r7, #15]
 8001ae8:	1ac9      	subs	r1, r1, r3
 8001aea:	4811      	ldr	r0, [pc, #68]	; (8001b30 <RescheduleTimerList+0x128>)
 8001aec:	4613      	mov	r3, r2
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	4413      	add	r3, r2
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	4403      	add	r3, r0
 8001af6:	3308      	adds	r3, #8
 8001af8:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001afa:	7bfa      	ldrb	r2, [r7, #15]
 8001afc:	490c      	ldr	r1, [pc, #48]	; (8001b30 <RescheduleTimerList+0x128>)
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	00db      	lsls	r3, r3, #3
 8001b06:	440b      	add	r3, r1
 8001b08:	3315      	adds	r3, #21
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	2b06      	cmp	r3, #6
 8001b12:	d1c7      	bne.n	8001aa4 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001b14:	89bb      	ldrh	r3, [r7, #12]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff ff1e 	bl	8001958 <RestartWakeupCounter>

  return ;
 8001b1c:	bf00      	nop
}
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40002800 	.word	0x40002800
 8001b28:	20000504 	.word	0x20000504
 8001b2c:	200001f8 	.word	0x200001f8
 8001b30:	20000168 	.word	0x20000168
 8001b34:	20000200 	.word	0x20000200
 8001b38:	20000206 	.word	0x20000206

08001b3c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	; 0x28
 8001b40:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b42:	f3ef 8310 	mrs	r3, PRIMASK
 8001b46:	617b      	str	r3, [r7, #20]
  return(result);
 8001b48:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001b4c:	b672      	cpsid	i
}
 8001b4e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001b50:	4b59      	ldr	r3, [pc, #356]	; (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	22ca      	movs	r2, #202	; 0xca
 8001b56:	625a      	str	r2, [r3, #36]	; 0x24
 8001b58:	4b57      	ldr	r3, [pc, #348]	; (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2253      	movs	r2, #83	; 0x53
 8001b5e:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001b60:	4b55      	ldr	r3, [pc, #340]	; (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	4b54      	ldr	r3, [pc, #336]	; (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b6e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001b70:	4b52      	ldr	r3, [pc, #328]	; (8001cbc <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001b78:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b7c:	4950      	ldr	r1, [pc, #320]	; (8001cc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b7e:	4613      	mov	r3, r2
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	4413      	add	r3, r2
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	440b      	add	r3, r1
 8001b88:	330c      	adds	r3, #12
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d16e      	bne.n	8001c70 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001b92:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001b96:	494a      	ldr	r1, [pc, #296]	; (8001cc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	440b      	add	r3, r1
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001ba6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001baa:	4945      	ldr	r1, [pc, #276]	; (8001cc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3310      	adds	r3, #16
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001bbc:	4b41      	ldr	r3, [pc, #260]	; (8001cc4 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d04c      	beq.n	8001c60 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001bc6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001bca:	493d      	ldr	r1, [pc, #244]	; (8001cc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001bcc:	4613      	mov	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	440b      	add	r3, r1
 8001bd6:	330d      	adds	r3, #13
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d124      	bne.n	8001c2a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001be0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001be4:	2101      	movs	r1, #1
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fdf2 	bl	80017d0 <UnlinkTimer>
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	f383 8810 	msr	PRIMASK, r3
}
 8001bf6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001bf8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001bfc:	4930      	ldr	r1, [pc, #192]	; (8001cc0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001bfe:	4613      	mov	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	3304      	adds	r3, #4
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c10:	4611      	mov	r1, r2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 f9b8 	bl	8001f88 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c18:	4b27      	ldr	r3, [pc, #156]	; (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	22ca      	movs	r2, #202	; 0xca
 8001c1e:	625a      	str	r2, [r3, #36]	; 0x24
 8001c20:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2253      	movs	r2, #83	; 0x53
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24
 8001c28:	e012      	b.n	8001c50 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f383 8810 	msr	PRIMASK, r3
}
 8001c34:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001c36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 f920 	bl	8001e80 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001c40:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	22ca      	movs	r2, #202	; 0xca
 8001c46:	625a      	str	r2, [r3, #36]	; 0x24
 8001c48:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2253      	movs	r2, #83	; 0x53
 8001c4e:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001c50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	4619      	mov	r1, r3
 8001c58:	69b8      	ldr	r0, [r7, #24]
 8001c5a:	f000 fa1b 	bl	8002094 <HW_TS_RTC_Int_AppNot>
 8001c5e:	e022      	b.n	8001ca6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001c60:	f7ff fed2 	bl	8001a08 <RescheduleTimerList>
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	f383 8810 	msr	PRIMASK, r3
}
 8001c6e:	e01a      	b.n	8001ca6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001c70:	bf00      	nop
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f8      	beq.n	8001c72 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001c80:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	b2da      	uxtb	r2, r3
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001c90:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001c94:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f383 8810 	msr	PRIMASK, r3
}
 8001ca4:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	22ff      	movs	r2, #255	; 0xff
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001cae:	bf00      	nop
}
 8001cb0:	3728      	adds	r7, #40	; 0x28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000504 	.word	0x20000504
 8001cbc:	200001f8 	.word	0x200001f8
 8001cc0:	20000168 	.word	0x20000168
 8001cc4:	20000200 	.word	0x20000200
 8001cc8:	58000800 	.word	0x58000800

08001ccc <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	6039      	str	r1, [r7, #0]
 8001cd6:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001cd8:	4b5e      	ldr	r3, [pc, #376]	; (8001e54 <HW_TS_Init+0x188>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	22ca      	movs	r2, #202	; 0xca
 8001cde:	625a      	str	r2, [r3, #36]	; 0x24
 8001ce0:	4b5c      	ldr	r3, [pc, #368]	; (8001e54 <HW_TS_Init+0x188>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2253      	movs	r2, #83	; 0x53
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001ce8:	4b5b      	ldr	r3, [pc, #364]	; (8001e58 <HW_TS_Init+0x18c>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	4a5a      	ldr	r2, [pc, #360]	; (8001e58 <HW_TS_Init+0x18c>)
 8001cee:	f043 0320 	orr.w	r3, r3, #32
 8001cf2:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001cf4:	4b58      	ldr	r3, [pc, #352]	; (8001e58 <HW_TS_Init+0x18c>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f1c3 0304 	rsb	r3, r3, #4
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4b55      	ldr	r3, [pc, #340]	; (8001e5c <HW_TS_Init+0x190>)
 8001d08:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001d0a:	4b53      	ldr	r3, [pc, #332]	; (8001e58 <HW_TS_Init+0x18c>)
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d12:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001d16:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	fa92 f2a2 	rbit	r2, r2
 8001d1e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	2a00      	cmp	r2, #0
 8001d28:	d101      	bne.n	8001d2e <HW_TS_Init+0x62>
  {
    return 32U;
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	e003      	b.n	8001d36 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	fab2 f282 	clz	r2, r2
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	40d3      	lsrs	r3, r2
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4b48      	ldr	r3, [pc, #288]	; (8001e60 <HW_TS_Init+0x194>)
 8001d40:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001d42:	4b45      	ldr	r3, [pc, #276]	; (8001e58 <HW_TS_Init+0x18c>)
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	4b44      	ldr	r3, [pc, #272]	; (8001e64 <HW_TS_Init+0x198>)
 8001d54:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001d56:	4b43      	ldr	r3, [pc, #268]	; (8001e64 <HW_TS_Init+0x198>)
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	4a40      	ldr	r2, [pc, #256]	; (8001e60 <HW_TS_Init+0x194>)
 8001d5e:	7812      	ldrb	r2, [r2, #0]
 8001d60:	fb02 f303 	mul.w	r3, r2, r3
 8001d64:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001d68:	4a3c      	ldr	r2, [pc, #240]	; (8001e5c <HW_TS_Init+0x190>)
 8001d6a:	7812      	ldrb	r2, [r2, #0]
 8001d6c:	40d3      	lsrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d904      	bls.n	8001d84 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001d7a:	4b3b      	ldr	r3, [pc, #236]	; (8001e68 <HW_TS_Init+0x19c>)
 8001d7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d80:	801a      	strh	r2, [r3, #0]
 8001d82:	e003      	b.n	8001d8c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	4b37      	ldr	r3, [pc, #220]	; (8001e68 <HW_TS_Init+0x19c>)
 8001d8a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001d8c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001d90:	f7ff fb9c 	bl	80014cc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001d94:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001d98:	f7ff fb84 	bl	80014a4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d13d      	bne.n	8001e1e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001da2:	4b32      	ldr	r3, [pc, #200]	; (8001e6c <HW_TS_Init+0x1a0>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001da8:	4b31      	ldr	r3, [pc, #196]	; (8001e70 <HW_TS_Init+0x1a4>)
 8001daa:	f04f 32ff 	mov.w	r2, #4294967295
 8001dae:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001db0:	2300      	movs	r3, #0
 8001db2:	77fb      	strb	r3, [r7, #31]
 8001db4:	e00c      	b.n	8001dd0 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001db6:	7ffa      	ldrb	r2, [r7, #31]
 8001db8:	492e      	ldr	r1, [pc, #184]	; (8001e74 <HW_TS_Init+0x1a8>)
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	440b      	add	r3, r1
 8001dc4:	330c      	adds	r3, #12
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001dca:	7ffb      	ldrb	r3, [r7, #31]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	77fb      	strb	r3, [r7, #31]
 8001dd0:	7ffb      	ldrb	r3, [r7, #31]
 8001dd2:	2b05      	cmp	r3, #5
 8001dd4:	d9ef      	bls.n	8001db6 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001dd6:	4b28      	ldr	r3, [pc, #160]	; (8001e78 <HW_TS_Init+0x1ac>)
 8001dd8:	2206      	movs	r2, #6
 8001dda:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <HW_TS_Init+0x188>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <HW_TS_Init+0x188>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dea:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001dec:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HW_TS_Init+0x188>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <HW_TS_Init+0x188>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001dfc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001dfe:	4b1f      	ldr	r3, [pc, #124]	; (8001e7c <HW_TS_Init+0x1b0>)
 8001e00:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001e04:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001e06:	2003      	movs	r0, #3
 8001e08:	f001 fb81 	bl	800350e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <HW_TS_Init+0x188>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <HW_TS_Init+0x188>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	e009      	b.n	8001e32 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <HW_TS_Init+0x188>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001e2c:	2003      	movs	r0, #3
 8001e2e:	f001 fb60 	bl	80034f2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <HW_TS_Init+0x188>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	22ff      	movs	r2, #255	; 0xff
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2103      	movs	r1, #3
 8001e3e:	2003      	movs	r0, #3
 8001e40:	f001 fb15 	bl	800346e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001e44:	2003      	movs	r0, #3
 8001e46:	f001 fb2c 	bl	80034a2 <HAL_NVIC_EnableIRQ>

  return;
 8001e4a:	bf00      	nop
}
 8001e4c:	3720      	adds	r7, #32
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000504 	.word	0x20000504
 8001e58:	40002800 	.word	0x40002800
 8001e5c:	20000201 	.word	0x20000201
 8001e60:	20000202 	.word	0x20000202
 8001e64:	20000204 	.word	0x20000204
 8001e68:	20000206 	.word	0x20000206
 8001e6c:	20000200 	.word	0x20000200
 8001e70:	200001fc 	.word	0x200001fc
 8001e74:	20000168 	.word	0x20000168
 8001e78:	200001f8 	.word	0x200001f8
 8001e7c:	58000800 	.word	0x58000800

08001e80 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8001e8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001e90:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001e92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e94:	b672      	cpsid	i
}
 8001e96:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001e98:	2003      	movs	r0, #3
 8001e9a:	f001 fb10 	bl	80034be <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001e9e:	4b34      	ldr	r3, [pc, #208]	; (8001f70 <HW_TS_Stop+0xf0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	22ca      	movs	r2, #202	; 0xca
 8001ea4:	625a      	str	r2, [r3, #36]	; 0x24
 8001ea6:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <HW_TS_Stop+0xf0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2253      	movs	r2, #83	; 0x53
 8001eac:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001eae:	79fa      	ldrb	r2, [r7, #7]
 8001eb0:	4930      	ldr	r1, [pc, #192]	; (8001f74 <HW_TS_Stop+0xf4>)
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	440b      	add	r3, r1
 8001ebc:	330c      	adds	r3, #12
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d142      	bne.n	8001f4c <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fc80 	bl	80017d0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001ed0:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <HW_TS_Stop+0xf8>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001ed6:	7cfb      	ldrb	r3, [r7, #19]
 8001ed8:	2b06      	cmp	r3, #6
 8001eda:	d12f      	bne.n	8001f3c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001edc:	4b27      	ldr	r3, [pc, #156]	; (8001f7c <HW_TS_Stop+0xfc>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee8:	d107      	bne.n	8001efa <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001eea:	bf00      	nop
 8001eec:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <HW_TS_Stop+0xf0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f8      	bne.n	8001eec <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001efa:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <HW_TS_Stop+0xf0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <HW_TS_Stop+0xf0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f08:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001f0a:	bf00      	nop
 8001f0c:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <HW_TS_Stop+0xf0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f8      	beq.n	8001f0c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <HW_TS_Stop+0xf0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <HW_TS_Stop+0xf0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001f2a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001f2c:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <HW_TS_Stop+0x100>)
 8001f2e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f32:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001f34:	2003      	movs	r0, #3
 8001f36:	f001 faea 	bl	800350e <HAL_NVIC_ClearPendingIRQ>
 8001f3a:	e007      	b.n	8001f4c <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <HW_TS_Stop+0x104>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	7cfa      	ldrb	r2, [r7, #19]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d001      	beq.n	8001f4c <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001f48:	f7ff fd5e 	bl	8001a08 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <HW_TS_Stop+0xf0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	22ff      	movs	r2, #255	; 0xff
 8001f52:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001f54:	2003      	movs	r0, #3
 8001f56:	f001 faa4 	bl	80034a2 <HAL_NVIC_EnableIRQ>
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	f383 8810 	msr	PRIMASK, r3
}
 8001f64:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001f66:	bf00      	nop
}
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000504 	.word	0x20000504
 8001f74:	20000168 	.word	0x20000168
 8001f78:	200001f8 	.word	0x200001f8
 8001f7c:	40002800 	.word	0x40002800
 8001f80:	58000800 	.word	0x58000800
 8001f84:	200001f9 	.word	0x200001f9

08001f88 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	6039      	str	r1, [r7, #0]
 8001f92:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001f94:	79fa      	ldrb	r2, [r7, #7]
 8001f96:	493b      	ldr	r1, [pc, #236]	; (8002084 <HW_TS_Start+0xfc>)
 8001f98:	4613      	mov	r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	4413      	add	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	440b      	add	r3, r1
 8001fa2:	330c      	adds	r3, #12
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d103      	bne.n	8001fb4 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ff66 	bl	8001e80 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8001fb8:	60fb      	str	r3, [r7, #12]
  return(result);
 8001fba:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001fbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fbe:	b672      	cpsid	i
}
 8001fc0:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001fc2:	2003      	movs	r0, #3
 8001fc4:	f001 fa7b 	bl	80034be <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001fc8:	4b2f      	ldr	r3, [pc, #188]	; (8002088 <HW_TS_Start+0x100>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	22ca      	movs	r2, #202	; 0xca
 8001fce:	625a      	str	r2, [r3, #36]	; 0x24
 8001fd0:	4b2d      	ldr	r3, [pc, #180]	; (8002088 <HW_TS_Start+0x100>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2253      	movs	r2, #83	; 0x53
 8001fd6:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001fd8:	79fa      	ldrb	r2, [r7, #7]
 8001fda:	492a      	ldr	r1, [pc, #168]	; (8002084 <HW_TS_Start+0xfc>)
 8001fdc:	4613      	mov	r3, r2
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	440b      	add	r3, r1
 8001fe6:	330c      	adds	r3, #12
 8001fe8:	2202      	movs	r2, #2
 8001fea:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001fec:	79fa      	ldrb	r2, [r7, #7]
 8001fee:	4925      	ldr	r1, [pc, #148]	; (8002084 <HW_TS_Start+0xfc>)
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	440b      	add	r3, r1
 8001ffa:	3308      	adds	r3, #8
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002000:	79fa      	ldrb	r2, [r7, #7]
 8002002:	4920      	ldr	r1, [pc, #128]	; (8002084 <HW_TS_Start+0xfc>)
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	440b      	add	r3, r1
 800200e:	3304      	adds	r3, #4
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fb30 	bl	800167c <linkTimer>
 800201c:	4603      	mov	r3, r0
 800201e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002020:	4b1a      	ldr	r3, [pc, #104]	; (800208c <HW_TS_Start+0x104>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002026:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <HW_TS_Start+0x108>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	b2db      	uxtb	r3, r3
 800202c:	7c7a      	ldrb	r2, [r7, #17]
 800202e:	429a      	cmp	r2, r3
 8002030:	d002      	beq.n	8002038 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002032:	f7ff fce9 	bl	8001a08 <RescheduleTimerList>
 8002036:	e013      	b.n	8002060 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002038:	79fa      	ldrb	r2, [r7, #7]
 800203a:	4912      	ldr	r1, [pc, #72]	; (8002084 <HW_TS_Start+0xfc>)
 800203c:	4613      	mov	r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4413      	add	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	440b      	add	r3, r1
 8002046:	3308      	adds	r3, #8
 8002048:	6819      	ldr	r1, [r3, #0]
 800204a:	8a7b      	ldrh	r3, [r7, #18]
 800204c:	79fa      	ldrb	r2, [r7, #7]
 800204e:	1ac9      	subs	r1, r1, r3
 8002050:	480c      	ldr	r0, [pc, #48]	; (8002084 <HW_TS_Start+0xfc>)
 8002052:	4613      	mov	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4413      	add	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4403      	add	r3, r0
 800205c:	3308      	adds	r3, #8
 800205e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002060:	4b09      	ldr	r3, [pc, #36]	; (8002088 <HW_TS_Start+0x100>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	22ff      	movs	r2, #255	; 0xff
 8002066:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002068:	2003      	movs	r0, #3
 800206a:	f001 fa1a 	bl	80034a2 <HAL_NVIC_EnableIRQ>
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	f383 8810 	msr	PRIMASK, r3
}
 8002078:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800207a:	bf00      	nop
}
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000168 	.word	0x20000168
 8002088:	20000504 	.word	0x20000504
 800208c:	200001f8 	.word	0x200001f8
 8002090:	200001f9 	.word	0x200001f9

08002094 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	460b      	mov	r3, r1
 800209e:	607a      	str	r2, [r7, #4]
 80020a0:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4798      	blx	r3

  return;
 80020a6:	bf00      	nop
}
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	4603      	mov	r3, r0
 80020bc:	73fb      	strb	r3, [r7, #15]
 80020be:	4613      	mov	r3, r2
 80020c0:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80020c6:	2300      	movs	r3, #0
 80020c8:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10e      	bne.n	80020ee <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80020d0:	4a17      	ldr	r2, [pc, #92]	; (8002130 <HW_UART_Transmit_DMA+0x80>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80020d6:	4b17      	ldr	r3, [pc, #92]	; (8002134 <HW_UART_Transmit_DMA+0x84>)
 80020d8:	4a17      	ldr	r2, [pc, #92]	; (8002138 <HW_UART_Transmit_DMA+0x88>)
 80020da:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80020dc:	89bb      	ldrh	r3, [r7, #12]
 80020de:	461a      	mov	r2, r3
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	4814      	ldr	r0, [pc, #80]	; (8002134 <HW_UART_Transmit_DMA+0x84>)
 80020e4:	f004 f938 	bl	8006358 <HAL_UART_Transmit_DMA>
 80020e8:	4603      	mov	r3, r0
 80020ea:	75fb      	strb	r3, [r7, #23]
            break;
 80020ec:	e000      	b.n	80020f0 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80020ee:	bf00      	nop
    }

    switch (hal_status)
 80020f0:	7dfb      	ldrb	r3, [r7, #23]
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	d816      	bhi.n	8002124 <HW_UART_Transmit_DMA+0x74>
 80020f6:	a201      	add	r2, pc, #4	; (adr r2, 80020fc <HW_UART_Transmit_DMA+0x4c>)
 80020f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fc:	0800210d 	.word	0x0800210d
 8002100:	08002113 	.word	0x08002113
 8002104:	08002119 	.word	0x08002119
 8002108:	0800211f 	.word	0x0800211f
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 800210c:	2300      	movs	r3, #0
 800210e:	75bb      	strb	r3, [r7, #22]
            break;
 8002110:	e009      	b.n	8002126 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8002112:	2301      	movs	r3, #1
 8002114:	75bb      	strb	r3, [r7, #22]
            break;
 8002116:	e006      	b.n	8002126 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002118:	2302      	movs	r3, #2
 800211a:	75bb      	strb	r3, [r7, #22]
            break;
 800211c:	e003      	b.n	8002126 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800211e:	2303      	movs	r3, #3
 8002120:	75bb      	strb	r3, [r7, #22]
            break;
 8002122:	e000      	b.n	8002126 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002124:	bf00      	nop
    }

    return hw_status;
 8002126:	7dbb      	ldrb	r3, [r7, #22]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	2000020c 	.word	0x2000020c
 8002134:	20000318 	.word	0x20000318
 8002138:	40013800 	.word	0x40013800

0800213c <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <HAL_UART_RxCpltCallback+0x34>)
 800214c:	429a      	cmp	r2, r3
 800214e:	d107      	bne.n	8002160 <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8002150:	4b08      	ldr	r3, [pc, #32]	; (8002174 <HAL_UART_RxCpltCallback+0x38>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <HAL_UART_RxCpltCallback+0x38>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4798      	blx	r3
            }
            break;
 800215e:	e001      	b.n	8002164 <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002160:	bf00      	nop
 8002162:	e000      	b.n	8002166 <HAL_UART_RxCpltCallback+0x2a>
            break;
 8002164:	bf00      	nop
    }

    return;
 8002166:	bf00      	nop
}
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40013800 	.word	0x40013800
 8002174:	20000208 	.word	0x20000208

08002178 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <HAL_UART_TxCpltCallback+0x34>)
 8002188:	429a      	cmp	r2, r3
 800218a:	d107      	bne.n	800219c <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <HAL_UART_TxCpltCallback+0x38>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_UART_TxCpltCallback+0x38>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4798      	blx	r3
            }
            break;
 800219a:	e001      	b.n	80021a0 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 800219c:	bf00      	nop
 800219e:	e000      	b.n	80021a2 <HAL_UART_TxCpltCallback+0x2a>
            break;
 80021a0:	bf00      	nop
    }

    return;
 80021a2:	bf00      	nop
}
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40013800 	.word	0x40013800
 80021b0:	2000020c 	.word	0x2000020c

080021b4 <LL_RCC_LSE_SetDriveCapability>:
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80021bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c4:	f023 0218 	bic.w	r2, r3, #24
 80021c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <LL_AHB1_GRP1_EnableClock>:
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80021e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80021f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4013      	ands	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002204:	68fb      	ldr	r3, [r7, #12]
}
 8002206:	bf00      	nop
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <LL_AHB2_GRP1_EnableClock>:
{
 8002212:	b480      	push	{r7}
 8002214:	b085      	sub	sp, #20
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800221a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002220:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4313      	orrs	r3, r2
 8002228:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800222a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800222e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4013      	ands	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002236:	68fb      	ldr	r3, [r7, #12]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002248:	f000 ff44 	bl	80030d4 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 800224c:	f7fe fe34 	bl	8000eb8 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002250:	f000 f816 	bl	8002280 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002254:	f000 f870 	bl	8002338 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002258:	f000 f88e 	bl	8002378 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800225c:	f000 f99a 	bl	8002594 <MX_GPIO_Init>
  MX_DMA_Init();
 8002260:	f000 f976 	bl	8002550 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002264:	f000 f8ea 	bl	800243c <MX_USART1_UART_Init>
  MX_RTC_Init();
 8002268:	f000 f93e 	bl	80024e8 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 800226c:	f000 f898 	bl	80023a0 <MX_LPUART1_UART_Init>
  MX_RF_Init();
 8002270:	f000 f932 	bl	80024d8 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002274:	f7fe fe2e 	bl	8000ed4 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002278:	f7ff f8d6 	bl	8001428 <MX_APPE_Process>
 800227c:	e7fc      	b.n	8002278 <main+0x34>
	...

08002280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b09a      	sub	sp, #104	; 0x68
 8002284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002286:	f107 0320 	add.w	r3, r7, #32
 800228a:	2248      	movs	r2, #72	; 0x48
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f00b ffc4 	bl	800e21c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002294:	1d3b      	adds	r3, r7, #4
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]
 800229c:	609a      	str	r2, [r3, #8]
 800229e:	60da      	str	r2, [r3, #12]
 80022a0:	611a      	str	r2, [r3, #16]
 80022a2:	615a      	str	r2, [r3, #20]
 80022a4:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80022a6:	f002 f84f 	bl	8004348 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80022aa:	2000      	movs	r0, #0
 80022ac:	f7ff ff82 	bl	80021b4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022b0:	4b20      	ldr	r3, [pc, #128]	; (8002334 <SystemClock_Config+0xb4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022b8:	4a1e      	ldr	r2, [pc, #120]	; (8002334 <SystemClock_Config+0xb4>)
 80022ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <SystemClock_Config+0xb4>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022c8:	603b      	str	r3, [r7, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80022cc:	2307      	movs	r3, #7
 80022ce:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80022d6:	2301      	movs	r3, #1
 80022d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022e0:	2340      	movs	r3, #64	; 0x40
 80022e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80022e4:	2300      	movs	r3, #0
 80022e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022e8:	f107 0320 	add.w	r3, r7, #32
 80022ec:	4618      	mov	r0, r3
 80022ee:	f002 fbbf 	bl	8004a70 <HAL_RCC_OscConfig>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80022f8:	f000 f988 	bl	800260c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80022fc:	236f      	movs	r3, #111	; 0x6f
 80022fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002300:	2302      	movs	r3, #2
 8002302:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002304:	2300      	movs	r3, #0
 8002306:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002308:	2300      	movs	r3, #0
 800230a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002310:	2300      	movs	r3, #0
 8002312:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002318:	1d3b      	adds	r3, r7, #4
 800231a:	2101      	movs	r1, #1
 800231c:	4618      	mov	r0, r3
 800231e:	f002 ff1b 	bl	8005158 <HAL_RCC_ClockConfig>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002328:	f000 f970 	bl	800260c <Error_Handler>
  }
}
 800232c:	bf00      	nop
 800232e:	3768      	adds	r7, #104	; 0x68
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	58000400 	.word	0x58000400

08002338 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b094      	sub	sp, #80	; 0x50
 800233c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800233e:	463b      	mov	r3, r7
 8002340:	2250      	movs	r2, #80	; 0x50
 8002342:	2100      	movs	r1, #0
 8002344:	4618      	mov	r0, r3
 8002346:	f00b ff69 	bl	800e21c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800234a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800234e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002350:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002354:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002356:	2300      	movs	r3, #0
 8002358:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800235a:	2310      	movs	r3, #16
 800235c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800235e:	463b      	mov	r3, r7
 8002360:	4618      	mov	r0, r3
 8002362:	f003 fb36 	bl	80059d2 <HAL_RCCEx_PeriphCLKConfig>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800236c:	f000 f94e 	bl	800260c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002370:	bf00      	nop
 8002372:	3750      	adds	r7, #80	; 0x50
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <MX_IPCC_Init+0x20>)
 800237e:	4a07      	ldr	r2, [pc, #28]	; (800239c <MX_IPCC_Init+0x24>)
 8002380:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002382:	4805      	ldr	r0, [pc, #20]	; (8002398 <MX_IPCC_Init+0x20>)
 8002384:	f001 ff5a 	bl	800423c <HAL_IPCC_Init>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800238e:	f000 f93d 	bl	800260c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	20000210 	.word	0x20000210
 800239c:	58000c00 	.word	0x58000c00

080023a0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80023a4:	4b22      	ldr	r3, [pc, #136]	; (8002430 <MX_LPUART1_UART_Init+0x90>)
 80023a6:	4a23      	ldr	r2, [pc, #140]	; (8002434 <MX_LPUART1_UART_Init+0x94>)
 80023a8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80023aa:	4b21      	ldr	r3, [pc, #132]	; (8002430 <MX_LPUART1_UART_Init+0x90>)
 80023ac:	4a22      	ldr	r2, [pc, #136]	; (8002438 <MX_LPUART1_UART_Init+0x98>)
 80023ae:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023b0:	4b1f      	ldr	r3, [pc, #124]	; (8002430 <MX_LPUART1_UART_Init+0x90>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80023b6:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <MX_LPUART1_UART_Init+0x90>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80023bc:	4b1c      	ldr	r3, [pc, #112]	; (8002430 <MX_LPUART1_UART_Init+0x90>)
 80023be:	2200      	movs	r2, #0
 80023c0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80023c2:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <MX_LPUART1_UART_Init+0x90>)
 80023c4:	220c      	movs	r2, #12
 80023c6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023c8:	4b19      	ldr	r3, [pc, #100]	; (8002430 <MX_LPUART1_UART_Init+0x90>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023ce:	4b18      	ldr	r3, [pc, #96]	; (8002430 <MX_LPUART1_UART_Init+0x90>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023d4:	4b16      	ldr	r3, [pc, #88]	; (8002430 <MX_LPUART1_UART_Init+0x90>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <MX_LPUART1_UART_Init+0x90>)
 80023dc:	2200      	movs	r2, #0
 80023de:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80023e0:	4b13      	ldr	r3, [pc, #76]	; (8002430 <MX_LPUART1_UART_Init+0x90>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80023e6:	4812      	ldr	r0, [pc, #72]	; (8002430 <MX_LPUART1_UART_Init+0x90>)
 80023e8:	f003 ff56 	bl	8006298 <HAL_UART_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80023f2:	f000 f90b 	bl	800260c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023f6:	2100      	movs	r1, #0
 80023f8:	480d      	ldr	r0, [pc, #52]	; (8002430 <MX_LPUART1_UART_Init+0x90>)
 80023fa:	f005 f9c0 	bl	800777e <HAL_UARTEx_SetTxFifoThreshold>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8002404:	f000 f902 	bl	800260c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002408:	2100      	movs	r1, #0
 800240a:	4809      	ldr	r0, [pc, #36]	; (8002430 <MX_LPUART1_UART_Init+0x90>)
 800240c:	f005 f9f5 	bl	80077fa <HAL_UARTEx_SetRxFifoThreshold>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8002416:	f000 f8f9 	bl	800260c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800241a:	4805      	ldr	r0, [pc, #20]	; (8002430 <MX_LPUART1_UART_Init+0x90>)
 800241c:	f005 f976 	bl	800770c <HAL_UARTEx_DisableFifoMode>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8002426:	f000 f8f1 	bl	800260c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	2000024c 	.word	0x2000024c
 8002434:	40008000 	.word	0x40008000
 8002438:	00033324 	.word	0x00033324

0800243c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002440:	4b23      	ldr	r3, [pc, #140]	; (80024d0 <MX_USART1_UART_Init+0x94>)
 8002442:	4a24      	ldr	r2, [pc, #144]	; (80024d4 <MX_USART1_UART_Init+0x98>)
 8002444:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002446:	4b22      	ldr	r3, [pc, #136]	; (80024d0 <MX_USART1_UART_Init+0x94>)
 8002448:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800244c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800244e:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <MX_USART1_UART_Init+0x94>)
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002454:	4b1e      	ldr	r3, [pc, #120]	; (80024d0 <MX_USART1_UART_Init+0x94>)
 8002456:	2200      	movs	r2, #0
 8002458:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800245a:	4b1d      	ldr	r3, [pc, #116]	; (80024d0 <MX_USART1_UART_Init+0x94>)
 800245c:	2200      	movs	r2, #0
 800245e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002460:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <MX_USART1_UART_Init+0x94>)
 8002462:	220c      	movs	r2, #12
 8002464:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002466:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <MX_USART1_UART_Init+0x94>)
 8002468:	2200      	movs	r2, #0
 800246a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 800246c:	4b18      	ldr	r3, [pc, #96]	; (80024d0 <MX_USART1_UART_Init+0x94>)
 800246e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002472:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002474:	4b16      	ldr	r3, [pc, #88]	; (80024d0 <MX_USART1_UART_Init+0x94>)
 8002476:	2200      	movs	r2, #0
 8002478:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800247a:	4b15      	ldr	r3, [pc, #84]	; (80024d0 <MX_USART1_UART_Init+0x94>)
 800247c:	2200      	movs	r2, #0
 800247e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002480:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <MX_USART1_UART_Init+0x94>)
 8002482:	2200      	movs	r2, #0
 8002484:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002486:	4812      	ldr	r0, [pc, #72]	; (80024d0 <MX_USART1_UART_Init+0x94>)
 8002488:	f003 ff06 	bl	8006298 <HAL_UART_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002492:	f000 f8bb 	bl	800260c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002496:	2100      	movs	r1, #0
 8002498:	480d      	ldr	r0, [pc, #52]	; (80024d0 <MX_USART1_UART_Init+0x94>)
 800249a:	f005 f970 	bl	800777e <HAL_UARTEx_SetTxFifoThreshold>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80024a4:	f000 f8b2 	bl	800260c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024a8:	2100      	movs	r1, #0
 80024aa:	4809      	ldr	r0, [pc, #36]	; (80024d0 <MX_USART1_UART_Init+0x94>)
 80024ac:	f005 f9a5 	bl	80077fa <HAL_UARTEx_SetRxFifoThreshold>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80024b6:	f000 f8a9 	bl	800260c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80024ba:	4805      	ldr	r0, [pc, #20]	; (80024d0 <MX_USART1_UART_Init+0x94>)
 80024bc:	f005 f926 	bl	800770c <HAL_UARTEx_DisableFifoMode>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80024c6:	f000 f8a1 	bl	800260c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000318 	.word	0x20000318
 80024d4:	40013800 	.word	0x40013800

080024d8 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80024ec:	4b16      	ldr	r3, [pc, #88]	; (8002548 <MX_RTC_Init+0x60>)
 80024ee:	4a17      	ldr	r2, [pc, #92]	; (800254c <MX_RTC_Init+0x64>)
 80024f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <MX_RTC_Init+0x60>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80024f8:	4b13      	ldr	r3, [pc, #76]	; (8002548 <MX_RTC_Init+0x60>)
 80024fa:	220f      	movs	r2, #15
 80024fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80024fe:	4b12      	ldr	r3, [pc, #72]	; (8002548 <MX_RTC_Init+0x60>)
 8002500:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002504:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002506:	4b10      	ldr	r3, [pc, #64]	; (8002548 <MX_RTC_Init+0x60>)
 8002508:	2200      	movs	r2, #0
 800250a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800250c:	4b0e      	ldr	r3, [pc, #56]	; (8002548 <MX_RTC_Init+0x60>)
 800250e:	2200      	movs	r2, #0
 8002510:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002512:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <MX_RTC_Init+0x60>)
 8002514:	2200      	movs	r2, #0
 8002516:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <MX_RTC_Init+0x60>)
 800251a:	2200      	movs	r2, #0
 800251c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800251e:	480a      	ldr	r0, [pc, #40]	; (8002548 <MX_RTC_Init+0x60>)
 8002520:	f003 fcde 	bl	8005ee0 <HAL_RTC_Init>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800252a:	f000 f86f 	bl	800260c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800252e:	2200      	movs	r2, #0
 8002530:	2100      	movs	r1, #0
 8002532:	4805      	ldr	r0, [pc, #20]	; (8002548 <MX_RTC_Init+0x60>)
 8002534:	f003 fdd4 	bl	80060e0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800253e:	f000 f865 	bl	800260c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	20000504 	.word	0x20000504
 800254c:	40002800 	.word	0x40002800

08002550 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002554:	2004      	movs	r0, #4
 8002556:	f7ff fe43 	bl	80021e0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800255a:	2001      	movs	r0, #1
 800255c:	f7ff fe40 	bl	80021e0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002560:	2200      	movs	r2, #0
 8002562:	2100      	movs	r1, #0
 8002564:	200b      	movs	r0, #11
 8002566:	f000 ff82 	bl	800346e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800256a:	200b      	movs	r0, #11
 800256c:	f000 ff99 	bl	80034a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002570:	2200      	movs	r2, #0
 8002572:	2100      	movs	r1, #0
 8002574:	200c      	movs	r0, #12
 8002576:	f000 ff7a 	bl	800346e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800257a:	200c      	movs	r0, #12
 800257c:	f000 ff91 	bl	80034a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002580:	2200      	movs	r2, #0
 8002582:	2100      	movs	r1, #0
 8002584:	200d      	movs	r0, #13
 8002586:	f000 ff72 	bl	800346e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800258a:	200d      	movs	r0, #13
 800258c:	f000 ff89 	bl	80034a2 <HAL_NVIC_EnableIRQ>

}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}

08002594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259a:	1d3b      	adds	r3, r7, #4
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	60da      	str	r2, [r3, #12]
 80025a6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025a8:	2004      	movs	r0, #4
 80025aa:	f7ff fe32 	bl	8002212 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ae:	2001      	movs	r0, #1
 80025b0:	f7ff fe2f 	bl	8002212 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b4:	2002      	movs	r0, #2
 80025b6:	f7ff fe2c 	bl	8002212 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ba:	2008      	movs	r0, #8
 80025bc:	f7ff fe29 	bl	8002212 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80025c0:	2200      	movs	r2, #0
 80025c2:	2123      	movs	r1, #35	; 0x23
 80025c4:	480f      	ldr	r0, [pc, #60]	; (8002604 <MX_GPIO_Init+0x70>)
 80025c6:	f001 fd83 	bl	80040d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 80025ca:	2323      	movs	r3, #35	; 0x23
 80025cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ce:	2301      	movs	r3, #1
 80025d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d6:	2300      	movs	r3, #0
 80025d8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	4619      	mov	r1, r3
 80025de:	4809      	ldr	r0, [pc, #36]	; (8002604 <MX_GPIO_Init+0x70>)
 80025e0:	f001 fc06 	bl	8003df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025e4:	2303      	movs	r3, #3
 80025e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ec:	2301      	movs	r3, #1
 80025ee:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025f0:	1d3b      	adds	r3, r7, #4
 80025f2:	4619      	mov	r1, r3
 80025f4:	4804      	ldr	r0, [pc, #16]	; (8002608 <MX_GPIO_Init+0x74>)
 80025f6:	f001 fbfb 	bl	8003df0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80025fa:	bf00      	nop
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	48000400 	.word	0x48000400
 8002608:	48000c00 	.word	0x48000c00

0800260c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002610:	b672      	cpsid	i
}
 8002612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002614:	e7fe      	b.n	8002614 <Error_Handler+0x8>

08002616 <LL_AHB3_GRP1_EnableClock>:
{
 8002616:	b480      	push	{r7}
 8002618:	b085      	sub	sp, #20
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800261e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002622:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002624:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4313      	orrs	r3, r2
 800262c:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800262e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002632:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4013      	ands	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800263a:	68fb      	ldr	r3, [r7, #12]
}
 800263c:	bf00      	nop
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <EEPROM_Emul_Init>:
//TODO - improve definition
#define HSEM_PROCESS_1 12U /* Number taken randomly to identify the process locking a semaphore in the driver context */
__IO uint32_t FlashSemaphoreTaken = 0;

void EEPROM_Emul_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
  EE_Status ee_status = EE_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	80fb      	strh	r3, [r7, #6]

  /* Enable and set FLASH Interrupt priority */
  /* FLASH interrupt is used for the purpose of pages clean up under interrupt */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8002652:	2200      	movs	r2, #0
 8002654:	2100      	movs	r1, #0
 8002656:	2004      	movs	r0, #4
 8002658:	f000 ff09 	bl	800346e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800265c:	2004      	movs	r0, #4
 800265e:	f000 ff20 	bl	80034a2 <HAL_NVIC_EnableIRQ>

  /* Clear OPTVERR bit */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002662:	4b2e      	ldr	r3, [pc, #184]	; (800271c <EEPROM_Emul_Init+0xd4>)
 8002664:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002668:	611a      	str	r2, [r3, #16]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) != RESET) ;
 800266a:	bf00      	nop
 800266c:	4b2b      	ldr	r3, [pc, #172]	; (800271c <EEPROM_Emul_Init+0xd4>)
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002678:	d0f8      	beq.n	800266c <EEPROM_Emul_Init+0x24>
     used by CPU2 (semaphore 7 locked). When this is the case, the driver
     also activates the interrupt associated to the release of the semaphore
     (flash not used by CPU2 anymore).
     Then, to benefit from this possibility HSEM_IRQn interrupts are configured.
     HAL_HSEM_FreeCallback is called when the semaphore is released. */
  __HAL_RCC_HSEM_CLK_ENABLE();
 800267a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800267e:	f7ff ffca 	bl	8002616 <LL_AHB3_GRP1_EnableClock>
  HAL_NVIC_SetPriority(HSEM_IRQn, 15, 0);
 8002682:	2200      	movs	r2, #0
 8002684:	210f      	movs	r1, #15
 8002686:	202e      	movs	r0, #46	; 0x2e
 8002688:	f000 fef1 	bl	800346e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800268c:	202e      	movs	r0, #46	; 0x2e
 800268e:	f000 ff08 	bl	80034a2 <HAL_NVIC_EnableIRQ>

  /*  Wait for the flash semaphore to be free and take it */
  while(HAL_HSEM_Take(CFG_HW_FLASH_SEMID, HSEM_PROCESS_1) != HAL_OK)
 8002692:	e006      	b.n	80026a2 <EEPROM_Emul_Init+0x5a>
  {
    while( HAL_HSEM_IsSemTaken(CFG_HW_FLASH_SEMID) ) ;
 8002694:	bf00      	nop
 8002696:	2002      	movs	r0, #2
 8002698:	f001 fd70 	bl	800417c <HAL_HSEM_IsSemTaken>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f9      	bne.n	8002696 <EEPROM_Emul_Init+0x4e>
  while(HAL_HSEM_Take(CFG_HW_FLASH_SEMID, HSEM_PROCESS_1) != HAL_OK)
 80026a2:	210c      	movs	r1, #12
 80026a4:	2002      	movs	r0, #2
 80026a6:	f001 fd45 	bl	8004134 <HAL_HSEM_Take>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f1      	bne.n	8002694 <EEPROM_Emul_Init+0x4c>
  }

  /* Unlock the Flash Program Erase controller for intialization */
  HAL_FLASH_Unlock();
 80026b0:	f001 fab2 	bl	8003c18 <HAL_FLASH_Unlock>

  /* Set EEPROM emulation firmware to erase all potentially incompletely erased
   pages if the system came from an asynchronous reset. Conditional erase is
   safe to use if all Flash operations where completed before the system reset */
  if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) == RESET)
 80026b4:	4b1a      	ldr	r3, [pc, #104]	; (8002720 <EEPROM_Emul_Init+0xd8>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10a      	bne.n	80026d8 <EEPROM_Emul_Init+0x90>
  {

    /* System reset comes from a power-on reset: Forced Erase */
    /* Initialize EEPROM emulation driver (mandatory) */
    ee_status = EE_Init(EE_FORCED_ERASE);
 80026c2:	2000      	movs	r0, #0
 80026c4:	f005 f99c 	bl	8007a00 <EE_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	80fb      	strh	r3, [r7, #6]
    if(ee_status != EE_OK) {Error_Handler();}
 80026cc:	88fb      	ldrh	r3, [r7, #6]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d019      	beq.n	8002706 <EEPROM_Emul_Init+0xbe>
 80026d2:	f7ff ff9b 	bl	800260c <Error_Handler>
 80026d6:	e016      	b.n	8002706 <EEPROM_Emul_Init+0xbe>
  }
  else
  {
    /* Clear the Standby flag */
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 80026d8:	4b11      	ldr	r3, [pc, #68]	; (8002720 <EEPROM_Emul_Init+0xd8>)
 80026da:	2201      	movs	r2, #1
 80026dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Check and Clear the Wakeup flag */
    if (__HAL_PWR_GET_FLAG(PWR_FLAG_WUF) != RESET)
 80026e0:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <EEPROM_Emul_Init+0xd8>)
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <EEPROM_Emul_Init+0xaa>
    {
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF);
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <EEPROM_Emul_Init+0xd8>)
 80026ee:	2204      	movs	r2, #4
 80026f0:	619a      	str	r2, [r3, #24]
    }


    /* System reset comes from a STANDBY wakeup: Conditional Erase*/
    /* Initialize EEPROM emulation driver (mandatory) */
    ee_status = EE_Init(EE_CONDITIONAL_ERASE);
 80026f2:	2001      	movs	r0, #1
 80026f4:	f005 f984 	bl	8007a00 <EE_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	80fb      	strh	r3, [r7, #6]
    if(ee_status != EE_OK) {Error_Handler();}
 80026fc:	88fb      	ldrh	r3, [r7, #6]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <EEPROM_Emul_Init+0xbe>
 8002702:	f7ff ff83 	bl	800260c <Error_Handler>
  }

  /* Lock the Flash Program Erase controller and release flash semaphore */
  HAL_FLASH_Lock();
 8002706:	f001 faa9 	bl	8003c5c <HAL_FLASH_Lock>
  HAL_HSEM_Release(CFG_HW_FLASH_SEMID, HSEM_PROCESS_1);
 800270a:	210c      	movs	r1, #12
 800270c:	2002      	movs	r0, #2
 800270e:	f001 fd4b 	bl	80041a8 <HAL_HSEM_Release>
}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	58004000 	.word	0x58004000
 8002720:	58000400 	.word	0x58000400

08002724 <NVM_restore_SRAM_buffer>:

void NVM_restore_SRAM_buffer(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
	uint32_t i=0;
 800272a:	2300      	movs	r3, #0
 800272c:	607b      	str	r3, [r7, #4]
	EE_Status ee_status;
	for (i=0; i<BLE_NVM_LENGTH; i++){
 800272e:	2300      	movs	r3, #0
 8002730:	607b      	str	r3, [r7, #4]
 8002732:	e025      	b.n	8002780 <NVM_restore_SRAM_buffer+0x5c>
		// i+1 - EEPROM starting index is 1
		ee_status=EE_ReadVariable32bits(i+1,(uint32_t*) &(BLE_NVM[i]));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	b29b      	uxth	r3, r3
 8002738:	3301      	adds	r3, #1
 800273a:	b29a      	uxth	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4914      	ldr	r1, [pc, #80]	; (8002794 <NVM_restore_SRAM_buffer+0x70>)
 8002742:	440b      	add	r3, r1
 8002744:	4619      	mov	r1, r3
 8002746:	4610      	mov	r0, r2
 8002748:	f005 ff32 	bl	80085b0 <EE_ReadVariable32bits>
 800274c:	4603      	mov	r3, r0
 800274e:	807b      	strh	r3, [r7, #2]
		while((ee_status != EE_OK) && (ee_status != EE_NO_DATA))
 8002750:	e00d      	b.n	800276e <NVM_restore_SRAM_buffer+0x4a>
		  {
			/*
			 * Repeat reading in case of error
			 * TODO: add timeout mechanism to prevent lock
			 */
			ee_status=EE_ReadVariable32bits(i+1,(uint32_t*) &(BLE_NVM[i]));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	b29b      	uxth	r3, r3
 8002756:	3301      	adds	r3, #1
 8002758:	b29a      	uxth	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	490d      	ldr	r1, [pc, #52]	; (8002794 <NVM_restore_SRAM_buffer+0x70>)
 8002760:	440b      	add	r3, r1
 8002762:	4619      	mov	r1, r3
 8002764:	4610      	mov	r0, r2
 8002766:	f005 ff23 	bl	80085b0 <EE_ReadVariable32bits>
 800276a:	4603      	mov	r3, r0
 800276c:	807b      	strh	r3, [r7, #2]
		while((ee_status != EE_OK) && (ee_status != EE_NO_DATA))
 800276e:	887b      	ldrh	r3, [r7, #2]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <NVM_restore_SRAM_buffer+0x56>
 8002774:	887b      	ldrh	r3, [r7, #2]
 8002776:	2b07      	cmp	r3, #7
 8002778:	d1eb      	bne.n	8002752 <NVM_restore_SRAM_buffer+0x2e>
	for (i=0; i<BLE_NVM_LENGTH; i++){
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3301      	adds	r3, #1
 800277e:	607b      	str	r3, [r7, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8002786:	d9d5      	bls.n	8002734 <NVM_restore_SRAM_buffer+0x10>
		    }
	}

}
 8002788:	bf00      	nop
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20030a58 	.word	0x20030a58

08002798 <NVM_write_flash>:

void NVM_write_flash(uint32_t StartAddress, uint32_t Size, uint32_t SRAM_buffer_start)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b088      	sub	sp, #32
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
	EE_Status ee_status;
	uint32_t i=0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61bb      	str	r3, [r7, #24]
	uint32_t ee_position=(StartAddress-SRAM_buffer_start)/4;
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	089b      	lsrs	r3, r3, #2
 80027b0:	617b      	str	r3, [r7, #20]

	/*  Wait for the flash semaphore to be free and take it */
	while(HAL_HSEM_Take(CFG_HW_FLASH_SEMID, HSEM_PROCESS_1) != HAL_OK)
 80027b2:	e006      	b.n	80027c2 <NVM_write_flash+0x2a>
	{
		while( HAL_HSEM_IsSemTaken(CFG_HW_FLASH_SEMID) ) ;
 80027b4:	bf00      	nop
 80027b6:	2002      	movs	r0, #2
 80027b8:	f001 fce0 	bl	800417c <HAL_HSEM_IsSemTaken>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f9      	bne.n	80027b6 <NVM_write_flash+0x1e>
	while(HAL_HSEM_Take(CFG_HW_FLASH_SEMID, HSEM_PROCESS_1) != HAL_OK)
 80027c2:	210c      	movs	r1, #12
 80027c4:	2002      	movs	r0, #2
 80027c6:	f001 fcb5 	bl	8004134 <HAL_HSEM_Take>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f1      	bne.n	80027b4 <NVM_write_flash+0x1c>
	}
	while(HAL_HSEM_Take(CFG_HW_BLE_NVM_SRAM_SEMID, HSEM_PROCESS_1) != HAL_OK)
 80027d0:	e006      	b.n	80027e0 <NVM_write_flash+0x48>
		{
			while( HAL_HSEM_IsSemTaken(CFG_HW_BLE_NVM_SRAM_SEMID) ) ;
 80027d2:	bf00      	nop
 80027d4:	2008      	movs	r0, #8
 80027d6:	f001 fcd1 	bl	800417c <HAL_HSEM_IsSemTaken>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1f9      	bne.n	80027d4 <NVM_write_flash+0x3c>
	while(HAL_HSEM_Take(CFG_HW_BLE_NVM_SRAM_SEMID, HSEM_PROCESS_1) != HAL_OK)
 80027e0:	210c      	movs	r1, #12
 80027e2:	2008      	movs	r0, #8
 80027e4:	f001 fca6 	bl	8004134 <HAL_HSEM_Take>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f1      	bne.n	80027d2 <NVM_write_flash+0x3a>
		}
	HAL_FLASH_Unlock();
 80027ee:	f001 fa13 	bl	8003c18 <HAL_FLASH_Unlock>

	for(i=0; i<Size; i++){
 80027f2:	2300      	movs	r3, #0
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	e03c      	b.n	8002872 <NVM_write_flash+0xda>
		ee_status = EE_WriteVariable32bits(ee_position+i+1, ((uint32_t*)StartAddress)[i]);
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	4413      	add	r3, r2
 8002802:	b29b      	uxth	r3, r3
 8002804:	3301      	adds	r3, #1
 8002806:	b298      	uxth	r0, r3
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	009a      	lsls	r2, r3, #2
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4413      	add	r3, r2
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4619      	mov	r1, r3
 8002814:	f005 fef1 	bl	80085fa <EE_WriteVariable32bits>
 8002818:	4603      	mov	r3, r0
 800281a:	83fb      	strh	r3, [r7, #30]
	    /* If flash is used by CPU2 we wait for the interrupt associated to the semaphore 7 releasing
	      to be raised before trying to write again */
		while(ee_status != EE_OK)
 800281c:	e023      	b.n	8002866 <NVM_write_flash+0xce>
	    {
			if ((ee_status & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {ee_status|= EE_CleanUp();}
 800281e:	8bfb      	ldrh	r3, [r7, #30]
 8002820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d006      	beq.n	8002836 <NVM_write_flash+0x9e>
 8002828:	f005 ff02 	bl	8008630 <EE_CleanUp>
 800282c:	4603      	mov	r3, r0
 800282e:	461a      	mov	r2, r3
 8002830:	8bfb      	ldrh	r3, [r7, #30]
 8002832:	4313      	orrs	r3, r2
 8002834:	83fb      	strh	r3, [r7, #30]
			if ((ee_status & EE_STATUSMASK_ERROR) == EE_STATUSMASK_ERROR) {Error_Handler();}
 8002836:	8bfb      	ldrh	r3, [r7, #30]
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2bff      	cmp	r3, #255	; 0xff
 800283c:	d101      	bne.n	8002842 <NVM_write_flash+0xaa>
 800283e:	f7ff fee5 	bl	800260c <Error_Handler>
			ee_status = EE_WriteVariable32bits(ee_position+i+1, ((uint32_t*)StartAddress)[i]);
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	b29a      	uxth	r2, r3
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	b29b      	uxth	r3, r3
 800284a:	4413      	add	r3, r2
 800284c:	b29b      	uxth	r3, r3
 800284e:	3301      	adds	r3, #1
 8002850:	b298      	uxth	r0, r3
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	009a      	lsls	r2, r3, #2
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4413      	add	r3, r2
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4619      	mov	r1, r3
 800285e:	f005 fecc 	bl	80085fa <EE_WriteVariable32bits>
 8002862:	4603      	mov	r3, r0
 8002864:	83fb      	strh	r3, [r7, #30]
		while(ee_status != EE_OK)
 8002866:	8bfb      	ldrh	r3, [r7, #30]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1d8      	bne.n	800281e <NVM_write_flash+0x86>
	for(i=0; i<Size; i++){
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	3301      	adds	r3, #1
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	429a      	cmp	r2, r3
 8002878:	d3be      	bcc.n	80027f8 <NVM_write_flash+0x60>
	    }
	}
	HAL_FLASH_Lock();
 800287a:	f001 f9ef 	bl	8003c5c <HAL_FLASH_Lock>
	HAL_HSEM_Release(CFG_HW_BLE_NVM_SRAM_SEMID, HSEM_PROCESS_1);
 800287e:	210c      	movs	r1, #12
 8002880:	2008      	movs	r0, #8
 8002882:	f001 fc91 	bl	80041a8 <HAL_HSEM_Release>
	HAL_HSEM_Release(CFG_HW_FLASH_SEMID, HSEM_PROCESS_1);
 8002886:	210c      	movs	r1, #12
 8002888:	2002      	movs	r0, #2
 800288a:	f001 fc8d 	bl	80041a8 <HAL_HSEM_Release>

}
 800288e:	bf00      	nop
 8002890:	3720      	adds	r7, #32
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <Get_SRAM_buffer_address>:

uint32_t Get_SRAM_buffer_address(void){
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
	return (uint32_t)BLE_NVM;
 800289c:	4b02      	ldr	r3, [pc, #8]	; (80028a8 <Get_SRAM_buffer_address+0x10>)
}
 800289e:	4618      	mov	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	20030a58 	.word	0x20030a58

080028ac <PrintNVM>:

void PrintNVM(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
  APP_DBG_MSG("@ NVM content:\r\n");
 80028b2:	482a      	ldr	r0, [pc, #168]	; (800295c <PrintNVM+0xb0>)
 80028b4:	f008 ff54 	bl	800b760 <DbgTraceGetFileName>
 80028b8:	4601      	mov	r1, r0
 80028ba:	2397      	movs	r3, #151	; 0x97
 80028bc:	4a28      	ldr	r2, [pc, #160]	; (8002960 <PrintNVM+0xb4>)
 80028be:	4829      	ldr	r0, [pc, #164]	; (8002964 <PrintNVM+0xb8>)
 80028c0:	f00b fb5e 	bl	800df80 <iprintf>
 80028c4:	4828      	ldr	r0, [pc, #160]	; (8002968 <PrintNVM+0xbc>)
 80028c6:	f00b fbc9 	bl	800e05c <puts>
  APP_DBG_MSG("  StartAddress = 0x%08lX\r\n", (uint32_t)BLE_NVM);
 80028ca:	4824      	ldr	r0, [pc, #144]	; (800295c <PrintNVM+0xb0>)
 80028cc:	f008 ff48 	bl	800b760 <DbgTraceGetFileName>
 80028d0:	4601      	mov	r1, r0
 80028d2:	2398      	movs	r3, #152	; 0x98
 80028d4:	4a22      	ldr	r2, [pc, #136]	; (8002960 <PrintNVM+0xb4>)
 80028d6:	4823      	ldr	r0, [pc, #140]	; (8002964 <PrintNVM+0xb8>)
 80028d8:	f00b fb52 	bl	800df80 <iprintf>
 80028dc:	4b23      	ldr	r3, [pc, #140]	; (800296c <PrintNVM+0xc0>)
 80028de:	4619      	mov	r1, r3
 80028e0:	4823      	ldr	r0, [pc, #140]	; (8002970 <PrintNVM+0xc4>)
 80028e2:	f00b fb4d 	bl	800df80 <iprintf>
  APP_DBG_MSG("  Size = %ld bytes\r\n", (int32_t)(BLE_NVM_LENGTH * 4));
 80028e6:	481d      	ldr	r0, [pc, #116]	; (800295c <PrintNVM+0xb0>)
 80028e8:	f008 ff3a 	bl	800b760 <DbgTraceGetFileName>
 80028ec:	4601      	mov	r1, r0
 80028ee:	2399      	movs	r3, #153	; 0x99
 80028f0:	4a1b      	ldr	r2, [pc, #108]	; (8002960 <PrintNVM+0xb4>)
 80028f2:	481c      	ldr	r0, [pc, #112]	; (8002964 <PrintNVM+0xb8>)
 80028f4:	f00b fb44 	bl	800df80 <iprintf>
 80028f8:	f240 71ec 	movw	r1, #2028	; 0x7ec
 80028fc:	481d      	ldr	r0, [pc, #116]	; (8002974 <PrintNVM+0xc8>)
 80028fe:	f00b fb3f 	bl	800df80 <iprintf>
  for (uint16_t n = 0; n < BLE_NVM_LENGTH; n++)
 8002902:	2300      	movs	r3, #0
 8002904:	80fb      	strh	r3, [r7, #6]
 8002906:	e014      	b.n	8002932 <PrintNVM+0x86>
  {
    APP_DBG_MSG("  %03d: 0x%08lX\r\n", n, BLE_NVM[n]);
 8002908:	4814      	ldr	r0, [pc, #80]	; (800295c <PrintNVM+0xb0>)
 800290a:	f008 ff29 	bl	800b760 <DbgTraceGetFileName>
 800290e:	4601      	mov	r1, r0
 8002910:	239c      	movs	r3, #156	; 0x9c
 8002912:	4a13      	ldr	r2, [pc, #76]	; (8002960 <PrintNVM+0xb4>)
 8002914:	4813      	ldr	r0, [pc, #76]	; (8002964 <PrintNVM+0xb8>)
 8002916:	f00b fb33 	bl	800df80 <iprintf>
 800291a:	88f9      	ldrh	r1, [r7, #6]
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	4a13      	ldr	r2, [pc, #76]	; (800296c <PrintNVM+0xc0>)
 8002920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002924:	461a      	mov	r2, r3
 8002926:	4814      	ldr	r0, [pc, #80]	; (8002978 <PrintNVM+0xcc>)
 8002928:	f00b fb2a 	bl	800df80 <iprintf>
  for (uint16_t n = 0; n < BLE_NVM_LENGTH; n++)
 800292c:	88fb      	ldrh	r3, [r7, #6]
 800292e:	3301      	adds	r3, #1
 8002930:	80fb      	strh	r3, [r7, #6]
 8002932:	88fb      	ldrh	r3, [r7, #6]
 8002934:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8002938:	d9e6      	bls.n	8002908 <PrintNVM+0x5c>
  }
  APP_DBG_MSG("\r\n");
 800293a:	4808      	ldr	r0, [pc, #32]	; (800295c <PrintNVM+0xb0>)
 800293c:	f008 ff10 	bl	800b760 <DbgTraceGetFileName>
 8002940:	4601      	mov	r1, r0
 8002942:	239e      	movs	r3, #158	; 0x9e
 8002944:	4a06      	ldr	r2, [pc, #24]	; (8002960 <PrintNVM+0xb4>)
 8002946:	4807      	ldr	r0, [pc, #28]	; (8002964 <PrintNVM+0xb8>)
 8002948:	f00b fb1a 	bl	800df80 <iprintf>
 800294c:	480b      	ldr	r0, [pc, #44]	; (800297c <PrintNVM+0xd0>)
 800294e:	f00b fb85 	bl	800e05c <puts>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	0800f1a8 	.word	0x0800f1a8
 8002960:	08010180 	.word	0x08010180
 8002964:	0800f1bc 	.word	0x0800f1bc
 8002968:	0800f1d0 	.word	0x0800f1d0
 800296c:	20030a58 	.word	0x20030a58
 8002970:	0800f1e0 	.word	0x0800f1e0
 8002974:	0800f1fc 	.word	0x0800f1fc
 8002978:	0800f214 	.word	0x0800f214
 800297c:	0800f228 	.word	0x0800f228

08002980 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002990:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <LL_AHB2_GRP1_EnableClock>:
{
 80029a2:	b480      	push	{r7}
 80029a4:	b085      	sub	sp, #20
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80029aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80029ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4013      	ands	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029c6:	68fb      	ldr	r3, [r7, #12]
}
 80029c8:	bf00      	nop
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <LL_AHB3_GRP1_EnableClock>:
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80029dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80029ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4013      	ands	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029f8:	68fb      	ldr	r3, [r7, #12]
}
 80029fa:	bf00      	nop
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <LL_APB1_GRP1_EnableClock>:
{
 8002a06:	b480      	push	{r7}
 8002a08:	b085      	sub	sp, #20
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a22:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4013      	ands	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
}
 8002a2c:	bf00      	nop
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <LL_APB1_GRP2_EnableClock>:
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
}
 8002a5e:	bf00      	nop
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <LL_APB2_GRP1_EnableClock>:
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b085      	sub	sp, #20
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a86:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
}
 8002a90:	bf00      	nop
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002aa0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002aa4:	f7ff ff96 	bl	80029d4 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2100      	movs	r1, #0
 8002aac:	202e      	movs	r0, #46	; 0x2e
 8002aae:	f000 fcde 	bl	800346e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002ab2:	202e      	movs	r0, #46	; 0x2e
 8002ab4:	f000 fcf5 	bl	80034a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ab8:	bf00      	nop
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a0d      	ldr	r2, [pc, #52]	; (8002b00 <HAL_IPCC_MspInit+0x44>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d113      	bne.n	8002af6 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002ace:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002ad2:	f7ff ff7f 	bl	80029d4 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2100      	movs	r1, #0
 8002ada:	202c      	movs	r0, #44	; 0x2c
 8002adc:	f000 fcc7 	bl	800346e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002ae0:	202c      	movs	r0, #44	; 0x2c
 8002ae2:	f000 fcde 	bl	80034a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2100      	movs	r1, #0
 8002aea:	202d      	movs	r0, #45	; 0x2d
 8002aec:	f000 fcbf 	bl	800346e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002af0:	202d      	movs	r0, #45	; 0x2d
 8002af2:	f000 fcd6 	bl	80034a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	58000c00 	.word	0x58000c00

08002b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b09c      	sub	sp, #112	; 0x70
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b1c:	f107 030c 	add.w	r3, r7, #12
 8002b20:	2250      	movs	r2, #80	; 0x50
 8002b22:	2100      	movs	r1, #0
 8002b24:	4618      	mov	r0, r3
 8002b26:	f00b fb79 	bl	800e21c <memset>
  if(huart->Instance==LPUART1)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a71      	ldr	r2, [pc, #452]	; (8002cf4 <HAL_UART_MspInit+0x1f0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d156      	bne.n	8002be2 <HAL_UART_MspInit+0xde>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002b34:	2302      	movs	r3, #2
 8002b36:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b3c:	f107 030c 	add.w	r3, r7, #12
 8002b40:	4618      	mov	r0, r3
 8002b42:	f002 ff46 	bl	80059d2 <HAL_RCCEx_PeriphCLKConfig>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b4c:	f7ff fd5e 	bl	800260c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002b50:	2001      	movs	r0, #1
 8002b52:	f7ff ff71 	bl	8002a38 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b56:	2001      	movs	r0, #1
 8002b58:	f7ff ff23 	bl	80029a2 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b5c:	230c      	movs	r3, #12
 8002b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b60:	2302      	movs	r3, #2
 8002b62:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002b6c:	2308      	movs	r3, #8
 8002b6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b70:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002b74:	4619      	mov	r1, r3
 8002b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b7a:	f001 f939 	bl	8003df0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel3;
 8002b7e:	4b5e      	ldr	r3, [pc, #376]	; (8002cf8 <HAL_UART_MspInit+0x1f4>)
 8002b80:	4a5e      	ldr	r2, [pc, #376]	; (8002cfc <HAL_UART_MspInit+0x1f8>)
 8002b82:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002b84:	4b5c      	ldr	r3, [pc, #368]	; (8002cf8 <HAL_UART_MspInit+0x1f4>)
 8002b86:	2211      	movs	r2, #17
 8002b88:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b8a:	4b5b      	ldr	r3, [pc, #364]	; (8002cf8 <HAL_UART_MspInit+0x1f4>)
 8002b8c:	2210      	movs	r2, #16
 8002b8e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b90:	4b59      	ldr	r3, [pc, #356]	; (8002cf8 <HAL_UART_MspInit+0x1f4>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b96:	4b58      	ldr	r3, [pc, #352]	; (8002cf8 <HAL_UART_MspInit+0x1f4>)
 8002b98:	2280      	movs	r2, #128	; 0x80
 8002b9a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b9c:	4b56      	ldr	r3, [pc, #344]	; (8002cf8 <HAL_UART_MspInit+0x1f4>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ba2:	4b55      	ldr	r3, [pc, #340]	; (8002cf8 <HAL_UART_MspInit+0x1f4>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002ba8:	4b53      	ldr	r3, [pc, #332]	; (8002cf8 <HAL_UART_MspInit+0x1f4>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002bae:	4b52      	ldr	r3, [pc, #328]	; (8002cf8 <HAL_UART_MspInit+0x1f4>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002bb4:	4850      	ldr	r0, [pc, #320]	; (8002cf8 <HAL_UART_MspInit+0x1f4>)
 8002bb6:	f000 fcb9 	bl	800352c <HAL_DMA_Init>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002bc0:	f7ff fd24 	bl	800260c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a4c      	ldr	r2, [pc, #304]	; (8002cf8 <HAL_UART_MspInit+0x1f4>)
 8002bc8:	67da      	str	r2, [r3, #124]	; 0x7c
 8002bca:	4a4b      	ldr	r2, [pc, #300]	; (8002cf8 <HAL_UART_MspInit+0x1f4>)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	2025      	movs	r0, #37	; 0x25
 8002bd6:	f000 fc4a 	bl	800346e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002bda:	2025      	movs	r0, #37	; 0x25
 8002bdc:	f000 fc61 	bl	80034a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002be0:	e084      	b.n	8002cec <HAL_UART_MspInit+0x1e8>
  else if(huart->Instance==USART1)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a46      	ldr	r2, [pc, #280]	; (8002d00 <HAL_UART_MspInit+0x1fc>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d17f      	bne.n	8002cec <HAL_UART_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002bec:	2301      	movs	r3, #1
 8002bee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bf4:	f107 030c 	add.w	r3, r7, #12
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f002 feea 	bl	80059d2 <HAL_RCCEx_PeriphCLKConfig>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_UART_MspInit+0x104>
      Error_Handler();
 8002c04:	f7ff fd02 	bl	800260c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c08:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c0c:	f7ff ff2d 	bl	8002a6a <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c10:	2002      	movs	r0, #2
 8002c12:	f7ff fec6 	bl	80029a2 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c16:	23c0      	movs	r3, #192	; 0xc0
 8002c18:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c22:	2300      	movs	r3, #0
 8002c24:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c26:	2307      	movs	r3, #7
 8002c28:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c2a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4834      	ldr	r0, [pc, #208]	; (8002d04 <HAL_UART_MspInit+0x200>)
 8002c32:	f001 f8dd 	bl	8003df0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8002c36:	4b34      	ldr	r3, [pc, #208]	; (8002d08 <HAL_UART_MspInit+0x204>)
 8002c38:	4a34      	ldr	r2, [pc, #208]	; (8002d0c <HAL_UART_MspInit+0x208>)
 8002c3a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002c3c:	4b32      	ldr	r3, [pc, #200]	; (8002d08 <HAL_UART_MspInit+0x204>)
 8002c3e:	220e      	movs	r2, #14
 8002c40:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c42:	4b31      	ldr	r3, [pc, #196]	; (8002d08 <HAL_UART_MspInit+0x204>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c48:	4b2f      	ldr	r3, [pc, #188]	; (8002d08 <HAL_UART_MspInit+0x204>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c4e:	4b2e      	ldr	r3, [pc, #184]	; (8002d08 <HAL_UART_MspInit+0x204>)
 8002c50:	2280      	movs	r2, #128	; 0x80
 8002c52:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c54:	4b2c      	ldr	r3, [pc, #176]	; (8002d08 <HAL_UART_MspInit+0x204>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c5a:	4b2b      	ldr	r3, [pc, #172]	; (8002d08 <HAL_UART_MspInit+0x204>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002c60:	4b29      	ldr	r3, [pc, #164]	; (8002d08 <HAL_UART_MspInit+0x204>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c66:	4b28      	ldr	r3, [pc, #160]	; (8002d08 <HAL_UART_MspInit+0x204>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002c6c:	4826      	ldr	r0, [pc, #152]	; (8002d08 <HAL_UART_MspInit+0x204>)
 8002c6e:	f000 fc5d 	bl	800352c <HAL_DMA_Init>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_UART_MspInit+0x178>
      Error_Handler();
 8002c78:	f7ff fcc8 	bl	800260c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a22      	ldr	r2, [pc, #136]	; (8002d08 <HAL_UART_MspInit+0x204>)
 8002c80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002c84:	4a20      	ldr	r2, [pc, #128]	; (8002d08 <HAL_UART_MspInit+0x204>)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8002c8a:	4b21      	ldr	r3, [pc, #132]	; (8002d10 <HAL_UART_MspInit+0x20c>)
 8002c8c:	4a21      	ldr	r2, [pc, #132]	; (8002d14 <HAL_UART_MspInit+0x210>)
 8002c8e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002c90:	4b1f      	ldr	r3, [pc, #124]	; (8002d10 <HAL_UART_MspInit+0x20c>)
 8002c92:	220f      	movs	r2, #15
 8002c94:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c96:	4b1e      	ldr	r3, [pc, #120]	; (8002d10 <HAL_UART_MspInit+0x20c>)
 8002c98:	2210      	movs	r2, #16
 8002c9a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c9c:	4b1c      	ldr	r3, [pc, #112]	; (8002d10 <HAL_UART_MspInit+0x20c>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ca2:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <HAL_UART_MspInit+0x20c>)
 8002ca4:	2280      	movs	r2, #128	; 0x80
 8002ca6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ca8:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <HAL_UART_MspInit+0x20c>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cae:	4b18      	ldr	r3, [pc, #96]	; (8002d10 <HAL_UART_MspInit+0x20c>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002cb4:	4b16      	ldr	r3, [pc, #88]	; (8002d10 <HAL_UART_MspInit+0x20c>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cba:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <HAL_UART_MspInit+0x20c>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002cc0:	4813      	ldr	r0, [pc, #76]	; (8002d10 <HAL_UART_MspInit+0x20c>)
 8002cc2:	f000 fc33 	bl	800352c <HAL_DMA_Init>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <HAL_UART_MspInit+0x1cc>
      Error_Handler();
 8002ccc:	f7ff fc9e 	bl	800260c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a0f      	ldr	r2, [pc, #60]	; (8002d10 <HAL_UART_MspInit+0x20c>)
 8002cd4:	67da      	str	r2, [r3, #124]	; 0x7c
 8002cd6:	4a0e      	ldr	r2, [pc, #56]	; (8002d10 <HAL_UART_MspInit+0x20c>)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2100      	movs	r1, #0
 8002ce0:	2024      	movs	r0, #36	; 0x24
 8002ce2:	f000 fbc4 	bl	800346e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ce6:	2024      	movs	r0, #36	; 0x24
 8002ce8:	f000 fbdb 	bl	80034a2 <HAL_NVIC_EnableIRQ>
}
 8002cec:	bf00      	nop
 8002cee:	3770      	adds	r7, #112	; 0x70
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40008000 	.word	0x40008000
 8002cf8:	200003e4 	.word	0x200003e4
 8002cfc:	40020030 	.word	0x40020030
 8002d00:	40013800 	.word	0x40013800
 8002d04:	48000400 	.word	0x48000400
 8002d08:	20000444 	.word	0x20000444
 8002d0c:	40020008 	.word	0x40020008
 8002d10:	200004a4 	.word	0x200004a4
 8002d14:	4002001c 	.word	0x4002001c

08002d18 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b096      	sub	sp, #88	; 0x58
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d20:	f107 0308 	add.w	r3, r7, #8
 8002d24:	2250      	movs	r2, #80	; 0x50
 8002d26:	2100      	movs	r1, #0
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f00b fa77 	bl	800e21c <memset>
  if(hrtc->Instance==RTC)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a12      	ldr	r2, [pc, #72]	; (8002d7c <HAL_RTC_MspInit+0x64>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d11d      	bne.n	8002d74 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002d38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d3c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002d3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d42:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d44:	f107 0308 	add.w	r3, r7, #8
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f002 fe42 	bl	80059d2 <HAL_RCCEx_PeriphCLKConfig>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002d54:	f7ff fc5a 	bl	800260c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d58:	f7ff fe12 	bl	8002980 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002d5c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002d60:	f7ff fe51 	bl	8002a06 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002d64:	2200      	movs	r2, #0
 8002d66:	2100      	movs	r1, #0
 8002d68:	2003      	movs	r0, #3
 8002d6a:	f000 fb80 	bl	800346e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002d6e:	2003      	movs	r0, #3
 8002d70:	f000 fb97 	bl	80034a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002d74:	bf00      	nop
 8002d76:	3758      	adds	r7, #88	; 0x58
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40002800 	.word	0x40002800

08002d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d84:	e7fe      	b.n	8002d84 <NMI_Handler+0x4>

08002d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d86:	b480      	push	{r7}
 8002d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d8a:	e7fe      	b.n	8002d8a <HardFault_Handler+0x4>

08002d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d90:	e7fe      	b.n	8002d90 <MemManage_Handler+0x4>

08002d92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d92:	b480      	push	{r7}
 8002d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d96:	e7fe      	b.n	8002d96 <BusFault_Handler+0x4>

08002d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d9c:	e7fe      	b.n	8002d9c <UsageFault_Handler+0x4>

08002d9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002da2:	bf00      	nop
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dcc:	f000 f9dc 	bl	8003188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dd0:	bf00      	nop
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002dd8:	f7fe feb0 	bl	8001b3c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002ddc:	bf00      	nop
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002de4:	4802      	ldr	r0, [pc, #8]	; (8002df0 <DMA1_Channel1_IRQHandler+0x10>)
 8002de6:	f000 fd82 	bl	80038ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002dea:	bf00      	nop
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000444 	.word	0x20000444

08002df4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002df8:	4802      	ldr	r0, [pc, #8]	; (8002e04 <DMA1_Channel2_IRQHandler+0x10>)
 8002dfa:	f000 fd78 	bl	80038ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	200004a4 	.word	0x200004a4

08002e08 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002e0c:	4802      	ldr	r0, [pc, #8]	; (8002e18 <DMA1_Channel3_IRQHandler+0x10>)
 8002e0e:	f000 fd6e 	bl	80038ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	200003e4 	.word	0x200003e4

08002e1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e20:	4802      	ldr	r0, [pc, #8]	; (8002e2c <USART1_IRQHandler+0x10>)
 8002e22:	f003 fb19 	bl	8006458 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e26:	bf00      	nop
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20000318 	.word	0x20000318

08002e30 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002e34:	4802      	ldr	r0, [pc, #8]	; (8002e40 <LPUART1_IRQHandler+0x10>)
 8002e36:	f003 fb0f 	bl	8006458 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	2000024c 	.word	0x2000024c

08002e44 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002e48:	f00a fc1a 	bl	800d680 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002e4c:	bf00      	nop
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002e54:	f00a fc4a 	bl	800d6ec <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002e58:	bf00      	nop
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002e60:	f001 f9c8 	bl	80041f4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002e64:	bf00      	nop
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	e00a      	b.n	8002e90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e7a:	f3af 8000 	nop.w
 8002e7e:	4601      	mov	r1, r0
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	60ba      	str	r2, [r7, #8]
 8002e86:	b2ca      	uxtb	r2, r1
 8002e88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	dbf0      	blt.n	8002e7a <_read+0x12>
  }

  return len;
 8002e98:	687b      	ldr	r3, [r7, #4]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002eaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eca:	605a      	str	r2, [r3, #4]
  return 0;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <_isatty>:

int _isatty(int file)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ee2:	2301      	movs	r3, #1
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f14:	4a14      	ldr	r2, [pc, #80]	; (8002f68 <_sbrk+0x5c>)
 8002f16:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <_sbrk+0x60>)
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f20:	4b13      	ldr	r3, [pc, #76]	; (8002f70 <_sbrk+0x64>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d102      	bne.n	8002f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f28:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <_sbrk+0x64>)
 8002f2a:	4a12      	ldr	r2, [pc, #72]	; (8002f74 <_sbrk+0x68>)
 8002f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f2e:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <_sbrk+0x64>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4413      	add	r3, r2
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d207      	bcs.n	8002f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f3c:	f00b f9d4 	bl	800e2e8 <__errno>
 8002f40:	4603      	mov	r3, r0
 8002f42:	220c      	movs	r2, #12
 8002f44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f46:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4a:	e009      	b.n	8002f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f4c:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <_sbrk+0x64>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f52:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <_sbrk+0x64>)
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4413      	add	r3, r2
 8002f5a:	4a05      	ldr	r2, [pc, #20]	; (8002f70 <_sbrk+0x64>)
 8002f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20030000 	.word	0x20030000
 8002f6c:	00000400 	.word	0x00000400
 8002f70:	20000528 	.word	0x20000528
 8002f74:	20001878 	.word	0x20001878

08002f78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8002f7c:	4b26      	ldr	r3, [pc, #152]	; (8003018 <SystemInit+0xa0>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8002f82:	4b25      	ldr	r3, [pc, #148]	; (8003018 <SystemInit+0xa0>)
 8002f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f88:	4a23      	ldr	r2, [pc, #140]	; (8003018 <SystemInit+0xa0>)
 8002f8a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f8e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002faa:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fb6:	4b19      	ldr	r3, [pc, #100]	; (800301c <SystemInit+0xa4>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fc8:	f023 0305 	bic.w	r3, r3, #5
 8002fcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fdc:	f023 0301 	bic.w	r3, r3, #1
 8002fe0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe8:	4a0d      	ldr	r2, [pc, #52]	; (8003020 <SystemInit+0xa8>)
 8002fea:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff0:	4a0b      	ldr	r2, [pc, #44]	; (8003020 <SystemInit+0xa8>)
 8002ff2:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003002:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003008:	2200      	movs	r2, #0
 800300a:	619a      	str	r2, [r3, #24]
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	e000ed00 	.word	0xe000ed00
 800301c:	faf6fefb 	.word	0xfaf6fefb
 8003020:	22041000 	.word	0x22041000

08003024 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003024:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003026:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003028:	3304      	adds	r3, #4

0800302a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800302a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800302c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800302e:	d3f9      	bcc.n	8003024 <CopyDataInit>
  bx lr
 8003030:	4770      	bx	lr

08003032 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003032:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003034:	3004      	adds	r0, #4

08003036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003036:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003038:	d3fb      	bcc.n	8003032 <FillZerobss>
  bx lr
 800303a:	4770      	bx	lr

0800303c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800303c:	480c      	ldr	r0, [pc, #48]	; (8003070 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800303e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003040:	f7ff ff9a 	bl	8002f78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003044:	480b      	ldr	r0, [pc, #44]	; (8003074 <LoopForever+0x8>)
 8003046:	490c      	ldr	r1, [pc, #48]	; (8003078 <LoopForever+0xc>)
 8003048:	4a0c      	ldr	r2, [pc, #48]	; (800307c <LoopForever+0x10>)
 800304a:	2300      	movs	r3, #0
 800304c:	f7ff ffed 	bl	800302a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003050:	480b      	ldr	r0, [pc, #44]	; (8003080 <LoopForever+0x14>)
 8003052:	490c      	ldr	r1, [pc, #48]	; (8003084 <LoopForever+0x18>)
 8003054:	2300      	movs	r3, #0
 8003056:	f7ff ffee 	bl	8003036 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800305a:	480b      	ldr	r0, [pc, #44]	; (8003088 <LoopForever+0x1c>)
 800305c:	490b      	ldr	r1, [pc, #44]	; (800308c <LoopForever+0x20>)
 800305e:	2300      	movs	r3, #0
 8003060:	f7ff ffe9 	bl	8003036 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003064:	f00b f946 	bl	800e2f4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8003068:	f7ff f8ec 	bl	8002244 <main>

0800306c <LoopForever>:

LoopForever:
  b LoopForever
 800306c:	e7fe      	b.n	800306c <LoopForever>
 800306e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8003070:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003074:	20000008 	.word	0x20000008
 8003078:	20000118 	.word	0x20000118
 800307c:	08010340 	.word	0x08010340
  INIT_BSS _sbss, _ebss
 8003080:	2000014c 	.word	0x2000014c
 8003084:	20001874 	.word	0x20001874
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003088:	200301e4 	.word	0x200301e4
 800308c:	20031253 	.word	0x20031253

08003090 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003090:	e7fe      	b.n	8003090 <ADC1_IRQHandler>
	...

08003094 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003098:	4b05      	ldr	r3, [pc, #20]	; (80030b0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800309e:	f043 0301 	orr.w	r3, r3, #1
 80030a2:	6053      	str	r3, [r2, #4]
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	e0042000 	.word	0xe0042000

080030b4 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80030b8:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	4a04      	ldr	r2, [pc, #16]	; (80030d0 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80030be:	f043 0302 	orr.w	r3, r3, #2
 80030c2:	6053      	str	r3, [r2, #4]
}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	e0042000 	.word	0xe0042000

080030d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030de:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <HAL_Init+0x3c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a0b      	ldr	r2, [pc, #44]	; (8003110 <HAL_Init+0x3c>)
 80030e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030ea:	2003      	movs	r0, #3
 80030ec:	f000 f9b4 	bl	8003458 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030f0:	2000      	movs	r0, #0
 80030f2:	f000 f80f 	bl	8003114 <HAL_InitTick>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	71fb      	strb	r3, [r7, #7]
 8003100:	e001      	b.n	8003106 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003102:	f7ff fccb 	bl	8002a9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003106:	79fb      	ldrb	r3, [r7, #7]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	58004000 	.word	0x58004000

08003114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800311c:	2300      	movs	r3, #0
 800311e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003120:	4b17      	ldr	r3, [pc, #92]	; (8003180 <HAL_InitTick+0x6c>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d024      	beq.n	8003172 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003128:	f002 f9c2 	bl	80054b0 <HAL_RCC_GetHCLKFreq>
 800312c:	4602      	mov	r2, r0
 800312e:	4b14      	ldr	r3, [pc, #80]	; (8003180 <HAL_InitTick+0x6c>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	4619      	mov	r1, r3
 8003134:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003138:	fbb3 f3f1 	udiv	r3, r3, r1
 800313c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003140:	4618      	mov	r0, r3
 8003142:	f000 f9ca 	bl	80034da <HAL_SYSTICK_Config>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10f      	bne.n	800316c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b0f      	cmp	r3, #15
 8003150:	d809      	bhi.n	8003166 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003152:	2200      	movs	r2, #0
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	f04f 30ff 	mov.w	r0, #4294967295
 800315a:	f000 f988 	bl	800346e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800315e:	4a09      	ldr	r2, [pc, #36]	; (8003184 <HAL_InitTick+0x70>)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6013      	str	r3, [r2, #0]
 8003164:	e007      	b.n	8003176 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	73fb      	strb	r3, [r7, #15]
 800316a:	e004      	b.n	8003176 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]
 8003170:	e001      	b.n	8003176 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003176:	7bfb      	ldrb	r3, [r7, #15]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	20000010 	.word	0x20000010
 8003184:	2000000c 	.word	0x2000000c

08003188 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800318c:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_IncTick+0x20>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	461a      	mov	r2, r3
 8003192:	4b06      	ldr	r3, [pc, #24]	; (80031ac <HAL_IncTick+0x24>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4413      	add	r3, r2
 8003198:	4a04      	ldr	r2, [pc, #16]	; (80031ac <HAL_IncTick+0x24>)
 800319a:	6013      	str	r3, [r2, #0]
}
 800319c:	bf00      	nop
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	20000010 	.word	0x20000010
 80031ac:	2000052c 	.word	0x2000052c

080031b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  return uwTick;
 80031b4:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <HAL_GetTick+0x14>)
 80031b6:	681b      	ldr	r3, [r3, #0]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	2000052c 	.word	0x2000052c

080031c8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80031cc:	4b03      	ldr	r3, [pc, #12]	; (80031dc <HAL_GetTickPrio+0x14>)
 80031ce:	681b      	ldr	r3, [r3, #0]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	2000000c 	.word	0x2000000c

080031e0 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80031e4:	f7ff ff56 	bl	8003094 <LL_DBGMCU_EnableDBGSleepMode>
}
 80031e8:	bf00      	nop
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80031f0:	f7ff ff60 	bl	80030b4 <LL_DBGMCU_EnableDBGStopMode>
}
 80031f4:	bf00      	nop
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003208:	4b0c      	ldr	r3, [pc, #48]	; (800323c <__NVIC_SetPriorityGrouping+0x44>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003214:	4013      	ands	r3, r2
 8003216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800322a:	4a04      	ldr	r2, [pc, #16]	; (800323c <__NVIC_SetPriorityGrouping+0x44>)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	60d3      	str	r3, [r2, #12]
}
 8003230:	bf00      	nop
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	e000ed00 	.word	0xe000ed00

08003240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003244:	4b04      	ldr	r3, [pc, #16]	; (8003258 <__NVIC_GetPriorityGrouping+0x18>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	0a1b      	lsrs	r3, r3, #8
 800324a:	f003 0307 	and.w	r3, r3, #7
}
 800324e:	4618      	mov	r0, r3
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	e000ed00 	.word	0xe000ed00

0800325c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326a:	2b00      	cmp	r3, #0
 800326c:	db0b      	blt.n	8003286 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800326e:	79fb      	ldrb	r3, [r7, #7]
 8003270:	f003 021f 	and.w	r2, r3, #31
 8003274:	4907      	ldr	r1, [pc, #28]	; (8003294 <__NVIC_EnableIRQ+0x38>)
 8003276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327a:	095b      	lsrs	r3, r3, #5
 800327c:	2001      	movs	r0, #1
 800327e:	fa00 f202 	lsl.w	r2, r0, r2
 8003282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	e000e100 	.word	0xe000e100

08003298 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	db12      	blt.n	80032d0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	f003 021f 	and.w	r2, r3, #31
 80032b0:	490a      	ldr	r1, [pc, #40]	; (80032dc <__NVIC_DisableIRQ+0x44>)
 80032b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	2001      	movs	r0, #1
 80032ba:	fa00 f202 	lsl.w	r2, r0, r2
 80032be:	3320      	adds	r3, #32
 80032c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80032c4:	f3bf 8f4f 	dsb	sy
}
 80032c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80032ca:	f3bf 8f6f 	isb	sy
}
 80032ce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	e000e100 	.word	0xe000e100

080032e0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	4603      	mov	r3, r0
 80032e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	db0c      	blt.n	800330c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	f003 021f 	and.w	r2, r3, #31
 80032f8:	4907      	ldr	r1, [pc, #28]	; (8003318 <__NVIC_SetPendingIRQ+0x38>)
 80032fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fe:	095b      	lsrs	r3, r3, #5
 8003300:	2001      	movs	r0, #1
 8003302:	fa00 f202 	lsl.w	r2, r0, r2
 8003306:	3340      	adds	r3, #64	; 0x40
 8003308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000e100 	.word	0xe000e100

0800331c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	2b00      	cmp	r3, #0
 800332c:	db0c      	blt.n	8003348 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	f003 021f 	and.w	r2, r3, #31
 8003334:	4907      	ldr	r1, [pc, #28]	; (8003354 <__NVIC_ClearPendingIRQ+0x38>)
 8003336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333a:	095b      	lsrs	r3, r3, #5
 800333c:	2001      	movs	r0, #1
 800333e:	fa00 f202 	lsl.w	r2, r0, r2
 8003342:	3360      	adds	r3, #96	; 0x60
 8003344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	e000e100 	.word	0xe000e100

08003358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	6039      	str	r1, [r7, #0]
 8003362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003368:	2b00      	cmp	r3, #0
 800336a:	db0a      	blt.n	8003382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	b2da      	uxtb	r2, r3
 8003370:	490c      	ldr	r1, [pc, #48]	; (80033a4 <__NVIC_SetPriority+0x4c>)
 8003372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003376:	0112      	lsls	r2, r2, #4
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	440b      	add	r3, r1
 800337c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003380:	e00a      	b.n	8003398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	4908      	ldr	r1, [pc, #32]	; (80033a8 <__NVIC_SetPriority+0x50>)
 8003388:	79fb      	ldrb	r3, [r7, #7]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	3b04      	subs	r3, #4
 8003390:	0112      	lsls	r2, r2, #4
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	440b      	add	r3, r1
 8003396:	761a      	strb	r2, [r3, #24]
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000e100 	.word	0xe000e100
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b089      	sub	sp, #36	; 0x24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f1c3 0307 	rsb	r3, r3, #7
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	bf28      	it	cs
 80033ca:	2304      	movcs	r3, #4
 80033cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	3304      	adds	r3, #4
 80033d2:	2b06      	cmp	r3, #6
 80033d4:	d902      	bls.n	80033dc <NVIC_EncodePriority+0x30>
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3b03      	subs	r3, #3
 80033da:	e000      	b.n	80033de <NVIC_EncodePriority+0x32>
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e0:	f04f 32ff 	mov.w	r2, #4294967295
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43da      	mvns	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	401a      	ands	r2, r3
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033f4:	f04f 31ff 	mov.w	r1, #4294967295
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	fa01 f303 	lsl.w	r3, r1, r3
 80033fe:	43d9      	mvns	r1, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003404:	4313      	orrs	r3, r2
         );
}
 8003406:	4618      	mov	r0, r3
 8003408:	3724      	adds	r7, #36	; 0x24
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
	...

08003414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3b01      	subs	r3, #1
 8003420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003424:	d301      	bcc.n	800342a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003426:	2301      	movs	r3, #1
 8003428:	e00f      	b.n	800344a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800342a:	4a0a      	ldr	r2, [pc, #40]	; (8003454 <SysTick_Config+0x40>)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3b01      	subs	r3, #1
 8003430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003432:	210f      	movs	r1, #15
 8003434:	f04f 30ff 	mov.w	r0, #4294967295
 8003438:	f7ff ff8e 	bl	8003358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800343c:	4b05      	ldr	r3, [pc, #20]	; (8003454 <SysTick_Config+0x40>)
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003442:	4b04      	ldr	r3, [pc, #16]	; (8003454 <SysTick_Config+0x40>)
 8003444:	2207      	movs	r2, #7
 8003446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	e000e010 	.word	0xe000e010

08003458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff fec9 	bl	80031f8 <__NVIC_SetPriorityGrouping>
}
 8003466:	bf00      	nop
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b086      	sub	sp, #24
 8003472:	af00      	add	r7, sp, #0
 8003474:	4603      	mov	r3, r0
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800347c:	f7ff fee0 	bl	8003240 <__NVIC_GetPriorityGrouping>
 8003480:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	68b9      	ldr	r1, [r7, #8]
 8003486:	6978      	ldr	r0, [r7, #20]
 8003488:	f7ff ff90 	bl	80033ac <NVIC_EncodePriority>
 800348c:	4602      	mov	r2, r0
 800348e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003492:	4611      	mov	r1, r2
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff ff5f 	bl	8003358 <__NVIC_SetPriority>
}
 800349a:	bf00      	nop
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b082      	sub	sp, #8
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	4603      	mov	r3, r0
 80034aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff fed3 	bl	800325c <__NVIC_EnableIRQ>
}
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b082      	sub	sp, #8
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	4603      	mov	r3, r0
 80034c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80034c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff fee3 	bl	8003298 <__NVIC_DisableIRQ>
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff ff96 	bl	8003414 <SysTick_Config>
 80034e8:	4603      	mov	r3, r0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	4603      	mov	r3, r0
 80034fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80034fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff feed 	bl	80032e0 <__NVIC_SetPendingIRQ>
}
 8003506:	bf00      	nop
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b082      	sub	sp, #8
 8003512:	af00      	add	r7, sp, #0
 8003514:	4603      	mov	r3, r0
 8003516:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff fefd 	bl	800331c <__NVIC_ClearPendingIRQ>
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e08e      	b.n	800365c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	4b47      	ldr	r3, [pc, #284]	; (8003664 <HAL_DMA_Init+0x138>)
 8003546:	429a      	cmp	r2, r3
 8003548:	d80f      	bhi.n	800356a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	4b45      	ldr	r3, [pc, #276]	; (8003668 <HAL_DMA_Init+0x13c>)
 8003552:	4413      	add	r3, r2
 8003554:	4a45      	ldr	r2, [pc, #276]	; (800366c <HAL_DMA_Init+0x140>)
 8003556:	fba2 2303 	umull	r2, r3, r2, r3
 800355a:	091b      	lsrs	r3, r3, #4
 800355c:	009a      	lsls	r2, r3, #2
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a42      	ldr	r2, [pc, #264]	; (8003670 <HAL_DMA_Init+0x144>)
 8003566:	641a      	str	r2, [r3, #64]	; 0x40
 8003568:	e00e      	b.n	8003588 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	461a      	mov	r2, r3
 8003570:	4b40      	ldr	r3, [pc, #256]	; (8003674 <HAL_DMA_Init+0x148>)
 8003572:	4413      	add	r3, r2
 8003574:	4a3d      	ldr	r2, [pc, #244]	; (800366c <HAL_DMA_Init+0x140>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	091b      	lsrs	r3, r3, #4
 800357c:	009a      	lsls	r2, r3, #2
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a3c      	ldr	r2, [pc, #240]	; (8003678 <HAL_DMA_Init+0x14c>)
 8003586:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800359e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80035ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fa74 	bl	8003ac8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035e8:	d102      	bne.n	80035f0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685a      	ldr	r2, [r3, #4]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80035fc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003606:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d010      	beq.n	8003632 <HAL_DMA_Init+0x106>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b04      	cmp	r3, #4
 8003616:	d80c      	bhi.n	8003632 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 fa93 	bl	8003b44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800362e:	605a      	str	r2, [r3, #4]
 8003630:	e008      	b.n	8003644 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40020407 	.word	0x40020407
 8003668:	bffdfff8 	.word	0xbffdfff8
 800366c:	cccccccd 	.word	0xcccccccd
 8003670:	40020000 	.word	0x40020000
 8003674:	bffdfbf8 	.word	0xbffdfbf8
 8003678:	40020400 	.word	0x40020400

0800367c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_DMA_Start_IT+0x20>
 8003698:	2302      	movs	r3, #2
 800369a:	e066      	b.n	800376a <HAL_DMA_Start_IT+0xee>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d155      	bne.n	800375c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2202      	movs	r2, #2
 80036b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0201 	bic.w	r2, r2, #1
 80036cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 f9b9 	bl	8003a4c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d008      	beq.n	80036f4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f042 020e 	orr.w	r2, r2, #14
 80036f0:	601a      	str	r2, [r3, #0]
 80036f2:	e00f      	b.n	8003714 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0204 	bic.w	r2, r2, #4
 8003702:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 020a 	orr.w	r2, r2, #10
 8003712:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d007      	beq.n	8003732 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800372c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003730:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003736:	2b00      	cmp	r3, #0
 8003738:	d007      	beq.n	800374a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003748:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0201 	orr.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	e005      	b.n	8003768 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003764:	2302      	movs	r3, #2
 8003766:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003768:	7dfb      	ldrb	r3, [r7, #23]
}
 800376a:	4618      	mov	r0, r3
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e04f      	b.n	8003824 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d008      	beq.n	80037a2 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2204      	movs	r2, #4
 8003794:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e040      	b.n	8003824 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 020e 	bic.w	r2, r2, #14
 80037b0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0201 	bic.w	r2, r2, #1
 80037d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d6:	f003 021c 	and.w	r2, r3, #28
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	2101      	movs	r1, #1
 80037e0:	fa01 f202 	lsl.w	r2, r1, r2
 80037e4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037ee:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00c      	beq.n	8003812 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003802:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003806:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003810:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d005      	beq.n	8003854 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2204      	movs	r2, #4
 800384c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	73fb      	strb	r3, [r7, #15]
 8003852:	e047      	b.n	80038e4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 020e 	bic.w	r2, r2, #14
 8003862:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0201 	bic.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800387e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003882:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003888:	f003 021c 	and.w	r2, r3, #28
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	2101      	movs	r1, #1
 8003892:	fa01 f202 	lsl.w	r2, r1, r2
 8003896:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038a0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00c      	beq.n	80038c4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038b8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038c2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	4798      	blx	r3
    }
  }
  return status;
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b084      	sub	sp, #16
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390a:	f003 031c 	and.w	r3, r3, #28
 800390e:	2204      	movs	r2, #4
 8003910:	409a      	lsls	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	4013      	ands	r3, r2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d026      	beq.n	8003968 <HAL_DMA_IRQHandler+0x7a>
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	d021      	beq.n	8003968 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	2b00      	cmp	r3, #0
 8003930:	d107      	bne.n	8003942 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0204 	bic.w	r2, r2, #4
 8003940:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	f003 021c 	and.w	r2, r3, #28
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	2104      	movs	r1, #4
 8003950:	fa01 f202 	lsl.w	r2, r1, r2
 8003954:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	2b00      	cmp	r3, #0
 800395c:	d071      	beq.n	8003a42 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003966:	e06c      	b.n	8003a42 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396c:	f003 031c 	and.w	r3, r3, #28
 8003970:	2202      	movs	r2, #2
 8003972:	409a      	lsls	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4013      	ands	r3, r2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d02e      	beq.n	80039da <HAL_DMA_IRQHandler+0xec>
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d029      	beq.n	80039da <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0320 	and.w	r3, r3, #32
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10b      	bne.n	80039ac <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 020a 	bic.w	r2, r2, #10
 80039a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b0:	f003 021c 	and.w	r2, r3, #28
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	2102      	movs	r1, #2
 80039ba:	fa01 f202 	lsl.w	r2, r1, r2
 80039be:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d038      	beq.n	8003a42 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80039d8:	e033      	b.n	8003a42 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	f003 031c 	and.w	r3, r3, #28
 80039e2:	2208      	movs	r2, #8
 80039e4:	409a      	lsls	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4013      	ands	r3, r2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d02a      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x156>
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f003 0308 	and.w	r3, r3, #8
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d025      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 020e 	bic.w	r2, r2, #14
 8003a06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0c:	f003 021c 	and.w	r2, r3, #28
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	2101      	movs	r1, #1
 8003a16:	fa01 f202 	lsl.w	r2, r1, r2
 8003a1a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d004      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a42:	bf00      	nop
 8003a44:	bf00      	nop
}
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a62:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d004      	beq.n	8003a76 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a74:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	f003 021c 	and.w	r2, r3, #28
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	2101      	movs	r1, #1
 8003a84:	fa01 f202 	lsl.w	r2, r1, r2
 8003a88:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2b10      	cmp	r3, #16
 8003a98:	d108      	bne.n	8003aac <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003aaa:	e007      	b.n	8003abc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	60da      	str	r2, [r3, #12]
}
 8003abc:	bf00      	nop
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	4b17      	ldr	r3, [pc, #92]	; (8003b34 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d80a      	bhi.n	8003af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae0:	089b      	lsrs	r3, r3, #2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ae8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6493      	str	r3, [r2, #72]	; 0x48
 8003af0:	e007      	b.n	8003b02 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af6:	089b      	lsrs	r3, r3, #2
 8003af8:	009a      	lsls	r2, r3, #2
 8003afa:	4b0f      	ldr	r3, [pc, #60]	; (8003b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003afc:	4413      	add	r3, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	3b08      	subs	r3, #8
 8003b0a:	4a0c      	ldr	r2, [pc, #48]	; (8003b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b10:	091b      	lsrs	r3, r3, #4
 8003b12:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a0a      	ldr	r2, [pc, #40]	; (8003b40 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003b18:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f003 031f 	and.w	r3, r3, #31
 8003b20:	2201      	movs	r2, #1
 8003b22:	409a      	lsls	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003b28:	bf00      	nop
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	40020407 	.word	0x40020407
 8003b38:	4002081c 	.word	0x4002081c
 8003b3c:	cccccccd 	.word	0xcccccccd
 8003b40:	40020880 	.word	0x40020880

08003b44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b54:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	461a      	mov	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a09      	ldr	r2, [pc, #36]	; (8003b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003b68:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	2201      	movs	r2, #1
 8003b74:	409a      	lsls	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003b7a:	bf00      	nop
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	1000823f 	.word	0x1000823f
 8003b8c:	40020940 	.word	0x40020940

08003b90 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b9e:	4b1c      	ldr	r3, [pc, #112]	; (8003c10 <HAL_FLASH_Program+0x80>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_FLASH_Program+0x1a>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e02d      	b.n	8003c06 <HAL_FLASH_Program+0x76>
 8003baa:	4b19      	ldr	r3, [pc, #100]	; (8003c10 <HAL_FLASH_Program+0x80>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003bb0:	4b17      	ldr	r3, [pc, #92]	; (8003c10 <HAL_FLASH_Program+0x80>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003bb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bba:	f000 f869 	bl	8003c90 <FLASH_WaitForLastOperation>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8003bc2:	7dfb      	ldrb	r3, [r7, #23]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d11a      	bne.n	8003bfe <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d105      	bne.n	8003bda <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8003bce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bd2:	68b8      	ldr	r0, [r7, #8]
 8003bd4:	f000 f8cc 	bl	8003d70 <FLASH_Program_DoubleWord>
 8003bd8:	e004      	b.n	8003be4 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	4619      	mov	r1, r3
 8003bde:	68b8      	ldr	r0, [r7, #8]
 8003be0:	f00b f91a 	bl	800ee18 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003be4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003be8:	f000 f852 	bl	8003c90 <FLASH_WaitForLastOperation>
 8003bec:	4603      	mov	r3, r0
 8003bee:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8003bf0:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <HAL_FLASH_Program+0x84>)
 8003bf2:	695a      	ldr	r2, [r3, #20]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	4906      	ldr	r1, [pc, #24]	; (8003c14 <HAL_FLASH_Program+0x84>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003bfe:	4b04      	ldr	r3, [pc, #16]	; (8003c10 <HAL_FLASH_Program+0x80>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8003c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000530 	.word	0x20000530
 8003c14:	58004000 	.word	0x58004000

08003c18 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003c22:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <HAL_FLASH_Unlock+0x38>)
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	da0b      	bge.n	8003c42 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003c2a:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <HAL_FLASH_Unlock+0x38>)
 8003c2c:	4a09      	ldr	r2, [pc, #36]	; (8003c54 <HAL_FLASH_Unlock+0x3c>)
 8003c2e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003c30:	4b07      	ldr	r3, [pc, #28]	; (8003c50 <HAL_FLASH_Unlock+0x38>)
 8003c32:	4a09      	ldr	r2, [pc, #36]	; (8003c58 <HAL_FLASH_Unlock+0x40>)
 8003c34:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003c36:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <HAL_FLASH_Unlock+0x38>)
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	da01      	bge.n	8003c42 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003c42:	79fb      	ldrb	r3, [r7, #7]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	58004000 	.word	0x58004000
 8003c54:	45670123 	.word	0x45670123
 8003c58:	cdef89ab 	.word	0xcdef89ab

08003c5c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003c62:	2300      	movs	r3, #0
 8003c64:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003c66:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <HAL_FLASH_Lock+0x30>)
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	4a08      	ldr	r2, [pc, #32]	; (8003c8c <HAL_FLASH_Lock+0x30>)
 8003c6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c70:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8003c72:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <HAL_FLASH_Lock+0x30>)
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	db01      	blt.n	8003c7e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8003c7e:	79fb      	ldrb	r3, [r7, #7]
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	58004000 	.word	0x58004000

08003c90 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8003c98:	f7ff fa8a 	bl	80031b0 <HAL_GetTick>
 8003c9c:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003c9e:	e009      	b.n	8003cb4 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003ca0:	f7ff fa86 	bl	80031b0 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d801      	bhi.n	8003cb4 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e054      	b.n	8003d5e <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003cb4:	4b2c      	ldr	r3, [pc, #176]	; (8003d68 <FLASH_WaitForLastOperation+0xd8>)
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc0:	d0ee      	beq.n	8003ca0 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 8003cc2:	4b29      	ldr	r3, [pc, #164]	; (8003d68 <FLASH_WaitForLastOperation+0xd8>)
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003cd2:	4b25      	ldr	r3, [pc, #148]	; (8003d68 <FLASH_WaitForLastOperation+0xd8>)
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d007      	beq.n	8003cf2 <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003ce2:	4b21      	ldr	r3, [pc, #132]	; (8003d68 <FLASH_WaitForLastOperation+0xd8>)
 8003ce4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003ce8:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003cf0:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d007      	beq.n	8003d16 <FLASH_WaitForLastOperation+0x86>
 8003d06:	4b18      	ldr	r3, [pc, #96]	; (8003d68 <FLASH_WaitForLastOperation+0xd8>)
 8003d08:	699a      	ldr	r2, [r3, #24]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003d10:	4915      	ldr	r1, [pc, #84]	; (8003d68 <FLASH_WaitForLastOperation+0xd8>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	618b      	str	r3, [r1, #24]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d004      	beq.n	8003d2a <FLASH_WaitForLastOperation+0x9a>
 8003d20:	4a11      	ldr	r2, [pc, #68]	; (8003d68 <FLASH_WaitForLastOperation+0xd8>)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003d28:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00e      	beq.n	8003d4e <FLASH_WaitForLastOperation+0xbe>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8003d30:	4a0e      	ldr	r2, [pc, #56]	; (8003d6c <FLASH_WaitForLastOperation+0xdc>)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e011      	b.n	8003d5e <FLASH_WaitForLastOperation+0xce>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8003d3a:	f7ff fa39 	bl	80031b0 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d801      	bhi.n	8003d4e <FLASH_WaitForLastOperation+0xbe>
    {
      return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e007      	b.n	8003d5e <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8003d4e:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <FLASH_WaitForLastOperation+0xd8>)
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d5a:	d0ee      	beq.n	8003d3a <FLASH_WaitForLastOperation+0xaa>
    }
  }

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	58004000 	.word	0x58004000
 8003d6c:	20000530 	.word	0x20000530

08003d70 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003d7c:	4b0e      	ldr	r3, [pc, #56]	; (8003db8 <FLASH_Program_DoubleWord+0x48>)
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	4a0d      	ldr	r2, [pc, #52]	; (8003db8 <FLASH_Program_DoubleWord+0x48>)
 8003d82:	f043 0301 	orr.w	r3, r3, #1
 8003d86:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003d8e:	f3bf 8f6f 	isb	sy
}
 8003d92:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003d94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	000a      	movs	r2, r1
 8003da2:	2300      	movs	r3, #0
 8003da4:	68f9      	ldr	r1, [r7, #12]
 8003da6:	3104      	adds	r1, #4
 8003da8:	4613      	mov	r3, r2
 8003daa:	600b      	str	r3, [r1, #0]
}
 8003dac:	bf00      	nop
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	58004000 	.word	0x58004000

08003dbc <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8003dc4:	4b09      	ldr	r3, [pc, #36]	; (8003dec <FLASH_PageErase+0x30>)
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	4a06      	ldr	r2, [pc, #24]	; (8003dec <FLASH_PageErase+0x30>)
 8003dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd8:	f043 0302 	orr.w	r3, r3, #2
 8003ddc:	6153      	str	r3, [r2, #20]
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	58004000 	.word	0x58004000

08003df0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dfe:	e14c      	b.n	800409a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	2101      	movs	r1, #1
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f000 813e 	beq.w	8004094 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 0303 	and.w	r3, r3, #3
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d005      	beq.n	8003e30 <HAL_GPIO_Init+0x40>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f003 0303 	and.w	r3, r3, #3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d130      	bne.n	8003e92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	43db      	mvns	r3, r3
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4013      	ands	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e66:	2201      	movs	r2, #1
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	4013      	ands	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	091b      	lsrs	r3, r3, #4
 8003e7c:	f003 0201 	and.w	r2, r3, #1
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d017      	beq.n	8003ece <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003eae:	43db      	mvns	r3, r3
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	689a      	ldr	r2, [r3, #8]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d123      	bne.n	8003f22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	08da      	lsrs	r2, r3, #3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3208      	adds	r2, #8
 8003ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	220f      	movs	r2, #15
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4013      	ands	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	691a      	ldr	r2, [r3, #16]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	08da      	lsrs	r2, r3, #3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3208      	adds	r2, #8
 8003f1c:	6939      	ldr	r1, [r7, #16]
 8003f1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	2203      	movs	r2, #3
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	43db      	mvns	r3, r3
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4013      	ands	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f003 0203 	and.w	r2, r3, #3
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 8098 	beq.w	8004094 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003f64:	4a54      	ldr	r2, [pc, #336]	; (80040b8 <HAL_GPIO_Init+0x2c8>)
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	089b      	lsrs	r3, r3, #2
 8003f6a:	3302      	adds	r3, #2
 8003f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f003 0303 	and.w	r3, r3, #3
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	220f      	movs	r2, #15
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	43db      	mvns	r3, r3
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	4013      	ands	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f8e:	d019      	beq.n	8003fc4 <HAL_GPIO_Init+0x1d4>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a4a      	ldr	r2, [pc, #296]	; (80040bc <HAL_GPIO_Init+0x2cc>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d013      	beq.n	8003fc0 <HAL_GPIO_Init+0x1d0>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a49      	ldr	r2, [pc, #292]	; (80040c0 <HAL_GPIO_Init+0x2d0>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d00d      	beq.n	8003fbc <HAL_GPIO_Init+0x1cc>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a48      	ldr	r2, [pc, #288]	; (80040c4 <HAL_GPIO_Init+0x2d4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d007      	beq.n	8003fb8 <HAL_GPIO_Init+0x1c8>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a47      	ldr	r2, [pc, #284]	; (80040c8 <HAL_GPIO_Init+0x2d8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d101      	bne.n	8003fb4 <HAL_GPIO_Init+0x1c4>
 8003fb0:	2304      	movs	r3, #4
 8003fb2:	e008      	b.n	8003fc6 <HAL_GPIO_Init+0x1d6>
 8003fb4:	2307      	movs	r3, #7
 8003fb6:	e006      	b.n	8003fc6 <HAL_GPIO_Init+0x1d6>
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e004      	b.n	8003fc6 <HAL_GPIO_Init+0x1d6>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e002      	b.n	8003fc6 <HAL_GPIO_Init+0x1d6>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e000      	b.n	8003fc6 <HAL_GPIO_Init+0x1d6>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	f002 0203 	and.w	r2, r2, #3
 8003fcc:	0092      	lsls	r2, r2, #2
 8003fce:	4093      	lsls	r3, r2
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003fd6:	4938      	ldr	r1, [pc, #224]	; (80040b8 <HAL_GPIO_Init+0x2c8>)
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	089b      	lsrs	r3, r3, #2
 8003fdc:	3302      	adds	r3, #2
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fe4:	4b39      	ldr	r3, [pc, #228]	; (80040cc <HAL_GPIO_Init+0x2dc>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	43db      	mvns	r3, r3
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004008:	4a30      	ldr	r2, [pc, #192]	; (80040cc <HAL_GPIO_Init+0x2dc>)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800400e:	4b2f      	ldr	r3, [pc, #188]	; (80040cc <HAL_GPIO_Init+0x2dc>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	43db      	mvns	r3, r3
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4013      	ands	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d003      	beq.n	8004032 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4313      	orrs	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004032:	4a26      	ldr	r2, [pc, #152]	; (80040cc <HAL_GPIO_Init+0x2dc>)
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004038:	4b24      	ldr	r3, [pc, #144]	; (80040cc <HAL_GPIO_Init+0x2dc>)
 800403a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800403e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	43db      	mvns	r3, r3
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4013      	ands	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800405e:	4a1b      	ldr	r2, [pc, #108]	; (80040cc <HAL_GPIO_Init+0x2dc>)
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004066:	4b19      	ldr	r3, [pc, #100]	; (80040cc <HAL_GPIO_Init+0x2dc>)
 8004068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800406c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	43db      	mvns	r3, r3
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4013      	ands	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800408c:	4a0f      	ldr	r2, [pc, #60]	; (80040cc <HAL_GPIO_Init+0x2dc>)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	3301      	adds	r3, #1
 8004098:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	fa22 f303 	lsr.w	r3, r2, r3
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f47f aeab 	bne.w	8003e00 <HAL_GPIO_Init+0x10>
  }
}
 80040aa:	bf00      	nop
 80040ac:	bf00      	nop
 80040ae:	371c      	adds	r7, #28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	40010000 	.word	0x40010000
 80040bc:	48000400 	.word	0x48000400
 80040c0:	48000800 	.word	0x48000800
 80040c4:	48000c00 	.word	0x48000c00
 80040c8:	48001000 	.word	0x48001000
 80040cc:	58000800 	.word	0x58000800

080040d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	807b      	strh	r3, [r7, #2]
 80040dc:	4613      	mov	r3, r2
 80040de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040e0:	787b      	ldrb	r3, [r7, #1]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040e6:	887a      	ldrh	r2, [r7, #2]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040ec:	e002      	b.n	80040f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040ee:	887a      	ldrh	r2, [r7, #2]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	460b      	mov	r3, r1
 800410a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004112:	887a      	ldrh	r2, [r7, #2]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4013      	ands	r3, r2
 8004118:	041a      	lsls	r2, r3, #16
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	43d9      	mvns	r1, r3
 800411e:	887b      	ldrh	r3, [r7, #2]
 8004120:	400b      	ands	r3, r1
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	619a      	str	r2, [r3, #24]
}
 8004128:	bf00      	nop
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HSEM_SEMID(SemID));
  assert_param(IS_HSEM_PROCESSID(ProcessID));

  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK);
 800413e:	490e      	ldr	r1, [pc, #56]	; (8004178 <HAL_HSEM_Take+0x44>)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004146:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == (ProcessID | HSEM_CR_COREID_CURRENT | HSEM_R_LOCK))
 8004150:	4a09      	ldr	r2, [pc, #36]	; (8004178 <HAL_HSEM_Take+0x44>)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800415e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004162:	429a      	cmp	r2, r3
 8004164:	d101      	bne.n	800416a <HAL_HSEM_Take+0x36>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8004166:	2300      	movs	r3, #0
 8004168:	e000      	b.n	800416c <HAL_HSEM_Take+0x38>
  }

  /* Semaphore take fails*/
  return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	58001400 	.word	0x58001400

0800417c <HAL_HSEM_IsSemTaken>:
  * @brief  Check semaphore state Taken or not.
  * @param  SemID: semaphore ID
  * @retval HAL HSEM state
  */
uint32_t HAL_HSEM_IsSemTaken(uint32_t SemID)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  return (((HSEM->R[SemID] & HSEM_R_LOCK) != 0U) ? 1UL : 0UL);
 8004184:	4a07      	ldr	r2, [pc, #28]	; (80041a4 <HAL_HSEM_IsSemTaken+0x28>)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800418c:	2b00      	cmp	r3, #0
 800418e:	da01      	bge.n	8004194 <HAL_HSEM_IsSemTaken+0x18>
 8004190:	2301      	movs	r3, #1
 8004192:	e000      	b.n	8004196 <HAL_HSEM_IsSemTaken+0x1a>
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	58001400 	.word	0x58001400

080041a8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HSEM_SEMID(SemID));
  assert_param(IS_HSEM_PROCESSID(ProcessID));

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80041b2:	4906      	ldr	r1, [pc, #24]	; (80041cc <HAL_HSEM_Release+0x24>)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	58001400 	.word	0x58001400

080041d0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  HSEM_COMMON->IER |= SemMask;
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <HAL_HSEM_ActivateNotification+0x20>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	4904      	ldr	r1, [pc, #16]	; (80041f0 <HAL_HSEM_ActivateNotification+0x20>)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	600b      	str	r3, [r1, #0]
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	58001500 	.word	0x58001500

080041f4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80041fa:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <HAL_HSEM_IRQHandler+0x30>)
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004200:	4b08      	ldr	r3, [pc, #32]	; (8004224 <HAL_HSEM_IRQHandler+0x30>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	43db      	mvns	r3, r3
 8004208:	4906      	ldr	r1, [pc, #24]	; (8004224 <HAL_HSEM_IRQHandler+0x30>)
 800420a:	4013      	ands	r3, r2
 800420c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800420e:	4a05      	ldr	r2, [pc, #20]	; (8004224 <HAL_HSEM_IRQHandler+0x30>)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f807 	bl	8004228 <HAL_HSEM_FreeCallback>
}
 800421a:	bf00      	nop
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	58001500 	.word	0x58001500

08004228 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004244:	2300      	movs	r3, #0
 8004246:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d01e      	beq.n	800428c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800424e:	4b13      	ldr	r3, [pc, #76]	; (800429c <HAL_IPCC_Init+0x60>)
 8004250:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d102      	bne.n	8004264 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7fe fc2c 	bl	8002abc <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004264:	68b8      	ldr	r0, [r7, #8]
 8004266:	f000 f85b 	bl	8004320 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f82c 	bl	80042d4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800428a:	e001      	b.n	8004290 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004290:	7bfb      	ldrb	r3, [r7, #15]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	58000c00 	.word	0x58000c00

080042a0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	4613      	mov	r3, r2
 80042ac:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80042ae:	bf00      	nop
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b085      	sub	sp, #20
 80042be:	af00      	add	r7, sp, #0
 80042c0:	60f8      	str	r0, [r7, #12]
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	4613      	mov	r3, r2
 80042c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80042c8:	bf00      	nop
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80042dc:	2300      	movs	r3, #0
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	e00f      	b.n	8004302 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	4a0b      	ldr	r2, [pc, #44]	; (8004318 <IPCC_SetDefaultCallbacks+0x44>)
 80042ec:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	3306      	adds	r3, #6
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	4a08      	ldr	r2, [pc, #32]	; (800431c <IPCC_SetDefaultCallbacks+0x48>)
 80042fa:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	3301      	adds	r3, #1
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b05      	cmp	r3, #5
 8004306:	d9ec      	bls.n	80042e2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004308:	bf00      	nop
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	080042a1 	.word	0x080042a1
 800431c:	080042bb 	.word	0x080042bb

08004320 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004334:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	223f      	movs	r2, #63	; 0x3f
 800433a:	609a      	str	r2, [r3, #8]
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800434c:	4b05      	ldr	r3, [pc, #20]	; (8004364 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a04      	ldr	r2, [pc, #16]	; (8004364 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004356:	6013      	str	r3, [r2, #0]
}
 8004358:	bf00      	nop
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	58000400 	.word	0x58000400

08004368 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004368:	b480      	push	{r7}
 800436a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800436c:	4b04      	ldr	r3, [pc, #16]	; (8004380 <HAL_PWREx_GetVoltageRange+0x18>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004374:	4618      	mov	r0, r3
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	58000400 	.word	0x58000400

08004384 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004396:	d101      	bne.n	800439c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <LL_RCC_HSE_Enable>:
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80043ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ba:	6013      	str	r3, [r2, #0]
}
 80043bc:	bf00      	nop
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <LL_RCC_HSE_Disable>:
{
 80043c6:	b480      	push	{r7}
 80043c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80043ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d8:	6013      	str	r3, [r2, #0]
}
 80043da:	bf00      	nop
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <LL_RCC_HSE_IsReady>:
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80043e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043f6:	d101      	bne.n	80043fc <LL_RCC_HSE_IsReady+0x18>
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <LL_RCC_HSE_IsReady+0x1a>
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <LL_RCC_HSI_Enable>:
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800440c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800441a:	6013      	str	r3, [r2, #0]
}
 800441c:	bf00      	nop
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <LL_RCC_HSI_Disable>:
{
 8004426:	b480      	push	{r7}
 8004428:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800442a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004438:	6013      	str	r3, [r2, #0]
}
 800443a:	bf00      	nop
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <LL_RCC_HSI_IsReady>:
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004456:	d101      	bne.n	800445c <LL_RCC_HSI_IsReady+0x18>
 8004458:	2301      	movs	r3, #1
 800445a:	e000      	b.n	800445e <LL_RCC_HSI_IsReady+0x1a>
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	061b      	lsls	r3, r3, #24
 800447e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004482:	4313      	orrs	r3, r2
 8004484:	604b      	str	r3, [r1, #4]
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <LL_RCC_HSI48_Enable>:
{
 8004492:	b480      	push	{r7}
 8004494:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800449e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044a2:	f043 0301 	orr.w	r3, r3, #1
 80044a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80044aa:	bf00      	nop
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <LL_RCC_HSI48_Disable>:
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80044b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044c4:	f023 0301 	bic.w	r3, r3, #1
 80044c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80044cc:	bf00      	nop
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <LL_RCC_HSI48_IsReady>:
{
 80044d6:	b480      	push	{r7}
 80044d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80044da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d101      	bne.n	80044ee <LL_RCC_HSI48_IsReady+0x18>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <LL_RCC_HSI48_IsReady+0x1a>
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <LL_RCC_LSE_Enable>:
{
 80044fa:	b480      	push	{r7}
 80044fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80044fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004506:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800450a:	f043 0301 	orr.w	r3, r3, #1
 800450e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004512:	bf00      	nop
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <LL_RCC_LSE_Disable>:
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004528:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800452c:	f023 0301 	bic.w	r3, r3, #1
 8004530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004534:	bf00      	nop
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <LL_RCC_LSE_EnableBypass>:
{
 800453e:	b480      	push	{r7}
 8004540:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800454e:	f043 0304 	orr.w	r3, r3, #4
 8004552:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004556:	bf00      	nop
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <LL_RCC_LSE_DisableBypass>:
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004570:	f023 0304 	bic.w	r3, r3, #4
 8004574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004578:	bf00      	nop
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <LL_RCC_LSE_IsReady>:
{
 8004582:	b480      	push	{r7}
 8004584:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800458a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b02      	cmp	r3, #2
 8004594:	d101      	bne.n	800459a <LL_RCC_LSE_IsReady+0x18>
 8004596:	2301      	movs	r3, #1
 8004598:	e000      	b.n	800459c <LL_RCC_LSE_IsReady+0x1a>
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <LL_RCC_LSI1_Enable>:
{
 80045a6:	b480      	push	{r7}
 80045a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80045aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045b6:	f043 0301 	orr.w	r3, r3, #1
 80045ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80045be:	bf00      	nop
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <LL_RCC_LSI1_Disable>:
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80045cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045d8:	f023 0301 	bic.w	r3, r3, #1
 80045dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80045e0:	bf00      	nop
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <LL_RCC_LSI1_IsReady>:
{
 80045ea:	b480      	push	{r7}
 80045ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80045ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d101      	bne.n	8004602 <LL_RCC_LSI1_IsReady+0x18>
 80045fe:	2301      	movs	r3, #1
 8004600:	e000      	b.n	8004604 <LL_RCC_LSI1_IsReady+0x1a>
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <LL_RCC_LSI2_Enable>:
{
 800460e:	b480      	push	{r7}
 8004610:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800461a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800461e:	f043 0304 	orr.w	r3, r3, #4
 8004622:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004626:	bf00      	nop
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <LL_RCC_LSI2_Disable>:
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800463c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004640:	f023 0304 	bic.w	r3, r3, #4
 8004644:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004648:	bf00      	nop
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <LL_RCC_LSI2_IsReady>:
{
 8004652:	b480      	push	{r7}
 8004654:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800465a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b08      	cmp	r3, #8
 8004664:	d101      	bne.n	800466a <LL_RCC_LSI2_IsReady+0x18>
 8004666:	2301      	movs	r3, #1
 8004668:	e000      	b.n	800466c <LL_RCC_LSI2_IsReady+0x1a>
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <LL_RCC_LSI2_SetTrimming>:
{
 8004676:	b480      	push	{r7}
 8004678:	b083      	sub	sp, #12
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800467e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004686:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	021b      	lsls	r3, r3, #8
 800468e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <LL_RCC_MSI_Enable>:
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80046a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046b2:	f043 0301 	orr.w	r3, r3, #1
 80046b6:	6013      	str	r3, [r2, #0]
}
 80046b8:	bf00      	nop
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <LL_RCC_MSI_Disable>:
{
 80046c2:	b480      	push	{r7}
 80046c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80046c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046d0:	f023 0301 	bic.w	r3, r3, #1
 80046d4:	6013      	str	r3, [r2, #0]
}
 80046d6:	bf00      	nop
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <LL_RCC_MSI_IsReady>:
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80046e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d101      	bne.n	80046f6 <LL_RCC_MSI_IsReady+0x16>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e000      	b.n	80046f8 <LL_RCC_MSI_IsReady+0x18>
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <LL_RCC_MSI_SetRange>:
{
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800470a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004714:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4313      	orrs	r3, r2
 800471c:	600b      	str	r3, [r1, #0]
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <LL_RCC_MSI_GetRange>:
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800473a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2bb0      	cmp	r3, #176	; 0xb0
 8004740:	d901      	bls.n	8004746 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004742:	23b0      	movs	r3, #176	; 0xb0
 8004744:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004746:	687b      	ldr	r3, [r7, #4]
}
 8004748:	4618      	mov	r0, r3
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800475c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	021b      	lsls	r3, r3, #8
 800476a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800476e:	4313      	orrs	r3, r2
 8004770:	604b      	str	r3, [r1, #4]
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <LL_RCC_SetSysClkSource>:
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f023 0203 	bic.w	r2, r3, #3
 8004790:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4313      	orrs	r3, r2
 8004798:	608b      	str	r3, [r1, #8]
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <LL_RCC_GetSysClkSource>:
{
 80047a6:	b480      	push	{r7}
 80047a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80047aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f003 030c 	and.w	r3, r3, #12
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <LL_RCC_SetAHBPrescaler>:
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80047c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	608b      	str	r3, [r1, #8]
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80047ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80047f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4313      	orrs	r3, r2
 8004802:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <LL_RCC_SetAHB4Prescaler>:
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800481a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800481e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004822:	f023 020f 	bic.w	r2, r3, #15
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	091b      	lsrs	r3, r3, #4
 800482a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <LL_RCC_SetAPB1Prescaler>:
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004852:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4313      	orrs	r3, r2
 800485a:	608b      	str	r3, [r1, #8]
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <LL_RCC_SetAPB2Prescaler>:
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800487a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4313      	orrs	r3, r2
 8004882:	608b      	str	r3, [r1, #8]
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <LL_RCC_GetAHBPrescaler>:
{
 8004890:	b480      	push	{r7}
 8004892:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <LL_RCC_GetAHB4Prescaler>:
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80048ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <LL_RCC_GetAPB1Prescaler>:
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80048c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <LL_RCC_GetAPB2Prescaler>:
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80048e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80048f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004906:	6013      	str	r3, [r2, #0]
}
 8004908:	bf00      	nop
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004912:	b480      	push	{r7}
 8004914:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004920:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004924:	6013      	str	r3, [r2, #0]
}
 8004926:	bf00      	nop
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004942:	d101      	bne.n	8004948 <LL_RCC_PLL_IsReady+0x18>
 8004944:	2301      	movs	r3, #1
 8004946:	e000      	b.n	800494a <LL_RCC_PLL_IsReady+0x1a>
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	0a1b      	lsrs	r3, r3, #8
 8004960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004964:	4618      	mov	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800496e:	b480      	push	{r7}
 8004970:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800497c:	4618      	mov	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004986:	b480      	push	{r7}
 8004988:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800498a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004994:	4618      	mov	r0, r3
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800499e:	b480      	push	{r7}
 80049a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80049a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f003 0303 	and.w	r3, r3, #3
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80049b6:	b480      	push	{r7}
 80049b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80049ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c8:	d101      	bne.n	80049ce <LL_RCC_IsActiveFlag_HPRE+0x18>
 80049ca:	2301      	movs	r3, #1
 80049cc:	e000      	b.n	80049d0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80049da:	b480      	push	{r7}
 80049dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80049de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049ee:	d101      	bne.n	80049f4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a08:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a14:	d101      	bne.n	8004a1a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004a16:	2301      	movs	r3, #1
 8004a18:	e000      	b.n	8004a1c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004a26:	b480      	push	{r7}
 8004a28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a38:	d101      	bne.n	8004a3e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e000      	b.n	8004a40 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a5c:	d101      	bne.n	8004a62 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e000      	b.n	8004a64 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
	...

08004a70 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a70:	b590      	push	{r4, r7, lr}
 8004a72:	b08d      	sub	sp, #52	; 0x34
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e363      	b.n	800514a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0320 	and.w	r3, r3, #32
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 808d 	beq.w	8004baa <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a90:	f7ff fe89 	bl	80047a6 <LL_RCC_GetSysClkSource>
 8004a94:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a96:	f7ff ff82 	bl	800499e <LL_RCC_PLL_GetMainSource>
 8004a9a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d005      	beq.n	8004aae <HAL_RCC_OscConfig+0x3e>
 8004aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa4:	2b0c      	cmp	r3, #12
 8004aa6:	d147      	bne.n	8004b38 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d144      	bne.n	8004b38 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e347      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004abe:	f7ff fe34 	bl	800472a <LL_RCC_MSI_GetRange>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	429c      	cmp	r4, r3
 8004ac6:	d914      	bls.n	8004af2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fd2f 	bl	8005530 <RCC_SetFlashLatencyFromMSIRange>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e336      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7ff fe0e 	bl	8004702 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff fe32 	bl	8004754 <LL_RCC_MSI_SetCalibTrimming>
 8004af0:	e013      	b.n	8004b1a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff fe03 	bl	8004702 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7ff fe27 	bl	8004754 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fd10 	bl	8005530 <RCC_SetFlashLatencyFromMSIRange>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e317      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004b1a:	f000 fcc9 	bl	80054b0 <HAL_RCC_GetHCLKFreq>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	4aa4      	ldr	r2, [pc, #656]	; (8004db4 <HAL_RCC_OscConfig+0x344>)
 8004b22:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b24:	4ba4      	ldr	r3, [pc, #656]	; (8004db8 <HAL_RCC_OscConfig+0x348>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fe faf3 	bl	8003114 <HAL_InitTick>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d039      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e308      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d01e      	beq.n	8004b7e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004b40:	f7ff fdb0 	bl	80046a4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b44:	f7fe fb34 	bl	80031b0 <HAL_GetTick>
 8004b48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b4c:	f7fe fb30 	bl	80031b0 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e2f5      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004b5e:	f7ff fdbf 	bl	80046e0 <LL_RCC_MSI_IsReady>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0f1      	beq.n	8004b4c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7ff fdc8 	bl	8004702 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7ff fdec 	bl	8004754 <LL_RCC_MSI_SetCalibTrimming>
 8004b7c:	e015      	b.n	8004baa <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b7e:	f7ff fda0 	bl	80046c2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b82:	f7fe fb15 	bl	80031b0 <HAL_GetTick>
 8004b86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004b88:	e008      	b.n	8004b9c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b8a:	f7fe fb11 	bl	80031b0 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e2d6      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004b9c:	f7ff fda0 	bl	80046e0 <LL_RCC_MSI_IsReady>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1f1      	bne.n	8004b8a <HAL_RCC_OscConfig+0x11a>
 8004ba6:	e000      	b.n	8004baa <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004ba8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d047      	beq.n	8004c46 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bb6:	f7ff fdf6 	bl	80047a6 <LL_RCC_GetSysClkSource>
 8004bba:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bbc:	f7ff feef 	bl	800499e <LL_RCC_PLL_GetMainSource>
 8004bc0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d005      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x164>
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	2b0c      	cmp	r3, #12
 8004bcc:	d108      	bne.n	8004be0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d105      	bne.n	8004be0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d134      	bne.n	8004c46 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e2b4      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be8:	d102      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x180>
 8004bea:	f7ff fbdd 	bl	80043a8 <LL_RCC_HSE_Enable>
 8004bee:	e001      	b.n	8004bf4 <HAL_RCC_OscConfig+0x184>
 8004bf0:	f7ff fbe9 	bl	80043c6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d012      	beq.n	8004c22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfc:	f7fe fad8 	bl	80031b0 <HAL_GetTick>
 8004c00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c04:	f7fe fad4 	bl	80031b0 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b64      	cmp	r3, #100	; 0x64
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e299      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004c16:	f7ff fbe5 	bl	80043e4 <LL_RCC_HSE_IsReady>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0f1      	beq.n	8004c04 <HAL_RCC_OscConfig+0x194>
 8004c20:	e011      	b.n	8004c46 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c22:	f7fe fac5 	bl	80031b0 <HAL_GetTick>
 8004c26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004c28:	e008      	b.n	8004c3c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c2a:	f7fe fac1 	bl	80031b0 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b64      	cmp	r3, #100	; 0x64
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e286      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004c3c:	f7ff fbd2 	bl	80043e4 <LL_RCC_HSE_IsReady>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f1      	bne.n	8004c2a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d04c      	beq.n	8004cec <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c52:	f7ff fda8 	bl	80047a6 <LL_RCC_GetSysClkSource>
 8004c56:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c58:	f7ff fea1 	bl	800499e <LL_RCC_PLL_GetMainSource>
 8004c5c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	d005      	beq.n	8004c70 <HAL_RCC_OscConfig+0x200>
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	2b0c      	cmp	r3, #12
 8004c68:	d10e      	bne.n	8004c88 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d10b      	bne.n	8004c88 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e266      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff fbf1 	bl	8004468 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004c86:	e031      	b.n	8004cec <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d019      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c90:	f7ff fbba 	bl	8004408 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c94:	f7fe fa8c 	bl	80031b0 <HAL_GetTick>
 8004c98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c9c:	f7fe fa88 	bl	80031b0 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e24d      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004cae:	f7ff fbc9 	bl	8004444 <LL_RCC_HSI_IsReady>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0f1      	beq.n	8004c9c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7ff fbd3 	bl	8004468 <LL_RCC_HSI_SetCalibTrimming>
 8004cc2:	e013      	b.n	8004cec <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cc4:	f7ff fbaf 	bl	8004426 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc8:	f7fe fa72 	bl	80031b0 <HAL_GetTick>
 8004ccc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cd0:	f7fe fa6e 	bl	80031b0 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e233      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004ce2:	f7ff fbaf 	bl	8004444 <LL_RCC_HSI_IsReady>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1f1      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0308 	and.w	r3, r3, #8
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d106      	bne.n	8004d06 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 80a3 	beq.w	8004e4c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d076      	beq.n	8004dfc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0310 	and.w	r3, r3, #16
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d046      	beq.n	8004da8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004d1a:	f7ff fc66 	bl	80045ea <LL_RCC_LSI1_IsReady>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d113      	bne.n	8004d4c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004d24:	f7ff fc3f 	bl	80045a6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d28:	f7fe fa42 	bl	80031b0 <HAL_GetTick>
 8004d2c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004d2e:	e008      	b.n	8004d42 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004d30:	f7fe fa3e 	bl	80031b0 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e203      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004d42:	f7ff fc52 	bl	80045ea <LL_RCC_LSI1_IsReady>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d0f1      	beq.n	8004d30 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004d4c:	f7ff fc5f 	bl	800460e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d50:	f7fe fa2e 	bl	80031b0 <HAL_GetTick>
 8004d54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004d58:	f7fe fa2a 	bl	80031b0 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b03      	cmp	r3, #3
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e1ef      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004d6a:	f7ff fc72 	bl	8004652 <LL_RCC_LSI2_IsReady>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0f1      	beq.n	8004d58 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff fc7c 	bl	8004676 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004d7e:	f7ff fc23 	bl	80045c8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d82:	f7fe fa15 	bl	80031b0 <HAL_GetTick>
 8004d86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004d8a:	f7fe fa11 	bl	80031b0 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e1d6      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004d9c:	f7ff fc25 	bl	80045ea <LL_RCC_LSI1_IsReady>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1f1      	bne.n	8004d8a <HAL_RCC_OscConfig+0x31a>
 8004da6:	e051      	b.n	8004e4c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004da8:	f7ff fbfd 	bl	80045a6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dac:	f7fe fa00 	bl	80031b0 <HAL_GetTick>
 8004db0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004db2:	e00c      	b.n	8004dce <HAL_RCC_OscConfig+0x35e>
 8004db4:	20000008 	.word	0x20000008
 8004db8:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004dbc:	f7fe f9f8 	bl	80031b0 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e1bd      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004dce:	f7ff fc0c 	bl	80045ea <LL_RCC_LSI1_IsReady>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0f1      	beq.n	8004dbc <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004dd8:	f7ff fc2a 	bl	8004630 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004dde:	f7fe f9e7 	bl	80031b0 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b03      	cmp	r3, #3
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e1ac      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004df0:	f7ff fc2f 	bl	8004652 <LL_RCC_LSI2_IsReady>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1f1      	bne.n	8004dde <HAL_RCC_OscConfig+0x36e>
 8004dfa:	e027      	b.n	8004e4c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004dfc:	f7ff fc18 	bl	8004630 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e00:	f7fe f9d6 	bl	80031b0 <HAL_GetTick>
 8004e04:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004e08:	f7fe f9d2 	bl	80031b0 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b03      	cmp	r3, #3
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e197      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004e1a:	f7ff fc1a 	bl	8004652 <LL_RCC_LSI2_IsReady>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1f1      	bne.n	8004e08 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004e24:	f7ff fbd0 	bl	80045c8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e28:	f7fe f9c2 	bl	80031b0 <HAL_GetTick>
 8004e2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004e30:	f7fe f9be 	bl	80031b0 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e183      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004e42:	f7ff fbd2 	bl	80045ea <LL_RCC_LSI1_IsReady>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1f1      	bne.n	8004e30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d05b      	beq.n	8004f10 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e58:	4ba7      	ldr	r3, [pc, #668]	; (80050f8 <HAL_RCC_OscConfig+0x688>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d114      	bne.n	8004e8e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004e64:	f7ff fa70 	bl	8004348 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e68:	f7fe f9a2 	bl	80031b0 <HAL_GetTick>
 8004e6c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e70:	f7fe f99e 	bl	80031b0 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e163      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e82:	4b9d      	ldr	r3, [pc, #628]	; (80050f8 <HAL_RCC_OscConfig+0x688>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0f0      	beq.n	8004e70 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d102      	bne.n	8004e9c <HAL_RCC_OscConfig+0x42c>
 8004e96:	f7ff fb30 	bl	80044fa <LL_RCC_LSE_Enable>
 8004e9a:	e00c      	b.n	8004eb6 <HAL_RCC_OscConfig+0x446>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	2b05      	cmp	r3, #5
 8004ea2:	d104      	bne.n	8004eae <HAL_RCC_OscConfig+0x43e>
 8004ea4:	f7ff fb4b 	bl	800453e <LL_RCC_LSE_EnableBypass>
 8004ea8:	f7ff fb27 	bl	80044fa <LL_RCC_LSE_Enable>
 8004eac:	e003      	b.n	8004eb6 <HAL_RCC_OscConfig+0x446>
 8004eae:	f7ff fb35 	bl	800451c <LL_RCC_LSE_Disable>
 8004eb2:	f7ff fb55 	bl	8004560 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d014      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ebe:	f7fe f977 	bl	80031b0 <HAL_GetTick>
 8004ec2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004ec4:	e00a      	b.n	8004edc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec6:	f7fe f973 	bl	80031b0 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e136      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004edc:	f7ff fb51 	bl	8004582 <LL_RCC_LSE_IsReady>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0ef      	beq.n	8004ec6 <HAL_RCC_OscConfig+0x456>
 8004ee6:	e013      	b.n	8004f10 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee8:	f7fe f962 	bl	80031b0 <HAL_GetTick>
 8004eec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004eee:	e00a      	b.n	8004f06 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef0:	f7fe f95e 	bl	80031b0 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e121      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004f06:	f7ff fb3c 	bl	8004582 <LL_RCC_LSE_IsReady>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1ef      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d02c      	beq.n	8004f76 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d014      	beq.n	8004f4e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f24:	f7ff fab5 	bl	8004492 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f28:	f7fe f942 	bl	80031b0 <HAL_GetTick>
 8004f2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f30:	f7fe f93e 	bl	80031b0 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e103      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004f42:	f7ff fac8 	bl	80044d6 <LL_RCC_HSI48_IsReady>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0f1      	beq.n	8004f30 <HAL_RCC_OscConfig+0x4c0>
 8004f4c:	e013      	b.n	8004f76 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004f4e:	f7ff fab1 	bl	80044b4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f52:	f7fe f92d 	bl	80031b0 <HAL_GetTick>
 8004f56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f5a:	f7fe f929 	bl	80031b0 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e0ee      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004f6c:	f7ff fab3 	bl	80044d6 <LL_RCC_HSI48_IsReady>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f1      	bne.n	8004f5a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 80e4 	beq.w	8005148 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f80:	f7ff fc11 	bl	80047a6 <LL_RCC_GetSysClkSource>
 8004f84:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	f040 80b4 	bne.w	8005100 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f003 0203 	and.w	r2, r3, #3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d123      	bne.n	8004fee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d11c      	bne.n	8004fee <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	0a1b      	lsrs	r3, r3, #8
 8004fb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d114      	bne.n	8004fee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d10d      	bne.n	8004fee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d106      	bne.n	8004fee <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d05d      	beq.n	80050aa <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	2b0c      	cmp	r3, #12
 8004ff2:	d058      	beq.n	80050a6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e0a1      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005006:	f7ff fc84 	bl	8004912 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800500a:	f7fe f8d1 	bl	80031b0 <HAL_GetTick>
 800500e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005012:	f7fe f8cd 	bl	80031b0 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e092      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1ef      	bne.n	8005012 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005036:	68da      	ldr	r2, [r3, #12]
 8005038:	4b30      	ldr	r3, [pc, #192]	; (80050fc <HAL_RCC_OscConfig+0x68c>)
 800503a:	4013      	ands	r3, r2
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005044:	4311      	orrs	r1, r2
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800504a:	0212      	lsls	r2, r2, #8
 800504c:	4311      	orrs	r1, r2
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005052:	4311      	orrs	r1, r2
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005058:	4311      	orrs	r1, r2
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800505e:	430a      	orrs	r2, r1
 8005060:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005064:	4313      	orrs	r3, r2
 8005066:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005068:	f7ff fc44 	bl	80048f4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800506c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800507a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800507c:	f7fe f898 	bl	80031b0 <HAL_GetTick>
 8005080:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005084:	f7fe f894 	bl	80031b0 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e059      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d0ef      	beq.n	8005084 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050a4:	e050      	b.n	8005148 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e04f      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d147      	bne.n	8005148 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80050b8:	f7ff fc1c 	bl	80048f4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050cc:	f7fe f870 	bl	80031b0 <HAL_GetTick>
 80050d0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050d4:	f7fe f86c 	bl	80031b0 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e031      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0ef      	beq.n	80050d4 <HAL_RCC_OscConfig+0x664>
 80050f4:	e028      	b.n	8005148 <HAL_RCC_OscConfig+0x6d8>
 80050f6:	bf00      	nop
 80050f8:	58000400 	.word	0x58000400
 80050fc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	2b0c      	cmp	r3, #12
 8005104:	d01e      	beq.n	8005144 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005106:	f7ff fc04 	bl	8004912 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510a:	f7fe f851 	bl	80031b0 <HAL_GetTick>
 800510e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005110:	e008      	b.n	8005124 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005112:	f7fe f84d 	bl	80031b0 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e012      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1ef      	bne.n	8005112 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800513c:	4b05      	ldr	r3, [pc, #20]	; (8005154 <HAL_RCC_OscConfig+0x6e4>)
 800513e:	4013      	ands	r3, r2
 8005140:	60cb      	str	r3, [r1, #12]
 8005142:	e001      	b.n	8005148 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e000      	b.n	800514a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3734      	adds	r7, #52	; 0x34
 800514e:	46bd      	mov	sp, r7
 8005150:	bd90      	pop	{r4, r7, pc}
 8005152:	bf00      	nop
 8005154:	eefefffc 	.word	0xeefefffc

08005158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e12d      	b.n	80053c8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800516c:	4b98      	ldr	r3, [pc, #608]	; (80053d0 <HAL_RCC_ClockConfig+0x278>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d91b      	bls.n	80051b2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517a:	4b95      	ldr	r3, [pc, #596]	; (80053d0 <HAL_RCC_ClockConfig+0x278>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f023 0207 	bic.w	r2, r3, #7
 8005182:	4993      	ldr	r1, [pc, #588]	; (80053d0 <HAL_RCC_ClockConfig+0x278>)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	4313      	orrs	r3, r2
 8005188:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800518a:	f7fe f811 	bl	80031b0 <HAL_GetTick>
 800518e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005190:	e008      	b.n	80051a4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005192:	f7fe f80d 	bl	80031b0 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e111      	b.n	80053c8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a4:	4b8a      	ldr	r3, [pc, #552]	; (80053d0 <HAL_RCC_ClockConfig+0x278>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d1ef      	bne.n	8005192 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d016      	beq.n	80051ec <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7ff fafb 	bl	80047be <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80051c8:	f7fd fff2 	bl	80031b0 <HAL_GetTick>
 80051cc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80051d0:	f7fd ffee 	bl	80031b0 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e0f2      	b.n	80053c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80051e2:	f7ff fbe8 	bl	80049b6 <LL_RCC_IsActiveFlag_HPRE>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0f1      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0320 	and.w	r3, r3, #32
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d016      	beq.n	8005226 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7ff faf2 	bl	80047e6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005202:	f7fd ffd5 	bl	80031b0 <HAL_GetTick>
 8005206:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005208:	e008      	b.n	800521c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800520a:	f7fd ffd1 	bl	80031b0 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e0d5      	b.n	80053c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800521c:	f7ff fbdd 	bl	80049da <LL_RCC_IsActiveFlag_C2HPRE>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d0f1      	beq.n	800520a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800522e:	2b00      	cmp	r3, #0
 8005230:	d016      	beq.n	8005260 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	4618      	mov	r0, r3
 8005238:	f7ff faeb 	bl	8004812 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800523c:	f7fd ffb8 	bl	80031b0 <HAL_GetTick>
 8005240:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005242:	e008      	b.n	8005256 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005244:	f7fd ffb4 	bl	80031b0 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e0b8      	b.n	80053c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005256:	f7ff fbd3 	bl	8004a00 <LL_RCC_IsActiveFlag_SHDHPRE>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0f1      	beq.n	8005244 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b00      	cmp	r3, #0
 800526a:	d016      	beq.n	800529a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	4618      	mov	r0, r3
 8005272:	f7ff fae5 	bl	8004840 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005276:	f7fd ff9b 	bl	80031b0 <HAL_GetTick>
 800527a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800527c:	e008      	b.n	8005290 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800527e:	f7fd ff97 	bl	80031b0 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d901      	bls.n	8005290 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e09b      	b.n	80053c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005290:	f7ff fbc9 	bl	8004a26 <LL_RCC_IsActiveFlag_PPRE1>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0f1      	beq.n	800527e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d017      	beq.n	80052d6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7ff fadb 	bl	8004868 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80052b2:	f7fd ff7d 	bl	80031b0 <HAL_GetTick>
 80052b6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80052b8:	e008      	b.n	80052cc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80052ba:	f7fd ff79 	bl	80031b0 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e07d      	b.n	80053c8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80052cc:	f7ff fbbd 	bl	8004a4a <LL_RCC_IsActiveFlag_PPRE2>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0f1      	beq.n	80052ba <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d043      	beq.n	800536a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d106      	bne.n	80052f8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80052ea:	f7ff f87b 	bl	80043e4 <LL_RCC_HSE_IsReady>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d11e      	bne.n	8005332 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e067      	b.n	80053c8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	2b03      	cmp	r3, #3
 80052fe:	d106      	bne.n	800530e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005300:	f7ff fb16 	bl	8004930 <LL_RCC_PLL_IsReady>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d113      	bne.n	8005332 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e05c      	b.n	80053c8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d106      	bne.n	8005324 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005316:	f7ff f9e3 	bl	80046e0 <LL_RCC_MSI_IsReady>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d108      	bne.n	8005332 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e051      	b.n	80053c8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005324:	f7ff f88e 	bl	8004444 <LL_RCC_HSI_IsReady>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e04a      	b.n	80053c8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	4618      	mov	r0, r3
 8005338:	f7ff fa21 	bl	800477e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800533c:	f7fd ff38 	bl	80031b0 <HAL_GetTick>
 8005340:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005342:	e00a      	b.n	800535a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005344:	f7fd ff34 	bl	80031b0 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005352:	4293      	cmp	r3, r2
 8005354:	d901      	bls.n	800535a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e036      	b.n	80053c8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800535a:	f7ff fa24 	bl	80047a6 <LL_RCC_GetSysClkSource>
 800535e:	4602      	mov	r2, r0
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	429a      	cmp	r2, r3
 8005368:	d1ec      	bne.n	8005344 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800536a:	4b19      	ldr	r3, [pc, #100]	; (80053d0 <HAL_RCC_ClockConfig+0x278>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	429a      	cmp	r2, r3
 8005376:	d21b      	bcs.n	80053b0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005378:	4b15      	ldr	r3, [pc, #84]	; (80053d0 <HAL_RCC_ClockConfig+0x278>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f023 0207 	bic.w	r2, r3, #7
 8005380:	4913      	ldr	r1, [pc, #76]	; (80053d0 <HAL_RCC_ClockConfig+0x278>)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	4313      	orrs	r3, r2
 8005386:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005388:	f7fd ff12 	bl	80031b0 <HAL_GetTick>
 800538c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800538e:	e008      	b.n	80053a2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005390:	f7fd ff0e 	bl	80031b0 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e012      	b.n	80053c8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a2:	4b0b      	ldr	r3, [pc, #44]	; (80053d0 <HAL_RCC_ClockConfig+0x278>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d1ef      	bne.n	8005390 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80053b0:	f000 f87e 	bl	80054b0 <HAL_RCC_GetHCLKFreq>
 80053b4:	4603      	mov	r3, r0
 80053b6:	4a07      	ldr	r2, [pc, #28]	; (80053d4 <HAL_RCC_ClockConfig+0x27c>)
 80053b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80053ba:	f7fd ff05 	bl	80031c8 <HAL_GetTickPrio>
 80053be:	4603      	mov	r3, r0
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7fd fea7 	bl	8003114 <HAL_InitTick>
 80053c6:	4603      	mov	r3, r0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	58004000 	.word	0x58004000
 80053d4:	20000008 	.word	0x20000008

080053d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053d8:	b590      	push	{r4, r7, lr}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053de:	f7ff f9e2 	bl	80047a6 <LL_RCC_GetSysClkSource>
 80053e2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10a      	bne.n	8005400 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80053ea:	f7ff f99e 	bl	800472a <LL_RCC_MSI_GetRange>
 80053ee:	4603      	mov	r3, r0
 80053f0:	091b      	lsrs	r3, r3, #4
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	4a2b      	ldr	r2, [pc, #172]	; (80054a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80053f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053fc:	60fb      	str	r3, [r7, #12]
 80053fe:	e04b      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b04      	cmp	r3, #4
 8005404:	d102      	bne.n	800540c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005406:	4b28      	ldr	r3, [pc, #160]	; (80054a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	e045      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b08      	cmp	r3, #8
 8005410:	d10a      	bne.n	8005428 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005412:	f7fe ffb7 	bl	8004384 <LL_RCC_HSE_IsEnabledDiv2>
 8005416:	4603      	mov	r3, r0
 8005418:	2b01      	cmp	r3, #1
 800541a:	d102      	bne.n	8005422 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800541c:	4b22      	ldr	r3, [pc, #136]	; (80054a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	e03a      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005422:	4b22      	ldr	r3, [pc, #136]	; (80054ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	e037      	b.n	8005498 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005428:	f7ff fab9 	bl	800499e <LL_RCC_PLL_GetMainSource>
 800542c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b02      	cmp	r3, #2
 8005432:	d003      	beq.n	800543c <HAL_RCC_GetSysClockFreq+0x64>
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	2b03      	cmp	r3, #3
 8005438:	d003      	beq.n	8005442 <HAL_RCC_GetSysClockFreq+0x6a>
 800543a:	e00d      	b.n	8005458 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800543c:	4b1a      	ldr	r3, [pc, #104]	; (80054a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800543e:	60bb      	str	r3, [r7, #8]
        break;
 8005440:	e015      	b.n	800546e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005442:	f7fe ff9f 	bl	8004384 <LL_RCC_HSE_IsEnabledDiv2>
 8005446:	4603      	mov	r3, r0
 8005448:	2b01      	cmp	r3, #1
 800544a:	d102      	bne.n	8005452 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800544c:	4b16      	ldr	r3, [pc, #88]	; (80054a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800544e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005450:	e00d      	b.n	800546e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005452:	4b16      	ldr	r3, [pc, #88]	; (80054ac <HAL_RCC_GetSysClockFreq+0xd4>)
 8005454:	60bb      	str	r3, [r7, #8]
        break;
 8005456:	e00a      	b.n	800546e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005458:	f7ff f967 	bl	800472a <LL_RCC_MSI_GetRange>
 800545c:	4603      	mov	r3, r0
 800545e:	091b      	lsrs	r3, r3, #4
 8005460:	f003 030f 	and.w	r3, r3, #15
 8005464:	4a0f      	ldr	r2, [pc, #60]	; (80054a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800546a:	60bb      	str	r3, [r7, #8]
        break;
 800546c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800546e:	f7ff fa71 	bl	8004954 <LL_RCC_PLL_GetN>
 8005472:	4602      	mov	r2, r0
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	fb03 f402 	mul.w	r4, r3, r2
 800547a:	f7ff fa84 	bl	8004986 <LL_RCC_PLL_GetDivider>
 800547e:	4603      	mov	r3, r0
 8005480:	091b      	lsrs	r3, r3, #4
 8005482:	3301      	adds	r3, #1
 8005484:	fbb4 f4f3 	udiv	r4, r4, r3
 8005488:	f7ff fa71 	bl	800496e <LL_RCC_PLL_GetR>
 800548c:	4603      	mov	r3, r0
 800548e:	0f5b      	lsrs	r3, r3, #29
 8005490:	3301      	adds	r3, #1
 8005492:	fbb4 f3f3 	udiv	r3, r4, r3
 8005496:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005498:	68fb      	ldr	r3, [r7, #12]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd90      	pop	{r4, r7, pc}
 80054a2:	bf00      	nop
 80054a4:	080101ec 	.word	0x080101ec
 80054a8:	00f42400 	.word	0x00f42400
 80054ac:	01e84800 	.word	0x01e84800

080054b0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054b0:	b598      	push	{r3, r4, r7, lr}
 80054b2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80054b4:	f7ff ff90 	bl	80053d8 <HAL_RCC_GetSysClockFreq>
 80054b8:	4604      	mov	r4, r0
 80054ba:	f7ff f9e9 	bl	8004890 <LL_RCC_GetAHBPrescaler>
 80054be:	4603      	mov	r3, r0
 80054c0:	091b      	lsrs	r3, r3, #4
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	4a03      	ldr	r2, [pc, #12]	; (80054d4 <HAL_RCC_GetHCLKFreq+0x24>)
 80054c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054cc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	bd98      	pop	{r3, r4, r7, pc}
 80054d4:	0801018c 	.word	0x0801018c

080054d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054d8:	b598      	push	{r3, r4, r7, lr}
 80054da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80054dc:	f7ff ffe8 	bl	80054b0 <HAL_RCC_GetHCLKFreq>
 80054e0:	4604      	mov	r4, r0
 80054e2:	f7ff f9ef 	bl	80048c4 <LL_RCC_GetAPB1Prescaler>
 80054e6:	4603      	mov	r3, r0
 80054e8:	0a1b      	lsrs	r3, r3, #8
 80054ea:	f003 0307 	and.w	r3, r3, #7
 80054ee:	4a04      	ldr	r2, [pc, #16]	; (8005500 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054f4:	f003 031f 	and.w	r3, r3, #31
 80054f8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	bd98      	pop	{r3, r4, r7, pc}
 8005500:	080101cc 	.word	0x080101cc

08005504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005504:	b598      	push	{r3, r4, r7, lr}
 8005506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005508:	f7ff ffd2 	bl	80054b0 <HAL_RCC_GetHCLKFreq>
 800550c:	4604      	mov	r4, r0
 800550e:	f7ff f9e5 	bl	80048dc <LL_RCC_GetAPB2Prescaler>
 8005512:	4603      	mov	r3, r0
 8005514:	0adb      	lsrs	r3, r3, #11
 8005516:	f003 0307 	and.w	r3, r3, #7
 800551a:	4a04      	ldr	r2, [pc, #16]	; (800552c <HAL_RCC_GetPCLK2Freq+0x28>)
 800551c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005520:	f003 031f 	and.w	r3, r3, #31
 8005524:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005528:	4618      	mov	r0, r3
 800552a:	bd98      	pop	{r3, r4, r7, pc}
 800552c:	080101cc 	.word	0x080101cc

08005530 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005530:	b590      	push	{r4, r7, lr}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2bb0      	cmp	r3, #176	; 0xb0
 800553c:	d903      	bls.n	8005546 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800553e:	4b15      	ldr	r3, [pc, #84]	; (8005594 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	e007      	b.n	8005556 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	091b      	lsrs	r3, r3, #4
 800554a:	f003 030f 	and.w	r3, r3, #15
 800554e:	4a11      	ldr	r2, [pc, #68]	; (8005594 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005554:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005556:	f7ff f9a7 	bl	80048a8 <LL_RCC_GetAHB4Prescaler>
 800555a:	4603      	mov	r3, r0
 800555c:	091b      	lsrs	r3, r3, #4
 800555e:	f003 030f 	and.w	r3, r3, #15
 8005562:	4a0d      	ldr	r2, [pc, #52]	; (8005598 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	fbb2 f3f3 	udiv	r3, r2, r3
 800556e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	4a0a      	ldr	r2, [pc, #40]	; (800559c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005574:	fba2 2303 	umull	r2, r3, r2, r3
 8005578:	0c9c      	lsrs	r4, r3, #18
 800557a:	f7fe fef5 	bl	8004368 <HAL_PWREx_GetVoltageRange>
 800557e:	4603      	mov	r3, r0
 8005580:	4619      	mov	r1, r3
 8005582:	4620      	mov	r0, r4
 8005584:	f000 f80c 	bl	80055a0 <RCC_SetFlashLatency>
 8005588:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	bd90      	pop	{r4, r7, pc}
 8005592:	bf00      	nop
 8005594:	080101ec 	.word	0x080101ec
 8005598:	0801018c 	.word	0x0801018c
 800559c:	431bde83 	.word	0x431bde83

080055a0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80055a0:	b590      	push	{r4, r7, lr}
 80055a2:	b093      	sub	sp, #76	; 0x4c
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80055aa:	4b37      	ldr	r3, [pc, #220]	; (8005688 <RCC_SetFlashLatency+0xe8>)
 80055ac:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80055b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80055b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80055b6:	4a35      	ldr	r2, [pc, #212]	; (800568c <RCC_SetFlashLatency+0xec>)
 80055b8:	f107 031c 	add.w	r3, r7, #28
 80055bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80055be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80055c2:	4b33      	ldr	r3, [pc, #204]	; (8005690 <RCC_SetFlashLatency+0xf0>)
 80055c4:	f107 040c 	add.w	r4, r7, #12
 80055c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80055ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80055ce:	2300      	movs	r3, #0
 80055d0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d8:	d11a      	bne.n	8005610 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80055da:	2300      	movs	r3, #0
 80055dc:	643b      	str	r3, [r7, #64]	; 0x40
 80055de:	e013      	b.n	8005608 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80055e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	3348      	adds	r3, #72	; 0x48
 80055e6:	443b      	add	r3, r7
 80055e8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d807      	bhi.n	8005602 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80055f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	3348      	adds	r3, #72	; 0x48
 80055f8:	443b      	add	r3, r7
 80055fa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80055fe:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005600:	e020      	b.n	8005644 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005602:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005604:	3301      	adds	r3, #1
 8005606:	643b      	str	r3, [r7, #64]	; 0x40
 8005608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800560a:	2b03      	cmp	r3, #3
 800560c:	d9e8      	bls.n	80055e0 <RCC_SetFlashLatency+0x40>
 800560e:	e019      	b.n	8005644 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005610:	2300      	movs	r3, #0
 8005612:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005614:	e013      	b.n	800563e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	3348      	adds	r3, #72	; 0x48
 800561c:	443b      	add	r3, r7
 800561e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	429a      	cmp	r2, r3
 8005626:	d807      	bhi.n	8005638 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	3348      	adds	r3, #72	; 0x48
 800562e:	443b      	add	r3, r7
 8005630:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005634:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005636:	e005      	b.n	8005644 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800563a:	3301      	adds	r3, #1
 800563c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800563e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005640:	2b02      	cmp	r3, #2
 8005642:	d9e8      	bls.n	8005616 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005644:	4b13      	ldr	r3, [pc, #76]	; (8005694 <RCC_SetFlashLatency+0xf4>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f023 0207 	bic.w	r2, r3, #7
 800564c:	4911      	ldr	r1, [pc, #68]	; (8005694 <RCC_SetFlashLatency+0xf4>)
 800564e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005650:	4313      	orrs	r3, r2
 8005652:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005654:	f7fd fdac 	bl	80031b0 <HAL_GetTick>
 8005658:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800565a:	e008      	b.n	800566e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800565c:	f7fd fda8 	bl	80031b0 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e007      	b.n	800567e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800566e:	4b09      	ldr	r3, [pc, #36]	; (8005694 <RCC_SetFlashLatency+0xf4>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005678:	429a      	cmp	r2, r3
 800567a:	d1ef      	bne.n	800565c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	374c      	adds	r7, #76	; 0x4c
 8005682:	46bd      	mov	sp, r7
 8005684:	bd90      	pop	{r4, r7, pc}
 8005686:	bf00      	nop
 8005688:	0800f22c 	.word	0x0800f22c
 800568c:	0800f23c 	.word	0x0800f23c
 8005690:	0800f248 	.word	0x0800f248
 8005694:	58004000 	.word	0x58004000

08005698 <LL_RCC_LSE_IsEnabled>:
{
 8005698:	b480      	push	{r7}
 800569a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800569c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d101      	bne.n	80056b0 <LL_RCC_LSE_IsEnabled+0x18>
 80056ac:	2301      	movs	r3, #1
 80056ae:	e000      	b.n	80056b2 <LL_RCC_LSE_IsEnabled+0x1a>
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <LL_RCC_LSE_IsReady>:
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80056c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d101      	bne.n	80056d4 <LL_RCC_LSE_IsReady+0x18>
 80056d0:	2301      	movs	r3, #1
 80056d2:	e000      	b.n	80056d6 <LL_RCC_LSE_IsReady+0x1a>
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <LL_RCC_SetRFWKPClockSource>:
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80056e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <LL_RCC_SetSMPSClockSource>:
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571a:	f023 0203 	bic.w	r2, r3, #3
 800571e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4313      	orrs	r3, r2
 8005726:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <LL_RCC_SetSMPSPrescaler>:
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800573c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005746:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4313      	orrs	r3, r2
 800574e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <LL_RCC_SetUSARTClockSource>:
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576c:	f023 0203 	bic.w	r2, r3, #3
 8005770:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4313      	orrs	r3, r2
 8005778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <LL_RCC_SetLPUARTClockSource>:
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005798:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800579c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <LL_RCC_SetI2CClockSource>:
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80057bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	091b      	lsrs	r3, r3, #4
 80057c8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80057cc:	43db      	mvns	r3, r3
 80057ce:	401a      	ands	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	011b      	lsls	r3, r3, #4
 80057d4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80057d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <LL_RCC_SetLPTIMClockSource>:
{
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80057f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	0c1b      	lsrs	r3, r3, #16
 8005802:	041b      	lsls	r3, r3, #16
 8005804:	43db      	mvns	r3, r3
 8005806:	401a      	ands	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	041b      	lsls	r3, r3, #16
 800580c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005810:	4313      	orrs	r3, r2
 8005812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005816:	bf00      	nop
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <LL_RCC_SetSAIClockSource>:
{
 8005822:	b480      	push	{r7}
 8005824:	b083      	sub	sp, #12
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800582a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800582e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005832:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005836:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4313      	orrs	r3, r2
 800583e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005842:	bf00      	nop
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <LL_RCC_SetRNGClockSource>:
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800585a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005862:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4313      	orrs	r3, r2
 800586a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <LL_RCC_SetCLK48ClockSource>:
{
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800588e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4313      	orrs	r3, r2
 8005896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800589a:	bf00      	nop
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <LL_RCC_SetUSBClockSource>:
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b082      	sub	sp, #8
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7ff ffe3 	bl	800587a <LL_RCC_SetCLK48ClockSource>
}
 80058b4:	bf00      	nop
 80058b6:	3708      	adds	r7, #8
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <LL_RCC_SetADCClockSource>:
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80058c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80058d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <LL_RCC_SetRTCClockSource>:
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80058f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4313      	orrs	r3, r2
 8005904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <LL_RCC_GetRTCClockSource>:
{
 8005914:	b480      	push	{r7}
 8005916:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800591c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005920:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005924:	4618      	mov	r0, r3
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <LL_RCC_ForceBackupDomainReset>:
{
 800592e:	b480      	push	{r7}
 8005930:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800593e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005942:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005946:	bf00      	nop
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005950:	b480      	push	{r7}
 8005952:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005968:	bf00      	nop
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <LL_RCC_PLLSAI1_Enable>:
{
 8005972:	b480      	push	{r7}
 8005974:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005980:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005984:	6013      	str	r3, [r2, #0]
}
 8005986:	bf00      	nop
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <LL_RCC_PLLSAI1_Disable>:
{
 8005990:	b480      	push	{r7}
 8005992:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800599e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059a2:	6013      	str	r3, [r2, #0]
}
 80059a4:	bf00      	nop
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <LL_RCC_PLLSAI1_IsReady>:
{
 80059ae:	b480      	push	{r7}
 80059b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80059b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059c0:	d101      	bne.n	80059c6 <LL_RCC_PLLSAI1_IsReady+0x18>
 80059c2:	2301      	movs	r3, #1
 80059c4:	e000      	b.n	80059c8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b088      	sub	sp, #32
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80059da:	2300      	movs	r3, #0
 80059dc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80059de:	2300      	movs	r3, #0
 80059e0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d034      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80059f6:	d021      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80059f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80059fc:	d81b      	bhi.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80059fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a02:	d01d      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005a04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a08:	d815      	bhi.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00b      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005a0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a12:	d110      	bne.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a22:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005a24:	e00d      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	3304      	adds	r3, #4
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 f947 	bl	8005cbe <RCCEx_PLLSAI1_ConfigNP>
 8005a30:	4603      	mov	r3, r0
 8005a32:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005a34:	e005      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	77fb      	strb	r3, [r7, #31]
        break;
 8005a3a:	e002      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005a3c:	bf00      	nop
 8005a3e:	e000      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a42:	7ffb      	ldrb	r3, [r7, #31]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d105      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7ff fee8 	bl	8005822 <LL_RCC_SetSAIClockSource>
 8005a52:	e001      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a54:	7ffb      	ldrb	r3, [r7, #31]
 8005a56:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d046      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005a64:	f7ff ff56 	bl	8005914 <LL_RCC_GetRTCClockSource>
 8005a68:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d03c      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005a74:	f7fe fc68 	bl	8004348 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d105      	bne.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7ff ff30 	bl	80058e8 <LL_RCC_SetRTCClockSource>
 8005a88:	e02e      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a92:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005a94:	f7ff ff4b 	bl	800592e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005a98:	f7ff ff5a 	bl	8005950 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005aaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005ab4:	f7ff fdf0 	bl	8005698 <LL_RCC_LSE_IsEnabled>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d114      	bne.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005abe:	f7fd fb77 	bl	80031b0 <HAL_GetTick>
 8005ac2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005ac4:	e00b      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ac6:	f7fd fb73 	bl	80031b0 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d902      	bls.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	77fb      	strb	r3, [r7, #31]
              break;
 8005adc:	e004      	b.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005ade:	f7ff fded 	bl	80056bc <LL_RCC_LSE_IsReady>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d1ee      	bne.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005ae8:	7ffb      	ldrb	r3, [r7, #31]
 8005aea:	77bb      	strb	r3, [r7, #30]
 8005aec:	e001      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aee:	7ffb      	ldrb	r3, [r7, #31]
 8005af0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d004      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7ff fe2a 	bl	800575c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d004      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7ff fe35 	bl	8005788 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0310 	and.w	r3, r3, #16
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d004      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7ff fe5d 	bl	80057ee <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0320 	and.w	r3, r3, #32
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d004      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7ff fe52 	bl	80057ee <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0304 	and.w	r3, r3, #4
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d004      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7ff fe2a 	bl	80057b4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0308 	and.w	r3, r3, #8
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d004      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7ff fe1f 	bl	80057b4 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d022      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff fe8d 	bl	80058a6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b94:	d107      	bne.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ba0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ba4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005baa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bae:	d10b      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f000 f8dd 	bl	8005d74 <RCCEx_PLLSAI1_ConfigNQ>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005bbe:	7ffb      	ldrb	r3, [r7, #31]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005bc4:	7ffb      	ldrb	r3, [r7, #31]
 8005bc6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d02b      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bdc:	d008      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005be6:	d003      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d105      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7ff fe2a 	bl	800584e <LL_RCC_SetRNGClockSource>
 8005bfa:	e00a      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c04:	60fb      	str	r3, [r7, #12]
 8005c06:	2000      	movs	r0, #0
 8005c08:	f7ff fe21 	bl	800584e <LL_RCC_SetRNGClockSource>
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f7ff fe34 	bl	800587a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c16:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005c1a:	d107      	bne.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c2a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d022      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7ff fe3d 	bl	80058bc <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c4a:	d107      	bne.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c5a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c64:	d10b      	bne.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	3304      	adds	r3, #4
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 f8dd 	bl	8005e2a <RCCEx_PLLSAI1_ConfigNR>
 8005c70:	4603      	mov	r3, r0
 8005c72:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005c74:	7ffb      	ldrb	r3, [r7, #31]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005c7a:	7ffb      	ldrb	r3, [r7, #31]
 8005c7c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d004      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7ff fd26 	bl	80056e0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d009      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7ff fd45 	bl	8005734 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7ff fd2c 	bl	800570c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005cb4:	7fbb      	ldrb	r3, [r7, #30]
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3720      	adds	r7, #32
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005cca:	f7ff fe61 	bl	8005990 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005cce:	f7fd fa6f 	bl	80031b0 <HAL_GetTick>
 8005cd2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005cd4:	e009      	b.n	8005cea <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cd6:	f7fd fa6b 	bl	80031b0 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d902      	bls.n	8005cea <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ce8:	e004      	b.n	8005cf4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005cea:	f7ff fe60 	bl	80059ae <LL_RCC_PLLSAI1_IsReady>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1f0      	bne.n	8005cd6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d137      	bne.n	8005d6a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	021b      	lsls	r3, r3, #8
 8005d0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d24:	4313      	orrs	r3, r2
 8005d26:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005d28:	f7ff fe23 	bl	8005972 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d2c:	f7fd fa40 	bl	80031b0 <HAL_GetTick>
 8005d30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005d32:	e009      	b.n	8005d48 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d34:	f7fd fa3c 	bl	80031b0 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d902      	bls.n	8005d48 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	73fb      	strb	r3, [r7, #15]
        break;
 8005d46:	e004      	b.n	8005d52 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005d48:	f7ff fe31 	bl	80059ae <LL_RCC_PLLSAI1_IsReady>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d1f0      	bne.n	8005d34 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005d52:	7bfb      	ldrb	r3, [r7, #15]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d108      	bne.n	8005d6a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d5c:	691a      	ldr	r2, [r3, #16]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d66:	4313      	orrs	r3, r2
 8005d68:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005d80:	f7ff fe06 	bl	8005990 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005d84:	f7fd fa14 	bl	80031b0 <HAL_GetTick>
 8005d88:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005d8a:	e009      	b.n	8005da0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d8c:	f7fd fa10 	bl	80031b0 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d902      	bls.n	8005da0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8005d9e:	e004      	b.n	8005daa <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005da0:	f7ff fe05 	bl	80059ae <LL_RCC_PLLSAI1_IsReady>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1f0      	bne.n	8005d8c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005daa:	7bfb      	ldrb	r3, [r7, #15]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d137      	bne.n	8005e20 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	021b      	lsls	r3, r3, #8
 8005dc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005dde:	f7ff fdc8 	bl	8005972 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005de2:	f7fd f9e5 	bl	80031b0 <HAL_GetTick>
 8005de6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005de8:	e009      	b.n	8005dfe <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005dea:	f7fd f9e1 	bl	80031b0 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d902      	bls.n	8005dfe <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	73fb      	strb	r3, [r7, #15]
        break;
 8005dfc:	e004      	b.n	8005e08 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005dfe:	f7ff fdd6 	bl	80059ae <LL_RCC_PLLSAI1_IsReady>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d1f0      	bne.n	8005dea <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005e08:	7bfb      	ldrb	r3, [r7, #15]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d108      	bne.n	8005e20 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e12:	691a      	ldr	r2, [r3, #16]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b084      	sub	sp, #16
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005e36:	f7ff fdab 	bl	8005990 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e3a:	f7fd f9b9 	bl	80031b0 <HAL_GetTick>
 8005e3e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e40:	e009      	b.n	8005e56 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e42:	f7fd f9b5 	bl	80031b0 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d902      	bls.n	8005e56 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	73fb      	strb	r3, [r7, #15]
      break;
 8005e54:	e004      	b.n	8005e60 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e56:	f7ff fdaa 	bl	80059ae <LL_RCC_PLLSAI1_IsReady>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1f0      	bne.n	8005e42 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005e60:	7bfb      	ldrb	r3, [r7, #15]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d137      	bne.n	8005ed6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	021b      	lsls	r3, r3, #8
 8005e76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e90:	4313      	orrs	r3, r2
 8005e92:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005e94:	f7ff fd6d 	bl	8005972 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e98:	f7fd f98a 	bl	80031b0 <HAL_GetTick>
 8005e9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005e9e:	e009      	b.n	8005eb4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ea0:	f7fd f986 	bl	80031b0 <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d902      	bls.n	8005eb4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	73fb      	strb	r3, [r7, #15]
        break;
 8005eb2:	e004      	b.n	8005ebe <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005eb4:	f7ff fd7b 	bl	80059ae <LL_RCC_PLLSAI1_IsReady>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d1f0      	bne.n	8005ea0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d108      	bne.n	8005ed6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ec8:	691a      	ldr	r2, [r3, #16]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e09f      	b.n	8006032 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d106      	bne.n	8005f0c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7fc ff06 	bl	8002d18 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2202      	movs	r2, #2
 8005f10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005f14:	4b49      	ldr	r3, [pc, #292]	; (800603c <HAL_RTC_Init+0x15c>)
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	f003 0310 	and.w	r3, r3, #16
 8005f1c:	2b10      	cmp	r3, #16
 8005f1e:	d07e      	beq.n	800601e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	22ca      	movs	r2, #202	; 0xca
 8005f26:	625a      	str	r2, [r3, #36]	; 0x24
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2253      	movs	r2, #83	; 0x53
 8005f2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 f8ab 	bl	800608c <RTC_EnterInitMode>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00a      	beq.n	8005f52 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	22ff      	movs	r2, #255	; 0xff
 8005f42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2204      	movs	r2, #4
 8005f48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	73fb      	strb	r3, [r7, #15]
 8005f50:	e067      	b.n	8006022 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	6812      	ldr	r2, [r2, #0]
 8005f5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005f60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f64:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6899      	ldr	r1, [r3, #8]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	431a      	orrs	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	430a      	orrs	r2, r1
 8005f82:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	68d2      	ldr	r2, [r2, #12]
 8005f8c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6919      	ldr	r1, [r3, #16]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	041a      	lsls	r2, r3, #16
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68da      	ldr	r2, [r3, #12]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fb0:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 0203 	bic.w	r2, r2, #3
 8005fc0:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	69da      	ldr	r2, [r3, #28]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f003 0320 	and.w	r3, r3, #32
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d113      	bne.n	8006010 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f829 	bl	8006040 <HAL_RTC_WaitForSynchro>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00d      	beq.n	8006010 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	22ff      	movs	r2, #255	; 0xff
 8005ffa:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2204      	movs	r2, #4
 8006000:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e010      	b.n	8006032 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	22ff      	movs	r2, #255	; 0xff
 8006016:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	73fb      	strb	r3, [r7, #15]
 800601c:	e001      	b.n	8006022 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006022:	7bfb      	ldrb	r3, [r7, #15]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d103      	bne.n	8006030 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8006030:	7bfb      	ldrb	r3, [r7, #15]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	40002800 	.word	0x40002800

08006040 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68da      	ldr	r2, [r3, #12]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006056:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006058:	f7fd f8aa 	bl	80031b0 <HAL_GetTick>
 800605c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800605e:	e009      	b.n	8006074 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006060:	f7fd f8a6 	bl	80031b0 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800606e:	d901      	bls.n	8006074 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e007      	b.n	8006084 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b00      	cmp	r3, #0
 8006080:	d0ee      	beq.n	8006060 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68db      	ldr	r3, [r3, #12]
 800609a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d119      	bne.n	80060d6 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f04f 32ff 	mov.w	r2, #4294967295
 80060aa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80060ac:	f7fd f880 	bl	80031b0 <HAL_GetTick>
 80060b0:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80060b2:	e009      	b.n	80060c8 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80060b4:	f7fd f87c 	bl	80031b0 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060c2:	d901      	bls.n	80060c8 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e007      	b.n	80060d8 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0ee      	beq.n	80060b4 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d101      	bne.n	80060fa <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80060f6:	2302      	movs	r3, #2
 80060f8:	e0a8      	b.n	800624c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2202      	movs	r2, #2
 8006106:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	22ca      	movs	r2, #202	; 0xca
 8006110:	625a      	str	r2, [r3, #36]	; 0x24
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2253      	movs	r2, #83	; 0x53
 8006118:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006124:	2b00      	cmp	r3, #0
 8006126:	d020      	beq.n	800616a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006128:	f7fd f842 	bl	80031b0 <HAL_GetTick>
 800612c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800612e:	e015      	b.n	800615c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006130:	f7fd f83e 	bl	80031b0 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800613e:	d90d      	bls.n	800615c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	22ff      	movs	r2, #255	; 0xff
 8006146:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2203      	movs	r2, #3
 800614c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e077      	b.n	800624c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	f003 0304 	and.w	r3, r3, #4
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1e2      	bne.n	8006130 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006178:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	b2da      	uxtb	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800618a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800618c:	f7fd f810 	bl	80031b0 <HAL_GetTick>
 8006190:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006192:	e015      	b.n	80061c0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006194:	f7fd f80c 	bl	80031b0 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061a2:	d90d      	bls.n	80061c0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	22ff      	movs	r2, #255	; 0xff
 80061aa:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2203      	movs	r2, #3
 80061b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e045      	b.n	800624c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f003 0304 	and.w	r3, r3, #4
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d0e2      	beq.n	8006194 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 0207 	bic.w	r2, r2, #7
 80061e4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6899      	ldr	r1, [r3, #8]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80061f6:	4b17      	ldr	r3, [pc, #92]	; (8006254 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80061f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061fc:	4a15      	ldr	r2, [pc, #84]	; (8006254 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80061fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006202:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006206:	4b13      	ldr	r3, [pc, #76]	; (8006254 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a12      	ldr	r2, [pc, #72]	; (8006254 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800620c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006210:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006220:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689a      	ldr	r2, [r3, #8]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006230:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	22ff      	movs	r2, #255	; 0xff
 8006238:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3718      	adds	r7, #24
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	58000800 	.word	0x58000800

08006258 <LL_RCC_GetUSARTClockSource>:
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006264:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4013      	ands	r3, r2
}
 800626c:	4618      	mov	r0, r3
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <LL_RCC_GetLPUARTClockSource>:
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006284:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4013      	ands	r3, r2
}
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e050      	b.n	800634c <HAL_UART_Init+0xb4>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d114      	bne.n	80062de <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 fc47 	bl	8006b50 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d103      	bne.n	80062d4 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a21      	ldr	r2, [pc, #132]	; (8006354 <HAL_UART_Init+0xbc>)
 80062d0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2224      	movs	r2, #36	; 0x24
 80062e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 0201 	bic.w	r2, r2, #1
 80062f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d002      	beq.n	8006304 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fea0 	bl	8007044 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 fc75 	bl	8006bf4 <UART_SetConfig>
 800630a:	4603      	mov	r3, r0
 800630c:	2b01      	cmp	r3, #1
 800630e:	d101      	bne.n	8006314 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e01b      	b.n	800634c <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006322:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689a      	ldr	r2, [r3, #8]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006332:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0201 	orr.w	r2, r2, #1
 8006342:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 ff1f 	bl	8007188 <UART_CheckIdleState>
 800634a:	4603      	mov	r3, r0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	08002b05 	.word	0x08002b05

08006358 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08a      	sub	sp, #40	; 0x28
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	4613      	mov	r3, r2
 8006364:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800636c:	2b20      	cmp	r3, #32
 800636e:	d167      	bne.n	8006440 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <HAL_UART_Transmit_DMA+0x24>
 8006376:	88fb      	ldrh	r3, [r7, #6]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e060      	b.n	8006442 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	88fa      	ldrh	r2, [r7, #6]
 800638a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	88fa      	ldrh	r2, [r7, #6]
 8006392:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2221      	movs	r2, #33	; 0x21
 80063a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d028      	beq.n	8006400 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063b2:	4a26      	ldr	r2, [pc, #152]	; (800644c <HAL_UART_Transmit_DMA+0xf4>)
 80063b4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063ba:	4a25      	ldr	r2, [pc, #148]	; (8006450 <HAL_UART_Transmit_DMA+0xf8>)
 80063bc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063c2:	4a24      	ldr	r2, [pc, #144]	; (8006454 <HAL_UART_Transmit_DMA+0xfc>)
 80063c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063ca:	2200      	movs	r2, #0
 80063cc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d6:	4619      	mov	r1, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3328      	adds	r3, #40	; 0x28
 80063de:	461a      	mov	r2, r3
 80063e0:	88fb      	ldrh	r3, [r7, #6]
 80063e2:	f7fd f94b 	bl	800367c <HAL_DMA_Start_IT>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d009      	beq.n	8006400 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2210      	movs	r2, #16
 80063f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2220      	movs	r2, #32
 80063f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e020      	b.n	8006442 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2240      	movs	r2, #64	; 0x40
 8006406:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	3308      	adds	r3, #8
 800640e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	e853 3f00 	ldrex	r3, [r3]
 8006416:	613b      	str	r3, [r7, #16]
   return(result);
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800641e:	627b      	str	r3, [r7, #36]	; 0x24
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3308      	adds	r3, #8
 8006426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006428:	623a      	str	r2, [r7, #32]
 800642a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642c:	69f9      	ldr	r1, [r7, #28]
 800642e:	6a3a      	ldr	r2, [r7, #32]
 8006430:	e841 2300 	strex	r3, r2, [r1]
 8006434:	61bb      	str	r3, [r7, #24]
   return(result);
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1e5      	bne.n	8006408 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800643c:	2300      	movs	r3, #0
 800643e:	e000      	b.n	8006442 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006440:	2302      	movs	r3, #2
  }
}
 8006442:	4618      	mov	r0, r3
 8006444:	3728      	adds	r7, #40	; 0x28
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	08007505 	.word	0x08007505
 8006450:	080075a3 	.word	0x080075a3
 8006454:	080075c3 	.word	0x080075c3

08006458 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b0ba      	sub	sp, #232	; 0xe8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800647e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006482:	f640 030f 	movw	r3, #2063	; 0x80f
 8006486:	4013      	ands	r3, r2
 8006488:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800648c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006490:	2b00      	cmp	r3, #0
 8006492:	d11b      	bne.n	80064cc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006498:	f003 0320 	and.w	r3, r3, #32
 800649c:	2b00      	cmp	r3, #0
 800649e:	d015      	beq.n	80064cc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80064a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064a4:	f003 0320 	and.w	r3, r3, #32
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d105      	bne.n	80064b8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80064ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d009      	beq.n	80064cc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 82f3 	beq.w	8006aa8 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	4798      	blx	r3
      }
      return;
 80064ca:	e2ed      	b.n	8006aa8 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80064cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 8129 	beq.w	8006728 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80064d6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80064da:	4b90      	ldr	r3, [pc, #576]	; (800671c <HAL_UART_IRQHandler+0x2c4>)
 80064dc:	4013      	ands	r3, r2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d106      	bne.n	80064f0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80064e2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80064e6:	4b8e      	ldr	r3, [pc, #568]	; (8006720 <HAL_UART_IRQHandler+0x2c8>)
 80064e8:	4013      	ands	r3, r2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 811c 	beq.w	8006728 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d011      	beq.n	8006520 <HAL_UART_IRQHandler+0xc8>
 80064fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00b      	beq.n	8006520 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2201      	movs	r2, #1
 800650e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006516:	f043 0201 	orr.w	r2, r3, #1
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b00      	cmp	r3, #0
 800652a:	d011      	beq.n	8006550 <HAL_UART_IRQHandler+0xf8>
 800652c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00b      	beq.n	8006550 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2202      	movs	r2, #2
 800653e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006546:	f043 0204 	orr.w	r2, r3, #4
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006554:	f003 0304 	and.w	r3, r3, #4
 8006558:	2b00      	cmp	r3, #0
 800655a:	d011      	beq.n	8006580 <HAL_UART_IRQHandler+0x128>
 800655c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00b      	beq.n	8006580 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2204      	movs	r2, #4
 800656e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006576:	f043 0202 	orr.w	r2, r3, #2
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006584:	f003 0308 	and.w	r3, r3, #8
 8006588:	2b00      	cmp	r3, #0
 800658a:	d017      	beq.n	80065bc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800658c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006590:	f003 0320 	and.w	r3, r3, #32
 8006594:	2b00      	cmp	r3, #0
 8006596:	d105      	bne.n	80065a4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006598:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800659c:	4b5f      	ldr	r3, [pc, #380]	; (800671c <HAL_UART_IRQHandler+0x2c4>)
 800659e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00b      	beq.n	80065bc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2208      	movs	r2, #8
 80065aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b2:	f043 0208 	orr.w	r2, r3, #8
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80065bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d012      	beq.n	80065ee <HAL_UART_IRQHandler+0x196>
 80065c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00c      	beq.n	80065ee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e4:	f043 0220 	orr.w	r2, r3, #32
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 8259 	beq.w	8006aac <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80065fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065fe:	f003 0320 	and.w	r3, r3, #32
 8006602:	2b00      	cmp	r3, #0
 8006604:	d013      	beq.n	800662e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800660a:	f003 0320 	and.w	r3, r3, #32
 800660e:	2b00      	cmp	r3, #0
 8006610:	d105      	bne.n	800661e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006612:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d007      	beq.n	800662e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006634:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006642:	2b40      	cmp	r3, #64	; 0x40
 8006644:	d005      	beq.n	8006652 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006646:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800664a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800664e:	2b00      	cmp	r3, #0
 8006650:	d058      	beq.n	8006704 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fef0 	bl	8007438 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006662:	2b40      	cmp	r3, #64	; 0x40
 8006664:	d148      	bne.n	80066f8 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3308      	adds	r3, #8
 800666c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006670:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006674:	e853 3f00 	ldrex	r3, [r3]
 8006678:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800667c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3308      	adds	r3, #8
 800668e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006692:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006696:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800669e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066a2:	e841 2300 	strex	r3, r2, [r1]
 80066a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1d9      	bne.n	8006666 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d017      	beq.n	80066ec <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066c2:	4a18      	ldr	r2, [pc, #96]	; (8006724 <HAL_UART_IRQHandler+0x2cc>)
 80066c4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7fd f8af 	bl	8003830 <HAL_DMA_Abort_IT>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d01f      	beq.n	8006718 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80066e6:	4610      	mov	r0, r2
 80066e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ea:	e015      	b.n	8006718 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f6:	e00f      	b.n	8006718 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006702:	e009      	b.n	8006718 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006716:	e1c9      	b.n	8006aac <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006718:	bf00      	nop
    return;
 800671a:	e1c7      	b.n	8006aac <HAL_UART_IRQHandler+0x654>
 800671c:	10000001 	.word	0x10000001
 8006720:	04000120 	.word	0x04000120
 8006724:	08007647 	.word	0x08007647

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800672c:	2b01      	cmp	r3, #1
 800672e:	f040 8157 	bne.w	80069e0 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006736:	f003 0310 	and.w	r3, r3, #16
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 8150 	beq.w	80069e0 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006744:	f003 0310 	and.w	r3, r3, #16
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 8149 	beq.w	80069e0 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2210      	movs	r2, #16
 8006754:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006760:	2b40      	cmp	r3, #64	; 0x40
 8006762:	f040 80bd 	bne.w	80068e0 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006774:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 8199 	beq.w	8006ab0 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006784:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006788:	429a      	cmp	r2, r3
 800678a:	f080 8191 	bcs.w	8006ab0 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006794:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0320 	and.w	r3, r3, #32
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f040 8087 	bne.w	80068ba <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067b8:	e853 3f00 	ldrex	r3, [r3]
 80067bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80067c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	461a      	mov	r2, r3
 80067d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80067e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067e6:	e841 2300 	strex	r3, r2, [r1]
 80067ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80067ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1da      	bne.n	80067ac <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3308      	adds	r3, #8
 80067fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006800:	e853 3f00 	ldrex	r3, [r3]
 8006804:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006806:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006808:	f023 0301 	bic.w	r3, r3, #1
 800680c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	3308      	adds	r3, #8
 8006816:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800681a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800681e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006820:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006822:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006826:	e841 2300 	strex	r3, r2, [r1]
 800682a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800682c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1e1      	bne.n	80067f6 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	3308      	adds	r3, #8
 8006838:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800683c:	e853 3f00 	ldrex	r3, [r3]
 8006840:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006848:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3308      	adds	r3, #8
 8006852:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006856:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006858:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800685c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800685e:	e841 2300 	strex	r3, r2, [r1]
 8006862:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006864:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1e3      	bne.n	8006832 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2220      	movs	r2, #32
 800686e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006880:	e853 3f00 	ldrex	r3, [r3]
 8006884:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006888:	f023 0310 	bic.w	r3, r3, #16
 800688c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	461a      	mov	r2, r3
 8006896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800689a:	65bb      	str	r3, [r7, #88]	; 0x58
 800689c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068a2:	e841 2300 	strex	r3, r2, [r1]
 80068a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1e4      	bne.n	8006878 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7fc ff5c 	bl	8003772 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2202      	movs	r2, #2
 80068be:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 80068d2:	b292      	uxth	r2, r2
 80068d4:	1a8a      	subs	r2, r1, r2
 80068d6:	b292      	uxth	r2, r2
 80068d8:	4611      	mov	r1, r2
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068de:	e0e7      	b.n	8006ab0 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	f000 80d9 	beq.w	8006ab4 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8006902:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006906:	2b00      	cmp	r3, #0
 8006908:	f000 80d4 	beq.w	8006ab4 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006914:	e853 3f00 	ldrex	r3, [r3]
 8006918:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800691a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800691c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006920:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	461a      	mov	r2, r3
 800692a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800692e:	647b      	str	r3, [r7, #68]	; 0x44
 8006930:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006932:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006934:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006936:	e841 2300 	strex	r3, r2, [r1]
 800693a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800693c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1e4      	bne.n	800690c <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	3308      	adds	r3, #8
 8006948:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	e853 3f00 	ldrex	r3, [r3]
 8006950:	623b      	str	r3, [r7, #32]
   return(result);
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006958:	f023 0301 	bic.w	r3, r3, #1
 800695c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3308      	adds	r3, #8
 8006966:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800696a:	633a      	str	r2, [r7, #48]	; 0x30
 800696c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006972:	e841 2300 	strex	r3, r2, [r1]
 8006976:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1e1      	bne.n	8006942 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2220      	movs	r2, #32
 8006982:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	e853 3f00 	ldrex	r3, [r3]
 800699e:	60fb      	str	r3, [r7, #12]
   return(result);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 0310 	bic.w	r3, r3, #16
 80069a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	461a      	mov	r2, r3
 80069b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80069b4:	61fb      	str	r3, [r7, #28]
 80069b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b8:	69b9      	ldr	r1, [r7, #24]
 80069ba:	69fa      	ldr	r2, [r7, #28]
 80069bc:	e841 2300 	strex	r3, r2, [r1]
 80069c0:	617b      	str	r3, [r7, #20]
   return(result);
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1e4      	bne.n	8006992 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2202      	movs	r2, #2
 80069cc:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80069d4:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 80069d8:	4611      	mov	r1, r2
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069de:	e069      	b.n	8006ab4 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80069e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d010      	beq.n	8006a0e <HAL_UART_IRQHandler+0x5b6>
 80069ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00a      	beq.n	8006a0e <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a00:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a0c:	e055      	b.n	8006aba <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d014      	beq.n	8006a44 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d105      	bne.n	8006a32 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d008      	beq.n	8006a44 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d03e      	beq.n	8006ab8 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	4798      	blx	r3
    }
    return;
 8006a42:	e039      	b.n	8006ab8 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d009      	beq.n	8006a64 <HAL_UART_IRQHandler+0x60c>
 8006a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d003      	beq.n	8006a64 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 fe0a 	bl	8007676 <UART_EndTransmit_IT>
    return;
 8006a62:	e02a      	b.n	8006aba <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00b      	beq.n	8006a88 <HAL_UART_IRQHandler+0x630>
 8006a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d005      	beq.n	8006a88 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a86:	e018      	b.n	8006aba <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d012      	beq.n	8006aba <HAL_UART_IRQHandler+0x662>
 8006a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	da0e      	bge.n	8006aba <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006aa6:	e008      	b.n	8006aba <HAL_UART_IRQHandler+0x662>
      return;
 8006aa8:	bf00      	nop
 8006aaa:	e006      	b.n	8006aba <HAL_UART_IRQHandler+0x662>
    return;
 8006aac:	bf00      	nop
 8006aae:	e004      	b.n	8006aba <HAL_UART_IRQHandler+0x662>
      return;
 8006ab0:	bf00      	nop
 8006ab2:	e002      	b.n	8006aba <HAL_UART_IRQHandler+0x662>
      return;
 8006ab4:	bf00      	nop
 8006ab6:	e000      	b.n	8006aba <HAL_UART_IRQHandler+0x662>
    return;
 8006ab8:	bf00      	nop
  }
}
 8006aba:	37e8      	adds	r7, #232	; 0xe8
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b44:	bf00      	nop
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a1a      	ldr	r2, [pc, #104]	; (8006bc4 <UART_InitCallbacksToDefault+0x74>)
 8006b5c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a19      	ldr	r2, [pc, #100]	; (8006bc8 <UART_InitCallbacksToDefault+0x78>)
 8006b64:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a18      	ldr	r2, [pc, #96]	; (8006bcc <UART_InitCallbacksToDefault+0x7c>)
 8006b6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a17      	ldr	r2, [pc, #92]	; (8006bd0 <UART_InitCallbacksToDefault+0x80>)
 8006b74:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a16      	ldr	r2, [pc, #88]	; (8006bd4 <UART_InitCallbacksToDefault+0x84>)
 8006b7c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a15      	ldr	r2, [pc, #84]	; (8006bd8 <UART_InitCallbacksToDefault+0x88>)
 8006b84:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a14      	ldr	r2, [pc, #80]	; (8006bdc <UART_InitCallbacksToDefault+0x8c>)
 8006b8c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a13      	ldr	r2, [pc, #76]	; (8006be0 <UART_InitCallbacksToDefault+0x90>)
 8006b94:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a12      	ldr	r2, [pc, #72]	; (8006be4 <UART_InitCallbacksToDefault+0x94>)
 8006b9c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a11      	ldr	r2, [pc, #68]	; (8006be8 <UART_InitCallbacksToDefault+0x98>)
 8006ba4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a10      	ldr	r2, [pc, #64]	; (8006bec <UART_InitCallbacksToDefault+0x9c>)
 8006bac:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a0f      	ldr	r2, [pc, #60]	; (8006bf0 <UART_InitCallbacksToDefault+0xa0>)
 8006bb4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr
 8006bc4:	08006ac1 	.word	0x08006ac1
 8006bc8:	08002179 	.word	0x08002179
 8006bcc:	08006ad5 	.word	0x08006ad5
 8006bd0:	0800213d 	.word	0x0800213d
 8006bd4:	08006ae9 	.word	0x08006ae9
 8006bd8:	08006afd 	.word	0x08006afd
 8006bdc:	08006b11 	.word	0x08006b11
 8006be0:	08006b25 	.word	0x08006b25
 8006be4:	080076d1 	.word	0x080076d1
 8006be8:	080076e5 	.word	0x080076e5
 8006bec:	080076f9 	.word	0x080076f9
 8006bf0:	08006b39 	.word	0x08006b39

08006bf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bf8:	b08c      	sub	sp, #48	; 0x30
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	689a      	ldr	r2, [r3, #8]
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	431a      	orrs	r2, r3
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	431a      	orrs	r2, r3
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	69db      	ldr	r3, [r3, #28]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	4baf      	ldr	r3, [pc, #700]	; (8006ee0 <UART_SetConfig+0x2ec>)
 8006c24:	4013      	ands	r3, r2
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	6812      	ldr	r2, [r2, #0]
 8006c2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c2c:	430b      	orrs	r3, r1
 8006c2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	68da      	ldr	r2, [r3, #12]
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	430a      	orrs	r2, r1
 8006c44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4aa4      	ldr	r2, [pc, #656]	; (8006ee4 <UART_SetConfig+0x2f0>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d004      	beq.n	8006c60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006c6a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	6812      	ldr	r2, [r2, #0]
 8006c72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c74:	430b      	orrs	r3, r1
 8006c76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7e:	f023 010f 	bic.w	r1, r3, #15
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a95      	ldr	r2, [pc, #596]	; (8006ee8 <UART_SetConfig+0x2f4>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d125      	bne.n	8006ce4 <UART_SetConfig+0xf0>
 8006c98:	2003      	movs	r0, #3
 8006c9a:	f7ff fadd 	bl	8006258 <LL_RCC_GetUSARTClockSource>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b03      	cmp	r3, #3
 8006ca2:	d81b      	bhi.n	8006cdc <UART_SetConfig+0xe8>
 8006ca4:	a201      	add	r2, pc, #4	; (adr r2, 8006cac <UART_SetConfig+0xb8>)
 8006ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006caa:	bf00      	nop
 8006cac:	08006cbd 	.word	0x08006cbd
 8006cb0:	08006ccd 	.word	0x08006ccd
 8006cb4:	08006cc5 	.word	0x08006cc5
 8006cb8:	08006cd5 	.word	0x08006cd5
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cc2:	e042      	b.n	8006d4a <UART_SetConfig+0x156>
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cca:	e03e      	b.n	8006d4a <UART_SetConfig+0x156>
 8006ccc:	2304      	movs	r3, #4
 8006cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cd2:	e03a      	b.n	8006d4a <UART_SetConfig+0x156>
 8006cd4:	2308      	movs	r3, #8
 8006cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cda:	e036      	b.n	8006d4a <UART_SetConfig+0x156>
 8006cdc:	2310      	movs	r3, #16
 8006cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ce2:	e032      	b.n	8006d4a <UART_SetConfig+0x156>
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a7e      	ldr	r2, [pc, #504]	; (8006ee4 <UART_SetConfig+0x2f0>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d12a      	bne.n	8006d44 <UART_SetConfig+0x150>
 8006cee:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006cf2:	f7ff fac1 	bl	8006278 <LL_RCC_GetLPUARTClockSource>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cfc:	d01a      	beq.n	8006d34 <UART_SetConfig+0x140>
 8006cfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d02:	d81b      	bhi.n	8006d3c <UART_SetConfig+0x148>
 8006d04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d08:	d00c      	beq.n	8006d24 <UART_SetConfig+0x130>
 8006d0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d0e:	d815      	bhi.n	8006d3c <UART_SetConfig+0x148>
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <UART_SetConfig+0x128>
 8006d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d18:	d008      	beq.n	8006d2c <UART_SetConfig+0x138>
 8006d1a:	e00f      	b.n	8006d3c <UART_SetConfig+0x148>
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d22:	e012      	b.n	8006d4a <UART_SetConfig+0x156>
 8006d24:	2302      	movs	r3, #2
 8006d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d2a:	e00e      	b.n	8006d4a <UART_SetConfig+0x156>
 8006d2c:	2304      	movs	r3, #4
 8006d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d32:	e00a      	b.n	8006d4a <UART_SetConfig+0x156>
 8006d34:	2308      	movs	r3, #8
 8006d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d3a:	e006      	b.n	8006d4a <UART_SetConfig+0x156>
 8006d3c:	2310      	movs	r3, #16
 8006d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d42:	e002      	b.n	8006d4a <UART_SetConfig+0x156>
 8006d44:	2310      	movs	r3, #16
 8006d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a65      	ldr	r2, [pc, #404]	; (8006ee4 <UART_SetConfig+0x2f0>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	f040 8097 	bne.w	8006e84 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d5a:	2b08      	cmp	r3, #8
 8006d5c:	d823      	bhi.n	8006da6 <UART_SetConfig+0x1b2>
 8006d5e:	a201      	add	r2, pc, #4	; (adr r2, 8006d64 <UART_SetConfig+0x170>)
 8006d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d64:	08006d89 	.word	0x08006d89
 8006d68:	08006da7 	.word	0x08006da7
 8006d6c:	08006d91 	.word	0x08006d91
 8006d70:	08006da7 	.word	0x08006da7
 8006d74:	08006d97 	.word	0x08006d97
 8006d78:	08006da7 	.word	0x08006da7
 8006d7c:	08006da7 	.word	0x08006da7
 8006d80:	08006da7 	.word	0x08006da7
 8006d84:	08006d9f 	.word	0x08006d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d88:	f7fe fba6 	bl	80054d8 <HAL_RCC_GetPCLK1Freq>
 8006d8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d8e:	e010      	b.n	8006db2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d90:	4b56      	ldr	r3, [pc, #344]	; (8006eec <UART_SetConfig+0x2f8>)
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d94:	e00d      	b.n	8006db2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d96:	f7fe fb1f 	bl	80053d8 <HAL_RCC_GetSysClockFreq>
 8006d9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d9c:	e009      	b.n	8006db2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006da2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006da4:	e005      	b.n	8006db2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006db0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 812b 	beq.w	8007010 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbe:	4a4c      	ldr	r2, [pc, #304]	; (8006ef0 <UART_SetConfig+0x2fc>)
 8006dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dcc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	685a      	ldr	r2, [r3, #4]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	005b      	lsls	r3, r3, #1
 8006dd6:	4413      	add	r3, r2
 8006dd8:	69ba      	ldr	r2, [r7, #24]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d305      	bcc.n	8006dea <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006de4:	69ba      	ldr	r2, [r7, #24]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d903      	bls.n	8006df2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006df0:	e10e      	b.n	8007010 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	2200      	movs	r2, #0
 8006df6:	60bb      	str	r3, [r7, #8]
 8006df8:	60fa      	str	r2, [r7, #12]
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfe:	4a3c      	ldr	r2, [pc, #240]	; (8006ef0 <UART_SetConfig+0x2fc>)
 8006e00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	2200      	movs	r2, #0
 8006e08:	603b      	str	r3, [r7, #0]
 8006e0a:	607a      	str	r2, [r7, #4]
 8006e0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e14:	f7f9 fcf2 	bl	80007fc <__aeabi_uldivmod>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	4619      	mov	r1, r3
 8006e20:	f04f 0200 	mov.w	r2, #0
 8006e24:	f04f 0300 	mov.w	r3, #0
 8006e28:	020b      	lsls	r3, r1, #8
 8006e2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006e2e:	0202      	lsls	r2, r0, #8
 8006e30:	6979      	ldr	r1, [r7, #20]
 8006e32:	6849      	ldr	r1, [r1, #4]
 8006e34:	0849      	lsrs	r1, r1, #1
 8006e36:	2000      	movs	r0, #0
 8006e38:	460c      	mov	r4, r1
 8006e3a:	4605      	mov	r5, r0
 8006e3c:	eb12 0804 	adds.w	r8, r2, r4
 8006e40:	eb43 0905 	adc.w	r9, r3, r5
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	469a      	mov	sl, r3
 8006e4c:	4693      	mov	fp, r2
 8006e4e:	4652      	mov	r2, sl
 8006e50:	465b      	mov	r3, fp
 8006e52:	4640      	mov	r0, r8
 8006e54:	4649      	mov	r1, r9
 8006e56:	f7f9 fcd1 	bl	80007fc <__aeabi_uldivmod>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	4613      	mov	r3, r2
 8006e60:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e68:	d308      	bcc.n	8006e7c <UART_SetConfig+0x288>
 8006e6a:	6a3b      	ldr	r3, [r7, #32]
 8006e6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e70:	d204      	bcs.n	8006e7c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6a3a      	ldr	r2, [r7, #32]
 8006e78:	60da      	str	r2, [r3, #12]
 8006e7a:	e0c9      	b.n	8007010 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e82:	e0c5      	b.n	8007010 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	69db      	ldr	r3, [r3, #28]
 8006e88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e8c:	d16d      	bne.n	8006f6a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006e8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e92:	3b01      	subs	r3, #1
 8006e94:	2b07      	cmp	r3, #7
 8006e96:	d82d      	bhi.n	8006ef4 <UART_SetConfig+0x300>
 8006e98:	a201      	add	r2, pc, #4	; (adr r2, 8006ea0 <UART_SetConfig+0x2ac>)
 8006e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9e:	bf00      	nop
 8006ea0:	08006ec1 	.word	0x08006ec1
 8006ea4:	08006ec9 	.word	0x08006ec9
 8006ea8:	08006ef5 	.word	0x08006ef5
 8006eac:	08006ecf 	.word	0x08006ecf
 8006eb0:	08006ef5 	.word	0x08006ef5
 8006eb4:	08006ef5 	.word	0x08006ef5
 8006eb8:	08006ef5 	.word	0x08006ef5
 8006ebc:	08006ed7 	.word	0x08006ed7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ec0:	f7fe fb20 	bl	8005504 <HAL_RCC_GetPCLK2Freq>
 8006ec4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ec6:	e01b      	b.n	8006f00 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ec8:	4b08      	ldr	r3, [pc, #32]	; (8006eec <UART_SetConfig+0x2f8>)
 8006eca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ecc:	e018      	b.n	8006f00 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ece:	f7fe fa83 	bl	80053d8 <HAL_RCC_GetSysClockFreq>
 8006ed2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ed4:	e014      	b.n	8006f00 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ed6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006edc:	e010      	b.n	8006f00 <UART_SetConfig+0x30c>
 8006ede:	bf00      	nop
 8006ee0:	cfff69f3 	.word	0xcfff69f3
 8006ee4:	40008000 	.word	0x40008000
 8006ee8:	40013800 	.word	0x40013800
 8006eec:	00f42400 	.word	0x00f42400
 8006ef0:	0801022c 	.word	0x0801022c
      default:
        pclk = 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006efe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f000 8084 	beq.w	8007010 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	4a4b      	ldr	r2, [pc, #300]	; (800703c <UART_SetConfig+0x448>)
 8006f0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f12:	461a      	mov	r2, r3
 8006f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f16:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f1a:	005a      	lsls	r2, r3, #1
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	085b      	lsrs	r3, r3, #1
 8006f22:	441a      	add	r2, r3
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f2c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f2e:	6a3b      	ldr	r3, [r7, #32]
 8006f30:	2b0f      	cmp	r3, #15
 8006f32:	d916      	bls.n	8006f62 <UART_SetConfig+0x36e>
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f3a:	d212      	bcs.n	8006f62 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f3c:	6a3b      	ldr	r3, [r7, #32]
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	f023 030f 	bic.w	r3, r3, #15
 8006f44:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f46:	6a3b      	ldr	r3, [r7, #32]
 8006f48:	085b      	lsrs	r3, r3, #1
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	f003 0307 	and.w	r3, r3, #7
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	8bfb      	ldrh	r3, [r7, #30]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	8bfa      	ldrh	r2, [r7, #30]
 8006f5e:	60da      	str	r2, [r3, #12]
 8006f60:	e056      	b.n	8007010 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006f68:	e052      	b.n	8007010 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	2b07      	cmp	r3, #7
 8006f72:	d822      	bhi.n	8006fba <UART_SetConfig+0x3c6>
 8006f74:	a201      	add	r2, pc, #4	; (adr r2, 8006f7c <UART_SetConfig+0x388>)
 8006f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7a:	bf00      	nop
 8006f7c:	08006f9d 	.word	0x08006f9d
 8006f80:	08006fa5 	.word	0x08006fa5
 8006f84:	08006fbb 	.word	0x08006fbb
 8006f88:	08006fab 	.word	0x08006fab
 8006f8c:	08006fbb 	.word	0x08006fbb
 8006f90:	08006fbb 	.word	0x08006fbb
 8006f94:	08006fbb 	.word	0x08006fbb
 8006f98:	08006fb3 	.word	0x08006fb3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f9c:	f7fe fab2 	bl	8005504 <HAL_RCC_GetPCLK2Freq>
 8006fa0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fa2:	e010      	b.n	8006fc6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fa4:	4b26      	ldr	r3, [pc, #152]	; (8007040 <UART_SetConfig+0x44c>)
 8006fa6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006fa8:	e00d      	b.n	8006fc6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006faa:	f7fe fa15 	bl	80053d8 <HAL_RCC_GetSysClockFreq>
 8006fae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fb0:	e009      	b.n	8006fc6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006fb8:	e005      	b.n	8006fc6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006fc4:	bf00      	nop
    }

    if (pclk != 0U)
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d021      	beq.n	8007010 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd0:	4a1a      	ldr	r2, [pc, #104]	; (800703c <UART_SetConfig+0x448>)
 8006fd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fda:	fbb3 f2f2 	udiv	r2, r3, r2
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	085b      	lsrs	r3, r3, #1
 8006fe4:	441a      	add	r2, r3
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ff0:	6a3b      	ldr	r3, [r7, #32]
 8006ff2:	2b0f      	cmp	r3, #15
 8006ff4:	d909      	bls.n	800700a <UART_SetConfig+0x416>
 8006ff6:	6a3b      	ldr	r3, [r7, #32]
 8006ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ffc:	d205      	bcs.n	800700a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	b29a      	uxth	r2, r3
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	60da      	str	r2, [r3, #12]
 8007008:	e002      	b.n	8007010 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	2201      	movs	r2, #1
 8007014:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	2201      	movs	r2, #1
 800701c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	2200      	movs	r2, #0
 8007024:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2200      	movs	r2, #0
 800702a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800702c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007030:	4618      	mov	r0, r3
 8007032:	3730      	adds	r7, #48	; 0x30
 8007034:	46bd      	mov	sp, r7
 8007036:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800703a:	bf00      	nop
 800703c:	0801022c 	.word	0x0801022c
 8007040:	00f42400 	.word	0x00f42400

08007044 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007050:	f003 0308 	and.w	r3, r3, #8
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00a      	beq.n	800706e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	430a      	orrs	r2, r1
 800706c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00a      	beq.n	8007090 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	430a      	orrs	r2, r1
 800708e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007094:	f003 0302 	and.w	r3, r3, #2
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00a      	beq.n	80070b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	430a      	orrs	r2, r1
 80070b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b6:	f003 0304 	and.w	r3, r3, #4
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00a      	beq.n	80070d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	430a      	orrs	r2, r1
 80070d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d8:	f003 0310 	and.w	r3, r3, #16
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00a      	beq.n	80070f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	430a      	orrs	r2, r1
 80070f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fa:	f003 0320 	and.w	r3, r3, #32
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00a      	beq.n	8007118 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	430a      	orrs	r2, r1
 8007116:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007120:	2b00      	cmp	r3, #0
 8007122:	d01a      	beq.n	800715a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	430a      	orrs	r2, r1
 8007138:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007142:	d10a      	bne.n	800715a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	430a      	orrs	r2, r1
 8007158:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00a      	beq.n	800717c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	430a      	orrs	r2, r1
 800717a:	605a      	str	r2, [r3, #4]
  }
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b098      	sub	sp, #96	; 0x60
 800718c:	af02      	add	r7, sp, #8
 800718e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007198:	f7fc f80a 	bl	80031b0 <HAL_GetTick>
 800719c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0308 	and.w	r3, r3, #8
 80071a8:	2b08      	cmp	r3, #8
 80071aa:	d12f      	bne.n	800720c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071b0:	9300      	str	r3, [sp, #0]
 80071b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071b4:	2200      	movs	r2, #0
 80071b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f88e 	bl	80072dc <UART_WaitOnFlagUntilTimeout>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d022      	beq.n	800720c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ce:	e853 3f00 	ldrex	r3, [r3]
 80071d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80071d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071da:	653b      	str	r3, [r7, #80]	; 0x50
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	461a      	mov	r2, r3
 80071e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071e4:	647b      	str	r3, [r7, #68]	; 0x44
 80071e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071ec:	e841 2300 	strex	r3, r2, [r1]
 80071f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1e6      	bne.n	80071c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2220      	movs	r2, #32
 80071fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e063      	b.n	80072d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0304 	and.w	r3, r3, #4
 8007216:	2b04      	cmp	r3, #4
 8007218:	d149      	bne.n	80072ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800721a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007222:	2200      	movs	r2, #0
 8007224:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f857 	bl	80072dc <UART_WaitOnFlagUntilTimeout>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d03c      	beq.n	80072ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	e853 3f00 	ldrex	r3, [r3]
 8007240:	623b      	str	r3, [r7, #32]
   return(result);
 8007242:	6a3b      	ldr	r3, [r7, #32]
 8007244:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007248:	64fb      	str	r3, [r7, #76]	; 0x4c
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	461a      	mov	r2, r3
 8007250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007252:	633b      	str	r3, [r7, #48]	; 0x30
 8007254:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007256:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800725a:	e841 2300 	strex	r3, r2, [r1]
 800725e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1e6      	bne.n	8007234 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	3308      	adds	r3, #8
 800726c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	e853 3f00 	ldrex	r3, [r3]
 8007274:	60fb      	str	r3, [r7, #12]
   return(result);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f023 0301 	bic.w	r3, r3, #1
 800727c:	64bb      	str	r3, [r7, #72]	; 0x48
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	3308      	adds	r3, #8
 8007284:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007286:	61fa      	str	r2, [r7, #28]
 8007288:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728a:	69b9      	ldr	r1, [r7, #24]
 800728c:	69fa      	ldr	r2, [r7, #28]
 800728e:	e841 2300 	strex	r3, r2, [r1]
 8007292:	617b      	str	r3, [r7, #20]
   return(result);
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1e5      	bne.n	8007266 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2220      	movs	r2, #32
 800729e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e012      	b.n	80072d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2220      	movs	r2, #32
 80072b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2220      	movs	r2, #32
 80072ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3758      	adds	r7, #88	; 0x58
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	603b      	str	r3, [r7, #0]
 80072e8:	4613      	mov	r3, r2
 80072ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072ec:	e04f      	b.n	800738e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f4:	d04b      	beq.n	800738e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072f6:	f7fb ff5b 	bl	80031b0 <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	69ba      	ldr	r2, [r7, #24]
 8007302:	429a      	cmp	r2, r3
 8007304:	d302      	bcc.n	800730c <UART_WaitOnFlagUntilTimeout+0x30>
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e04e      	b.n	80073ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 0304 	and.w	r3, r3, #4
 800731a:	2b00      	cmp	r3, #0
 800731c:	d037      	beq.n	800738e <UART_WaitOnFlagUntilTimeout+0xb2>
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	2b80      	cmp	r3, #128	; 0x80
 8007322:	d034      	beq.n	800738e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	2b40      	cmp	r3, #64	; 0x40
 8007328:	d031      	beq.n	800738e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	69db      	ldr	r3, [r3, #28]
 8007330:	f003 0308 	and.w	r3, r3, #8
 8007334:	2b08      	cmp	r3, #8
 8007336:	d110      	bne.n	800735a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2208      	movs	r2, #8
 800733e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f000 f879 	bl	8007438 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2208      	movs	r2, #8
 800734a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e029      	b.n	80073ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	69db      	ldr	r3, [r3, #28]
 8007360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007364:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007368:	d111      	bne.n	800738e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007372:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f000 f85f 	bl	8007438 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2220      	movs	r2, #32
 800737e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e00f      	b.n	80073ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	69da      	ldr	r2, [r3, #28]
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	4013      	ands	r3, r2
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	429a      	cmp	r2, r3
 800739c:	bf0c      	ite	eq
 800739e:	2301      	moveq	r3, #1
 80073a0:	2300      	movne	r3, #0
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	461a      	mov	r2, r3
 80073a6:	79fb      	ldrb	r3, [r7, #7]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d0a0      	beq.n	80072ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80073b6:	b480      	push	{r7}
 80073b8:	b08f      	sub	sp, #60	; 0x3c
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c4:	6a3b      	ldr	r3, [r7, #32]
 80073c6:	e853 3f00 	ldrex	r3, [r3]
 80073ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80073d2:	637b      	str	r3, [r7, #52]	; 0x34
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	461a      	mov	r2, r3
 80073da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073de:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073e4:	e841 2300 	strex	r3, r2, [r1]
 80073e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1e6      	bne.n	80073be <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3308      	adds	r3, #8
 80073f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	e853 3f00 	ldrex	r3, [r3]
 80073fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007406:	633b      	str	r3, [r7, #48]	; 0x30
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3308      	adds	r3, #8
 800740e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007410:	61ba      	str	r2, [r7, #24]
 8007412:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007414:	6979      	ldr	r1, [r7, #20]
 8007416:	69ba      	ldr	r2, [r7, #24]
 8007418:	e841 2300 	strex	r3, r2, [r1]
 800741c:	613b      	str	r3, [r7, #16]
   return(result);
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d1e5      	bne.n	80073f0 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2220      	movs	r2, #32
 8007428:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800742c:	bf00      	nop
 800742e:	373c      	adds	r7, #60	; 0x3c
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007438:	b480      	push	{r7}
 800743a:	b095      	sub	sp, #84	; 0x54
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007448:	e853 3f00 	ldrex	r3, [r3]
 800744c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800744e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007450:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007454:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	461a      	mov	r2, r3
 800745c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800745e:	643b      	str	r3, [r7, #64]	; 0x40
 8007460:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007462:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007464:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007466:	e841 2300 	strex	r3, r2, [r1]
 800746a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800746c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1e6      	bne.n	8007440 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3308      	adds	r3, #8
 8007478:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	e853 3f00 	ldrex	r3, [r3]
 8007480:	61fb      	str	r3, [r7, #28]
   return(result);
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007488:	f023 0301 	bic.w	r3, r3, #1
 800748c:	64bb      	str	r3, [r7, #72]	; 0x48
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3308      	adds	r3, #8
 8007494:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007496:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007498:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800749c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800749e:	e841 2300 	strex	r3, r2, [r1]
 80074a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1e3      	bne.n	8007472 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d118      	bne.n	80074e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	e853 3f00 	ldrex	r3, [r3]
 80074be:	60bb      	str	r3, [r7, #8]
   return(result);
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	f023 0310 	bic.w	r3, r3, #16
 80074c6:	647b      	str	r3, [r7, #68]	; 0x44
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	461a      	mov	r2, r3
 80074ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074d0:	61bb      	str	r3, [r7, #24]
 80074d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d4:	6979      	ldr	r1, [r7, #20]
 80074d6:	69ba      	ldr	r2, [r7, #24]
 80074d8:	e841 2300 	strex	r3, r2, [r1]
 80074dc:	613b      	str	r3, [r7, #16]
   return(result);
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1e6      	bne.n	80074b2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2220      	movs	r2, #32
 80074e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80074f8:	bf00      	nop
 80074fa:	3754      	adds	r7, #84	; 0x54
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b090      	sub	sp, #64	; 0x40
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007510:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0320 	and.w	r3, r3, #32
 800751c:	2b00      	cmp	r3, #0
 800751e:	d137      	bne.n	8007590 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007522:	2200      	movs	r2, #0
 8007524:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	3308      	adds	r3, #8
 800752e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007532:	e853 3f00 	ldrex	r3, [r3]
 8007536:	623b      	str	r3, [r7, #32]
   return(result);
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800753e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	3308      	adds	r3, #8
 8007546:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007548:	633a      	str	r2, [r7, #48]	; 0x30
 800754a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800754e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007550:	e841 2300 	strex	r3, r2, [r1]
 8007554:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1e5      	bne.n	8007528 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800755c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	e853 3f00 	ldrex	r3, [r3]
 8007568:	60fb      	str	r3, [r7, #12]
   return(result);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007570:	637b      	str	r3, [r7, #52]	; 0x34
 8007572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	461a      	mov	r2, r3
 8007578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800757a:	61fb      	str	r3, [r7, #28]
 800757c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757e:	69b9      	ldr	r1, [r7, #24]
 8007580:	69fa      	ldr	r2, [r7, #28]
 8007582:	e841 2300 	strex	r3, r2, [r1]
 8007586:	617b      	str	r3, [r7, #20]
   return(result);
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1e6      	bne.n	800755c <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800758e:	e004      	b.n	800759a <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8007590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007592:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007596:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007598:	4798      	blx	r3
}
 800759a:	bf00      	nop
 800759c:	3740      	adds	r7, #64	; 0x40
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b084      	sub	sp, #16
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ae:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075ba:	bf00      	nop
 80075bc:	3710      	adds	r7, #16
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b086      	sub	sp, #24
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ce:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075d6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075de:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ea:	2b80      	cmp	r3, #128	; 0x80
 80075ec:	d109      	bne.n	8007602 <UART_DMAError+0x40>
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	2b21      	cmp	r3, #33	; 0x21
 80075f2:	d106      	bne.n	8007602 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80075fc:	6978      	ldr	r0, [r7, #20]
 80075fe:	f7ff feda 	bl	80073b6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800760c:	2b40      	cmp	r3, #64	; 0x40
 800760e:	d109      	bne.n	8007624 <UART_DMAError+0x62>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2b22      	cmp	r3, #34	; 0x22
 8007614:	d106      	bne.n	8007624 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2200      	movs	r2, #0
 800761a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800761e:	6978      	ldr	r0, [r7, #20]
 8007620:	f7ff ff0a 	bl	8007438 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800762a:	f043 0210 	orr.w	r2, r3, #16
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800763a:	6978      	ldr	r0, [r7, #20]
 800763c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800763e:	bf00      	nop
 8007640:	3718      	adds	r7, #24
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b084      	sub	sp, #16
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007652:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800766e:	bf00      	nop
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b088      	sub	sp, #32
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	e853 3f00 	ldrex	r3, [r3]
 800768a:	60bb      	str	r3, [r7, #8]
   return(result);
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007692:	61fb      	str	r3, [r7, #28]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	461a      	mov	r2, r3
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	61bb      	str	r3, [r7, #24]
 800769e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a0:	6979      	ldr	r1, [r7, #20]
 80076a2:	69ba      	ldr	r2, [r7, #24]
 80076a4:	e841 2300 	strex	r3, r2, [r1]
 80076a8:	613b      	str	r3, [r7, #16]
   return(result);
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1e6      	bne.n	800767e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2220      	movs	r2, #32
 80076b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	679a      	str	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076c8:	bf00      	nop
 80076ca:	3720      	adds	r7, #32
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800771a:	2b01      	cmp	r3, #1
 800771c:	d101      	bne.n	8007722 <HAL_UARTEx_DisableFifoMode+0x16>
 800771e:	2302      	movs	r3, #2
 8007720:	e027      	b.n	8007772 <HAL_UARTEx_DisableFifoMode+0x66>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2224      	movs	r2, #36	; 0x24
 800772e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f022 0201 	bic.w	r2, r2, #1
 8007748:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007750:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2220      	movs	r2, #32
 8007764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b084      	sub	sp, #16
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
 8007786:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800778e:	2b01      	cmp	r3, #1
 8007790:	d101      	bne.n	8007796 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007792:	2302      	movs	r3, #2
 8007794:	e02d      	b.n	80077f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2224      	movs	r2, #36	; 0x24
 80077a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f022 0201 	bic.w	r2, r2, #1
 80077bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f850 	bl	8007878 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2220      	movs	r2, #32
 80077e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b084      	sub	sp, #16
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800780a:	2b01      	cmp	r3, #1
 800780c:	d101      	bne.n	8007812 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800780e:	2302      	movs	r3, #2
 8007810:	e02d      	b.n	800786e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2224      	movs	r2, #36	; 0x24
 800781e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f022 0201 	bic.w	r2, r2, #1
 8007838:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	683a      	ldr	r2, [r7, #0]
 800784a:	430a      	orrs	r2, r1
 800784c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f812 	bl	8007878 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2220      	movs	r2, #32
 8007860:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
	...

08007878 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007884:	2b00      	cmp	r3, #0
 8007886:	d108      	bne.n	800789a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007898:	e031      	b.n	80078fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800789a:	2308      	movs	r3, #8
 800789c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800789e:	2308      	movs	r3, #8
 80078a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	0e5b      	lsrs	r3, r3, #25
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	f003 0307 	and.w	r3, r3, #7
 80078b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	0f5b      	lsrs	r3, r3, #29
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	f003 0307 	and.w	r3, r3, #7
 80078c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078c2:	7bbb      	ldrb	r3, [r7, #14]
 80078c4:	7b3a      	ldrb	r2, [r7, #12]
 80078c6:	4911      	ldr	r1, [pc, #68]	; (800790c <UARTEx_SetNbDataToProcess+0x94>)
 80078c8:	5c8a      	ldrb	r2, [r1, r2]
 80078ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80078ce:	7b3a      	ldrb	r2, [r7, #12]
 80078d0:	490f      	ldr	r1, [pc, #60]	; (8007910 <UARTEx_SetNbDataToProcess+0x98>)
 80078d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80078d8:	b29a      	uxth	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
 80078e2:	7b7a      	ldrb	r2, [r7, #13]
 80078e4:	4909      	ldr	r1, [pc, #36]	; (800790c <UARTEx_SetNbDataToProcess+0x94>)
 80078e6:	5c8a      	ldrb	r2, [r1, r2]
 80078e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80078ec:	7b7a      	ldrb	r2, [r7, #13]
 80078ee:	4908      	ldr	r1, [pc, #32]	; (8007910 <UARTEx_SetNbDataToProcess+0x98>)
 80078f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80078fe:	bf00      	nop
 8007900:	3714      	adds	r7, #20
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	08010244 	.word	0x08010244
 8007910:	0801024c 	.word	0x0801024c

08007914 <LL_AHB1_GRP1_EnableClock>:
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800791c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007920:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007922:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4313      	orrs	r3, r2
 800792a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800792c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007930:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4013      	ands	r3, r2
 8007936:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007938:	68fb      	ldr	r3, [r7, #12]
}
 800793a:	bf00      	nop
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <LL_CRC_ResetCRCCalculationUnit>:
  * @rmtoll CR           RESET         LL_CRC_ResetCRCCalculationUnit
  * @param  CRCx CRC Instance
  * @retval None
  */
__STATIC_INLINE void LL_CRC_ResetCRCCalculationUnit(CRC_TypeDef *CRCx)
{
 8007946:	b480      	push	{r7}
 8007948:	b083      	sub	sp, #12
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f043 0201 	orr.w	r2, r3, #1
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	609a      	str	r2, [r3, #8]
}
 800795a:	bf00      	nop
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <LL_CRC_SetPolynomialSize>:
  *         @arg @ref LL_CRC_POLYLENGTH_8B
  *         @arg @ref LL_CRC_POLYLENGTH_7B
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialSize(CRC_TypeDef *CRCx, uint32_t PolySize)
{
 8007966:	b480      	push	{r7}
 8007968:	b083      	sub	sp, #12
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f023 0218 	bic.w	r2, r3, #24
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	431a      	orrs	r2, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	609a      	str	r2, [r3, #8]
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <LL_CRC_SetPolynomialCoef>:
  * @param  CRCx CRC Instance
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	683a      	ldr	r2, [r7, #0]
 800799a:	615a      	str	r2, [r3, #20]
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <LL_CRC_FeedData32>:
  * @param  CRCx CRC Instance
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->DR, InData);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	683a      	ldr	r2, [r7, #0]
 80079b6:	601a      	str	r2, [r3, #0]
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <LL_CRC_FeedData16>:
  * @param  CRCx CRC Instance
  * @param  InData 16 bit value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData16(CRC_TypeDef *CRCx, uint16_t InData)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	460b      	mov	r3, r1
 80079ce:	807b      	strh	r3, [r7, #2]
  __IO uint16_t *pReg;

  pReg = (__IO uint16_t *)(__IO void *)(&CRCx->DR);                             /* Derogation MisraC2012 R.11.5 */
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	60fb      	str	r3, [r7, #12]
  *pReg = InData;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	887a      	ldrh	r2, [r7, #2]
 80079d8:	801a      	strh	r2, [r3, #0]
}
 80079da:	bf00      	nop
 80079dc:	3714      	adds	r7, #20
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <LL_CRC_ReadData16>:
  * @rmtoll DR           DR            LL_CRC_ReadData16
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (16 bits).
  */
__STATIC_INLINE uint16_t LL_CRC_ReadData16(const CRC_TypeDef *CRCx)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  return (uint16_t)READ_REG(CRCx->DR);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	b29b      	uxth	r3, r3
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <EE_Init>:
  * @retval EE_Status
  *           - EE_OK in case of success
  *           - EE error code in case of error
  */
EE_Status EE_Init(EE_Erase_type EraseType)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b090      	sub	sp, #64	; 0x40
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	4603      	mov	r3, r0
 8007a08:	71fb      	strb	r3, [r7, #7]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 8007a0a:	2305      	movs	r3, #5
 8007a0c:	76bb      	strb	r3, [r7, #26]
  uint32_t page = 0U, pageaddress = 0U, varidx = 0U,
 8007a0e:	2300      	movs	r3, #0
 8007a10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a12:	2300      	movs	r3, #0
 8007a14:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a16:	2300      	movs	r3, #0
 8007a18:	637b      	str	r3, [r7, #52]	; 0x34
           nbactivepage = 0U, nbactivereceivepage = 0U, nbvalidpage = 0U,
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	633b      	str	r3, [r7, #48]	; 0x30
 8007a1e:	2300      	movs	r3, #0
 8007a20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a22:	2300      	movs	r3, #0
 8007a24:	62bb      	str	r3, [r7, #40]	; 0x28
           lastvalidpage = 0U, firstvalidpage = 0U,
 8007a26:	2300      	movs	r3, #0
 8007a28:	627b      	str	r3, [r7, #36]	; 0x24
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	623b      	str	r3, [r7, #32]
           recoverytransfer = 0U;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8007a32:	f04f 0200 	mov.w	r2, #0
 8007a36:	f04f 0300 	mov.w	r3, #0
 8007a3a:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  uint32_t Address = 0U;
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  EE_DATA_TYPE dummy_data[2] = {0, 0};
#endif
  EE_State_Reliability pagestate = STATE_RELIABLE;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	76fb      	strb	r3, [r7, #27]

  EE_Status status = EE_OK;
 8007a42:	2300      	movs	r3, #0
 8007a44:	81fb      	strh	r3, [r7, #14]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 8007a46:	f001 fe31 	bl	80096ac <FI_CheckBankConfig>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d002      	beq.n	8007a56 <EE_Init+0x56>
  {
    return EE_INVALID_BANK_CFG;
 8007a50:	230e      	movs	r3, #14
 8007a52:	f000 bcfe 	b.w	8008452 <EE_Init+0xa52>
  /***************************************************************************/
  /* Step 0: Perform initial configuration     */
  /***************************************************************************/
  /* Configure CRC peripheral for eeprom emulation usage */

  ConfigureCrc();
 8007a56:	f001 fcd7 	bl	8009408 <ConfigureCrc>
  /* Step 1: Read all lines of the flash pages of eeprom emulation to        */
  /*         delete corrupted lines detectable through NMI                   */
  /***************************************************************************/
  /* We set the flag indicating the cleanup phase is operating to 1 */

  CleanupPhase = 1;
 8007a5a:	4b9a      	ldr	r3, [pc, #616]	; (8007cc4 <EE_Init+0x2c4>)
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	701a      	strb	r2, [r3, #0]
  
#ifndef STM32C031xx
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8007a60:	4b99      	ldr	r3, [pc, #612]	; (8007cc8 <EE_Init+0x2c8>)
 8007a62:	881b      	ldrh	r3, [r3, #0]
 8007a64:	029a      	lsls	r2, r3, #10
 8007a66:	4b99      	ldr	r3, [pc, #612]	; (8007ccc <EE_Init+0x2cc>)
 8007a68:	4013      	ands	r3, r2
 8007a6a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007a6e:	fbb2 f1f3 	udiv	r1, r2, r3
 8007a72:	fb01 f303 	mul.w	r3, r1, r3
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	0b1b      	lsrs	r3, r3, #12
 8007a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a7c:	e02e      	b.n	8007adc <EE_Init+0xdc>
  {
    pageaddress = PAGE_ADDRESS(page);
 8007a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a80:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007a84:	031a      	lsls	r2, r3, #12
 8007a86:	4b90      	ldr	r3, [pc, #576]	; (8007cc8 <EE_Init+0x2c8>)
 8007a88:	881b      	ldrh	r3, [r3, #0]
 8007a8a:	0299      	lsls	r1, r3, #10
 8007a8c:	4b8f      	ldr	r3, [pc, #572]	; (8007ccc <EE_Init+0x2cc>)
 8007a8e:	400b      	ands	r3, r1
 8007a90:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007a94:	fbb1 f1f3 	udiv	r1, r1, r3
 8007a98:	4b8b      	ldr	r3, [pc, #556]	; (8007cc8 <EE_Init+0x2c8>)
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	0298      	lsls	r0, r3, #10
 8007a9e:	4b8b      	ldr	r3, [pc, #556]	; (8007ccc <EE_Init+0x2cc>)
 8007aa0:	4003      	ands	r3, r0
 8007aa2:	fb01 f303 	mul.w	r3, r1, r3
 8007aa6:	4413      	add	r3, r2
 8007aa8:	63bb      	str	r3, [r7, #56]	; 0x38
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8007aaa:	2300      	movs	r3, #0
 8007aac:	637b      	str	r3, [r7, #52]	; 0x34
 8007aae:	e00e      	b.n	8007ace <EE_Init+0xce>
        we save the address read to set its content to 0 in case it triggered an NMI (see NMI_Handler in stm32lxxx_it.c).
        In the rest of the program, we do nothing in case a NMI is triggers by a reading because no NMI should be triggered
        since we have cleanup the EEPROM emulated. By the way, there is still the CRC code associated to each EEPROM line
        that allows to verify its valid state.
      */
      AddressRead = pageaddress + varidx;
 8007ab0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab4:	4413      	add	r3, r2
 8007ab6:	4a86      	ldr	r2, [pc, #536]	; (8007cd0 <EE_Init+0x2d0>)
 8007ab8:	6013      	str	r3, [r2, #0]
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + varidx));
 8007aba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007abe:	4413      	add	r3, r2
 8007ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8007ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aca:	3308      	adds	r3, #8
 8007acc:	637b      	str	r3, [r7, #52]	; 0x34
 8007ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ad4:	d3ec      	bcc.n	8007ab0 <EE_Init+0xb0>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8007ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ad8:	3301      	adds	r3, #1
 8007ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007adc:	4b7a      	ldr	r3, [pc, #488]	; (8007cc8 <EE_Init+0x2c8>)
 8007ade:	881b      	ldrh	r3, [r3, #0]
 8007ae0:	029a      	lsls	r2, r3, #10
 8007ae2:	4b7a      	ldr	r3, [pc, #488]	; (8007ccc <EE_Init+0x2cc>)
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007aea:	fbb2 f1f3 	udiv	r1, r2, r3
 8007aee:	fb01 f303 	mul.w	r3, r1, r3
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	0b1b      	lsrs	r3, r3, #12
 8007af6:	3306      	adds	r3, #6
 8007af8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d3bf      	bcc.n	8007a7e <EE_Init+0x7e>
     EE_DeleteCorruptedFlashAddress(Address);     //Delete corrupted address  
  }
#endif
#endif
  /* We set the flag indicating the cleanup phase is operating to 0 because it just ended */
  CleanupPhase = 0;
 8007afe:	4b71      	ldr	r3, [pc, #452]	; (8007cc4 <EE_Init+0x2c4>)
 8007b00:	2200      	movs	r2, #0
 8007b02:	701a      	strb	r2, [r3, #0]
  /*         present, by setting missing receive page state                  */
  /***************************************************************************/
  /* Check if no active page and no receive page present */
  /* Browse all pages */

  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8007b04:	4b70      	ldr	r3, [pc, #448]	; (8007cc8 <EE_Init+0x2c8>)
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	029a      	lsls	r2, r3, #10
 8007b0a:	4b70      	ldr	r3, [pc, #448]	; (8007ccc <EE_Init+0x2cc>)
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007b12:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b16:	fb01 f303 	mul.w	r3, r1, r3
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	0b1b      	lsrs	r3, r3, #12
 8007b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b20:	e034      	b.n	8007b8c <EE_Init+0x18c>
  {
    pageaddress = PAGE_ADDRESS(page);
 8007b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b24:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007b28:	031a      	lsls	r2, r3, #12
 8007b2a:	4b67      	ldr	r3, [pc, #412]	; (8007cc8 <EE_Init+0x2c8>)
 8007b2c:	881b      	ldrh	r3, [r3, #0]
 8007b2e:	0299      	lsls	r1, r3, #10
 8007b30:	4b66      	ldr	r3, [pc, #408]	; (8007ccc <EE_Init+0x2cc>)
 8007b32:	400b      	ands	r3, r1
 8007b34:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007b38:	fbb1 f1f3 	udiv	r1, r1, r3
 8007b3c:	4b62      	ldr	r3, [pc, #392]	; (8007cc8 <EE_Init+0x2c8>)
 8007b3e:	881b      	ldrh	r3, [r3, #0]
 8007b40:	0298      	lsls	r0, r3, #10
 8007b42:	4b62      	ldr	r3, [pc, #392]	; (8007ccc <EE_Init+0x2cc>)
 8007b44:	4003      	ands	r3, r0
 8007b46:	fb01 f303 	mul.w	r3, r1, r3
 8007b4a:	4413      	add	r3, r2
 8007b4c:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 8007b4e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b50:	f001 fbf8 	bl	8009344 <GetPageState>
 8007b54:	4603      	mov	r3, r0
 8007b56:	76bb      	strb	r3, [r7, #26]

    /* Search for active and receive page */
    if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_RECEIVE))
 8007b58:	7ebb      	ldrb	r3, [r7, #26]
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d002      	beq.n	8007b64 <EE_Init+0x164>
 8007b5e:	7ebb      	ldrb	r3, [r7, #26]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d103      	bne.n	8007b6c <EE_Init+0x16c>
    {
      nbactivereceivepage++;
 8007b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b66:	3301      	adds	r3, #1
 8007b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b6a:	e00c      	b.n	8007b86 <EE_Init+0x186>
    }
    /* Keep index of first valid page, and last valid page */
    else if (pagestatus == STATE_PAGE_VALID)
 8007b6c:	7ebb      	ldrb	r3, [r7, #26]
 8007b6e:	2b03      	cmp	r3, #3
 8007b70:	d109      	bne.n	8007b86 <EE_Init+0x186>
    {
      if (nbvalidpage == 0U)
 8007b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d101      	bne.n	8007b7c <EE_Init+0x17c>
      {
        firstvalidpage = page;
 8007b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b7a:	623b      	str	r3, [r7, #32]
      }
      lastvalidpage = page;
 8007b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b7e:	627b      	str	r3, [r7, #36]	; 0x24
      nbvalidpage++;
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	3301      	adds	r3, #1
 8007b84:	62bb      	str	r3, [r7, #40]	; 0x28
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8007b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b88:	3301      	adds	r3, #1
 8007b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b8c:	4b4e      	ldr	r3, [pc, #312]	; (8007cc8 <EE_Init+0x2c8>)
 8007b8e:	881b      	ldrh	r3, [r3, #0]
 8007b90:	029a      	lsls	r2, r3, #10
 8007b92:	4b4e      	ldr	r3, [pc, #312]	; (8007ccc <EE_Init+0x2cc>)
 8007b94:	4013      	ands	r3, r2
 8007b96:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007b9a:	fbb2 f1f3 	udiv	r1, r2, r3
 8007b9e:	fb01 f303 	mul.w	r3, r1, r3
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	0b1b      	lsrs	r3, r3, #12
 8007ba6:	3306      	adds	r3, #6
 8007ba8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d3b9      	bcc.n	8007b22 <EE_Init+0x122>
    }
  }

  /* Check if no active and no receive page have been detected */
  if (nbactivereceivepage == 0U)
 8007bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d178      	bne.n	8007ca6 <EE_Init+0x2a6>
  {
    /* Check if valid pages have been detected */
    if (nbvalidpage > 0U)
 8007bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d070      	beq.n	8007c9c <EE_Init+0x29c>
    {
      /* Check state of page just before first valid page.
      If it is erasing page, then page after last valid page shall be set
      to receiving state */
      if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(firstvalidpage))) == STATE_PAGE_ERASING)
 8007bba:	4b43      	ldr	r3, [pc, #268]	; (8007cc8 <EE_Init+0x2c8>)
 8007bbc:	881b      	ldrh	r3, [r3, #0]
 8007bbe:	029a      	lsls	r2, r3, #10
 8007bc0:	4b42      	ldr	r3, [pc, #264]	; (8007ccc <EE_Init+0x2cc>)
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007bc8:	fbb2 f1f3 	udiv	r1, r2, r3
 8007bcc:	fb01 f303 	mul.w	r3, r1, r3
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	0b1b      	lsrs	r3, r3, #12
 8007bd4:	6a3a      	ldr	r2, [r7, #32]
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	1d59      	adds	r1, r3, #5
 8007bda:	4b3e      	ldr	r3, [pc, #248]	; (8007cd4 <EE_Init+0x2d4>)
 8007bdc:	fba3 2301 	umull	r2, r3, r3, r1
 8007be0:	089a      	lsrs	r2, r3, #2
 8007be2:	4613      	mov	r3, r2
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	4413      	add	r3, r2
 8007be8:	005b      	lsls	r3, r3, #1
 8007bea:	1aca      	subs	r2, r1, r3
 8007bec:	4b36      	ldr	r3, [pc, #216]	; (8007cc8 <EE_Init+0x2c8>)
 8007bee:	881b      	ldrh	r3, [r3, #0]
 8007bf0:	0299      	lsls	r1, r3, #10
 8007bf2:	4b36      	ldr	r3, [pc, #216]	; (8007ccc <EE_Init+0x2cc>)
 8007bf4:	400b      	ands	r3, r1
 8007bf6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007bfa:	fbb1 f0f3 	udiv	r0, r1, r3
 8007bfe:	fb00 f303 	mul.w	r3, r0, r3
 8007c02:	1acb      	subs	r3, r1, r3
 8007c04:	0b1b      	lsrs	r3, r3, #12
 8007c06:	4413      	add	r3, r2
 8007c08:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007c0c:	031a      	lsls	r2, r3, #12
 8007c0e:	4b2e      	ldr	r3, [pc, #184]	; (8007cc8 <EE_Init+0x2c8>)
 8007c10:	881b      	ldrh	r3, [r3, #0]
 8007c12:	0299      	lsls	r1, r3, #10
 8007c14:	4b2d      	ldr	r3, [pc, #180]	; (8007ccc <EE_Init+0x2cc>)
 8007c16:	400b      	ands	r3, r1
 8007c18:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007c1c:	fbb1 f1f3 	udiv	r1, r1, r3
 8007c20:	4b29      	ldr	r3, [pc, #164]	; (8007cc8 <EE_Init+0x2c8>)
 8007c22:	881b      	ldrh	r3, [r3, #0]
 8007c24:	0298      	lsls	r0, r3, #10
 8007c26:	4b29      	ldr	r3, [pc, #164]	; (8007ccc <EE_Init+0x2cc>)
 8007c28:	4003      	ands	r3, r0
 8007c2a:	fb01 f303 	mul.w	r3, r1, r3
 8007c2e:	4413      	add	r3, r2
 8007c30:	4618      	mov	r0, r3
 8007c32:	f001 fb87 	bl	8009344 <GetPageState>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b04      	cmp	r3, #4
 8007c3a:	d134      	bne.n	8007ca6 <EE_Init+0x2a6>
      {
        if (SetPageState(FOLLOWING_PAGE(lastvalidpage), STATE_PAGE_RECEIVE) != EE_OK)
 8007c3c:	4b22      	ldr	r3, [pc, #136]	; (8007cc8 <EE_Init+0x2c8>)
 8007c3e:	881b      	ldrh	r3, [r3, #0]
 8007c40:	029a      	lsls	r2, r3, #10
 8007c42:	4b22      	ldr	r3, [pc, #136]	; (8007ccc <EE_Init+0x2cc>)
 8007c44:	4013      	ands	r3, r2
 8007c46:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007c4a:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c4e:	fb01 f303 	mul.w	r3, r1, r3
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	0b1b      	lsrs	r3, r3, #12
 8007c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	1c59      	adds	r1, r3, #1
 8007c5c:	4b1d      	ldr	r3, [pc, #116]	; (8007cd4 <EE_Init+0x2d4>)
 8007c5e:	fba3 2301 	umull	r2, r3, r3, r1
 8007c62:	089a      	lsrs	r2, r3, #2
 8007c64:	4613      	mov	r3, r2
 8007c66:	005b      	lsls	r3, r3, #1
 8007c68:	4413      	add	r3, r2
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	1aca      	subs	r2, r1, r3
 8007c6e:	4b16      	ldr	r3, [pc, #88]	; (8007cc8 <EE_Init+0x2c8>)
 8007c70:	881b      	ldrh	r3, [r3, #0]
 8007c72:	0299      	lsls	r1, r3, #10
 8007c74:	4b15      	ldr	r3, [pc, #84]	; (8007ccc <EE_Init+0x2cc>)
 8007c76:	400b      	ands	r3, r1
 8007c78:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007c7c:	fbb1 f0f3 	udiv	r0, r1, r3
 8007c80:	fb00 f303 	mul.w	r3, r0, r3
 8007c84:	1acb      	subs	r3, r1, r3
 8007c86:	0b1b      	lsrs	r3, r3, #12
 8007c88:	4413      	add	r3, r2
 8007c8a:	2101      	movs	r1, #1
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f001 fa87 	bl	80091a0 <SetPageState>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d006      	beq.n	8007ca6 <EE_Init+0x2a6>
        {
          return EE_WRITE_ERROR;
 8007c98:	2302      	movs	r3, #2
 8007c9a:	e3da      	b.n	8008452 <EE_Init+0xa52>
      }
    }
    /* Format flash pages used for eeprom emulation in case no active, no receive, no valid pages are found */
    else
    {
      return EE_Format(EE_FORCED_ERASE);
 8007c9c:	2000      	movs	r0, #0
 8007c9e:	f000 fbe7 	bl	8008470 <EE_Format>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	e3d5      	b.n	8008452 <EE_Init+0xa52>
  /* Step 3: Handle case of reset during transfer, by performing       */
  /*         transfer recovery                                         */
  /*********************************************************************/

  /* Browse all pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8007ca6:	4b08      	ldr	r3, [pc, #32]	; (8007cc8 <EE_Init+0x2c8>)
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	029a      	lsls	r2, r3, #10
 8007cac:	4b07      	ldr	r3, [pc, #28]	; (8007ccc <EE_Init+0x2cc>)
 8007cae:	4013      	ands	r3, r2
 8007cb0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007cb4:	fbb2 f1f3 	udiv	r1, r2, r3
 8007cb8:	fb01 f303 	mul.w	r3, r1, r3
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	0b1b      	lsrs	r3, r3, #12
 8007cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cc2:	e0ee      	b.n	8007ea2 <EE_Init+0x4a2>
 8007cc4:	20000550 	.word	0x20000550
 8007cc8:	1fff75e0 	.word	0x1fff75e0
 8007ccc:	001ffc00 	.word	0x001ffc00
 8007cd0:	2000054c 	.word	0x2000054c
 8007cd4:	aaaaaaab 	.word	0xaaaaaaab
  {
    pageaddress = PAGE_ADDRESS(page);
 8007cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cda:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007cde:	031a      	lsls	r2, r3, #12
 8007ce0:	4b81      	ldr	r3, [pc, #516]	; (8007ee8 <EE_Init+0x4e8>)
 8007ce2:	881b      	ldrh	r3, [r3, #0]
 8007ce4:	0299      	lsls	r1, r3, #10
 8007ce6:	4b81      	ldr	r3, [pc, #516]	; (8007eec <EE_Init+0x4ec>)
 8007ce8:	400b      	ands	r3, r1
 8007cea:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007cee:	fbb1 f1f3 	udiv	r1, r1, r3
 8007cf2:	4b7d      	ldr	r3, [pc, #500]	; (8007ee8 <EE_Init+0x4e8>)
 8007cf4:	881b      	ldrh	r3, [r3, #0]
 8007cf6:	0298      	lsls	r0, r3, #10
 8007cf8:	4b7c      	ldr	r3, [pc, #496]	; (8007eec <EE_Init+0x4ec>)
 8007cfa:	4003      	ands	r3, r0
 8007cfc:	fb01 f303 	mul.w	r3, r1, r3
 8007d00:	4413      	add	r3, r2
 8007d02:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 8007d04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d06:	f001 fb1d 	bl	8009344 <GetPageState>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	76bb      	strb	r3, [r7, #26]

    /* Check if there is receive page, meaning transfer has been interrupted */
    if (pagestatus == STATE_PAGE_RECEIVE)
 8007d0e:	7ebb      	ldrb	r3, [r7, #26]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	f040 80c3 	bne.w	8007e9c <EE_Init+0x49c>
    {
      /* Verify that receive page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8007d16:	4b74      	ldr	r3, [pc, #464]	; (8007ee8 <EE_Init+0x4e8>)
 8007d18:	881b      	ldrh	r3, [r3, #0]
 8007d1a:	029a      	lsls	r2, r3, #10
 8007d1c:	4b73      	ldr	r3, [pc, #460]	; (8007eec <EE_Init+0x4ec>)
 8007d1e:	4013      	ands	r3, r2
 8007d20:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007d24:	fbb2 f1f3 	udiv	r1, r2, r3
 8007d28:	fb01 f303 	mul.w	r3, r1, r3
 8007d2c:	1ad3      	subs	r3, r2, r3
 8007d2e:	0b1b      	lsrs	r3, r3, #12
 8007d30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d057      	beq.n	8007de6 <EE_Init+0x3e6>
 8007d36:	4b6c      	ldr	r3, [pc, #432]	; (8007ee8 <EE_Init+0x4e8>)
 8007d38:	881b      	ldrh	r3, [r3, #0]
 8007d3a:	029a      	lsls	r2, r3, #10
 8007d3c:	4b6b      	ldr	r3, [pc, #428]	; (8007eec <EE_Init+0x4ec>)
 8007d3e:	4013      	ands	r3, r2
 8007d40:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007d44:	fbb2 f1f3 	udiv	r1, r2, r3
 8007d48:	fb01 f303 	mul.w	r3, r1, r3
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	0b1b      	lsrs	r3, r3, #12
 8007d50:	3303      	adds	r3, #3
 8007d52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d046      	beq.n	8007de6 <EE_Init+0x3e6>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8007d58:	4b63      	ldr	r3, [pc, #396]	; (8007ee8 <EE_Init+0x4e8>)
 8007d5a:	881b      	ldrh	r3, [r3, #0]
 8007d5c:	029a      	lsls	r2, r3, #10
 8007d5e:	4b63      	ldr	r3, [pc, #396]	; (8007eec <EE_Init+0x4ec>)
 8007d60:	4013      	ands	r3, r2
 8007d62:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007d66:	fbb2 f1f3 	udiv	r1, r2, r3
 8007d6a:	fb01 f303 	mul.w	r3, r1, r3
 8007d6e:	1ad3      	subs	r3, r2, r3
 8007d70:	0b1b      	lsrs	r3, r3, #12
 8007d72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	1d59      	adds	r1, r3, #5
 8007d78:	4b5d      	ldr	r3, [pc, #372]	; (8007ef0 <EE_Init+0x4f0>)
 8007d7a:	fba3 2301 	umull	r2, r3, r3, r1
 8007d7e:	089a      	lsrs	r2, r3, #2
 8007d80:	4613      	mov	r3, r2
 8007d82:	005b      	lsls	r3, r3, #1
 8007d84:	4413      	add	r3, r2
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	1aca      	subs	r2, r1, r3
 8007d8a:	4b57      	ldr	r3, [pc, #348]	; (8007ee8 <EE_Init+0x4e8>)
 8007d8c:	881b      	ldrh	r3, [r3, #0]
 8007d8e:	0299      	lsls	r1, r3, #10
 8007d90:	4b56      	ldr	r3, [pc, #344]	; (8007eec <EE_Init+0x4ec>)
 8007d92:	400b      	ands	r3, r1
 8007d94:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007d98:	fbb1 f0f3 	udiv	r0, r1, r3
 8007d9c:	fb00 f303 	mul.w	r3, r0, r3
 8007da0:	1acb      	subs	r3, r1, r3
 8007da2:	0b1b      	lsrs	r3, r3, #12
 8007da4:	4413      	add	r3, r2
 8007da6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007daa:	031a      	lsls	r2, r3, #12
 8007dac:	4b4e      	ldr	r3, [pc, #312]	; (8007ee8 <EE_Init+0x4e8>)
 8007dae:	881b      	ldrh	r3, [r3, #0]
 8007db0:	0299      	lsls	r1, r3, #10
 8007db2:	4b4e      	ldr	r3, [pc, #312]	; (8007eec <EE_Init+0x4ec>)
 8007db4:	400b      	ands	r3, r1
 8007db6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007dba:	fbb1 f1f3 	udiv	r1, r1, r3
 8007dbe:	4b4a      	ldr	r3, [pc, #296]	; (8007ee8 <EE_Init+0x4e8>)
 8007dc0:	881b      	ldrh	r3, [r3, #0]
 8007dc2:	0298      	lsls	r0, r3, #10
 8007dc4:	4b49      	ldr	r3, [pc, #292]	; (8007eec <EE_Init+0x4ec>)
 8007dc6:	4003      	ands	r3, r0
 8007dc8:	fb01 f303 	mul.w	r3, r1, r3
 8007dcc:	4413      	add	r3, r2
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f001 fab8 	bl	8009344 <GetPageState>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b03      	cmp	r3, #3
 8007dd8:	d102      	bne.n	8007de0 <EE_Init+0x3e0>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8007dde:	e048      	b.n	8007e72 <EE_Init+0x472>
        }
        else /* Previous page is not valid state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8007de0:	2301      	movs	r3, #1
 8007de2:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8007de4:	e045      	b.n	8007e72 <EE_Init+0x472>
        }
      }
      else /* The receive page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 8007de6:	4b40      	ldr	r3, [pc, #256]	; (8007ee8 <EE_Init+0x4e8>)
 8007de8:	881b      	ldrh	r3, [r3, #0]
 8007dea:	029a      	lsls	r2, r3, #10
 8007dec:	4b3f      	ldr	r3, [pc, #252]	; (8007eec <EE_Init+0x4ec>)
 8007dee:	4013      	ands	r3, r2
 8007df0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007df4:	fbb2 f1f3 	udiv	r1, r2, r3
 8007df8:	fb01 f303 	mul.w	r3, r1, r3
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	0b1b      	lsrs	r3, r3, #12
 8007e00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	1c59      	adds	r1, r3, #1
 8007e06:	4b3a      	ldr	r3, [pc, #232]	; (8007ef0 <EE_Init+0x4f0>)
 8007e08:	fba3 2301 	umull	r2, r3, r3, r1
 8007e0c:	089a      	lsrs	r2, r3, #2
 8007e0e:	4613      	mov	r3, r2
 8007e10:	005b      	lsls	r3, r3, #1
 8007e12:	4413      	add	r3, r2
 8007e14:	005b      	lsls	r3, r3, #1
 8007e16:	1aca      	subs	r2, r1, r3
 8007e18:	4b33      	ldr	r3, [pc, #204]	; (8007ee8 <EE_Init+0x4e8>)
 8007e1a:	881b      	ldrh	r3, [r3, #0]
 8007e1c:	0299      	lsls	r1, r3, #10
 8007e1e:	4b33      	ldr	r3, [pc, #204]	; (8007eec <EE_Init+0x4ec>)
 8007e20:	400b      	ands	r3, r1
 8007e22:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007e26:	fbb1 f0f3 	udiv	r0, r1, r3
 8007e2a:	fb00 f303 	mul.w	r3, r0, r3
 8007e2e:	1acb      	subs	r3, r1, r3
 8007e30:	0b1b      	lsrs	r3, r3, #12
 8007e32:	4413      	add	r3, r2
 8007e34:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007e38:	031a      	lsls	r2, r3, #12
 8007e3a:	4b2b      	ldr	r3, [pc, #172]	; (8007ee8 <EE_Init+0x4e8>)
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	0299      	lsls	r1, r3, #10
 8007e40:	4b2a      	ldr	r3, [pc, #168]	; (8007eec <EE_Init+0x4ec>)
 8007e42:	400b      	ands	r3, r1
 8007e44:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007e48:	fbb1 f1f3 	udiv	r1, r1, r3
 8007e4c:	4b26      	ldr	r3, [pc, #152]	; (8007ee8 <EE_Init+0x4e8>)
 8007e4e:	881b      	ldrh	r3, [r3, #0]
 8007e50:	0298      	lsls	r0, r3, #10
 8007e52:	4b26      	ldr	r3, [pc, #152]	; (8007eec <EE_Init+0x4ec>)
 8007e54:	4003      	ands	r3, r0
 8007e56:	fb01 f303 	mul.w	r3, r1, r3
 8007e5a:	4413      	add	r3, r2
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f001 fa71 	bl	8009344 <GetPageState>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d102      	bne.n	8007e6e <EE_Init+0x46e>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	76fb      	strb	r3, [r7, #27]
 8007e6c:	e001      	b.n	8007e72 <EE_Init+0x472>
        }
        else /* Following page is not erased state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	76fb      	strb	r3, [r7, #27]
        }
      }

      /* If the receive page is a true receive page, resume pages transfer */
      if (pagestate == STATE_RELIABLE)
 8007e72:	7efb      	ldrb	r3, [r7, #27]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d111      	bne.n	8007e9c <EE_Init+0x49c>
      {
        /* Initialize current active page */
        ubCurrentActivePage = page;
 8007e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	4b1d      	ldr	r3, [pc, #116]	; (8007ef4 <EE_Init+0x4f4>)
 8007e7e:	701a      	strb	r2, [r3, #0]

        /* Resume the interrupted page transfer, using dummy new data */
#ifndef FLASH_LINES_128B  
        if (PagesTransfer(0U, 0U, EE_TRANSFER_RECOVER) != EE_CLEANUP_REQUIRED)
 8007e80:	2201      	movs	r2, #1
 8007e82:	2100      	movs	r1, #0
 8007e84:	2000      	movs	r0, #0
 8007e86:	f000 feb7 	bl	8008bf8 <PagesTransfer>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e90:	d001      	beq.n	8007e96 <EE_Init+0x496>
        {
          return EE_TRANSFER_ERROR;
 8007e92:	230c      	movs	r3, #12
 8007e94:	e2dd      	b.n	8008452 <EE_Init+0xa52>
        {
          return EE_TRANSFER_ERROR;
        }
#endif
        /* Memorize transfer recovery occured */
        recoverytransfer = 1U;
 8007e96:	2301      	movs	r3, #1
 8007e98:	61fb      	str	r3, [r7, #28]

        /* transfer recovery is done, then stop searching receive page */
        break;
 8007e9a:	e014      	b.n	8007ec6 <EE_Init+0x4c6>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8007e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ea2:	4b11      	ldr	r3, [pc, #68]	; (8007ee8 <EE_Init+0x4e8>)
 8007ea4:	881b      	ldrh	r3, [r3, #0]
 8007ea6:	029a      	lsls	r2, r3, #10
 8007ea8:	4b10      	ldr	r3, [pc, #64]	; (8007eec <EE_Init+0x4ec>)
 8007eaa:	4013      	ands	r3, r2
 8007eac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007eb0:	fbb2 f1f3 	udiv	r1, r2, r3
 8007eb4:	fb01 f303 	mul.w	r3, r1, r3
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	0b1b      	lsrs	r3, r3, #12
 8007ebc:	3306      	adds	r3, #6
 8007ebe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	f4ff af09 	bcc.w	8007cd8 <EE_Init+0x2d8>
  /*         If more than one active page, raise error                 */
  /*         If no active page present, set missing active page        */
  /*********************************************************************/

  /* Browse all pages to search for active pages */
  nbactivepage = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	633b      	str	r3, [r7, #48]	; 0x30
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8007eca:	4b07      	ldr	r3, [pc, #28]	; (8007ee8 <EE_Init+0x4e8>)
 8007ecc:	881b      	ldrh	r3, [r3, #0]
 8007ece:	029a      	lsls	r2, r3, #10
 8007ed0:	4b06      	ldr	r3, [pc, #24]	; (8007eec <EE_Init+0x4ec>)
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007ed8:	fbb2 f1f3 	udiv	r1, r2, r3
 8007edc:	fb01 f303 	mul.w	r3, r1, r3
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	0b1b      	lsrs	r3, r3, #12
 8007ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ee6:	e0ec      	b.n	80080c2 <EE_Init+0x6c2>
 8007ee8:	1fff75e0 	.word	0x1fff75e0
 8007eec:	001ffc00 	.word	0x001ffc00
 8007ef0:	aaaaaaab 	.word	0xaaaaaaab
 8007ef4:	2000054a 	.word	0x2000054a
  {
    pageaddress = PAGE_ADDRESS(page);
 8007ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007efa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007efe:	031a      	lsls	r2, r3, #12
 8007f00:	4bb6      	ldr	r3, [pc, #728]	; (80081dc <EE_Init+0x7dc>)
 8007f02:	881b      	ldrh	r3, [r3, #0]
 8007f04:	0299      	lsls	r1, r3, #10
 8007f06:	4bb6      	ldr	r3, [pc, #728]	; (80081e0 <EE_Init+0x7e0>)
 8007f08:	400b      	ands	r3, r1
 8007f0a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007f0e:	fbb1 f1f3 	udiv	r1, r1, r3
 8007f12:	4bb2      	ldr	r3, [pc, #712]	; (80081dc <EE_Init+0x7dc>)
 8007f14:	881b      	ldrh	r3, [r3, #0]
 8007f16:	0298      	lsls	r0, r3, #10
 8007f18:	4bb1      	ldr	r3, [pc, #708]	; (80081e0 <EE_Init+0x7e0>)
 8007f1a:	4003      	ands	r3, r0
 8007f1c:	fb01 f303 	mul.w	r3, r1, r3
 8007f20:	4413      	add	r3, r2
 8007f22:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 8007f24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f26:	f001 fa0d 	bl	8009344 <GetPageState>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	76bb      	strb	r3, [r7, #26]

    /* Search for active page */
    if (pagestatus == STATE_PAGE_ACTIVE)
 8007f2e:	7ebb      	ldrb	r3, [r7, #26]
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	f040 80be 	bne.w	80080b2 <EE_Init+0x6b2>
    {
      /* Verify that active page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8007f36:	4ba9      	ldr	r3, [pc, #676]	; (80081dc <EE_Init+0x7dc>)
 8007f38:	881b      	ldrh	r3, [r3, #0]
 8007f3a:	029a      	lsls	r2, r3, #10
 8007f3c:	4ba8      	ldr	r3, [pc, #672]	; (80081e0 <EE_Init+0x7e0>)
 8007f3e:	4013      	ands	r3, r2
 8007f40:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007f44:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f48:	fb01 f303 	mul.w	r3, r1, r3
 8007f4c:	1ad3      	subs	r3, r2, r3
 8007f4e:	0b1b      	lsrs	r3, r3, #12
 8007f50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d057      	beq.n	8008006 <EE_Init+0x606>
 8007f56:	4ba1      	ldr	r3, [pc, #644]	; (80081dc <EE_Init+0x7dc>)
 8007f58:	881b      	ldrh	r3, [r3, #0]
 8007f5a:	029a      	lsls	r2, r3, #10
 8007f5c:	4ba0      	ldr	r3, [pc, #640]	; (80081e0 <EE_Init+0x7e0>)
 8007f5e:	4013      	ands	r3, r2
 8007f60:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007f64:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f68:	fb01 f303 	mul.w	r3, r1, r3
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	0b1b      	lsrs	r3, r3, #12
 8007f70:	3303      	adds	r3, #3
 8007f72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d046      	beq.n	8008006 <EE_Init+0x606>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8007f78:	4b98      	ldr	r3, [pc, #608]	; (80081dc <EE_Init+0x7dc>)
 8007f7a:	881b      	ldrh	r3, [r3, #0]
 8007f7c:	029a      	lsls	r2, r3, #10
 8007f7e:	4b98      	ldr	r3, [pc, #608]	; (80081e0 <EE_Init+0x7e0>)
 8007f80:	4013      	ands	r3, r2
 8007f82:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007f86:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f8a:	fb01 f303 	mul.w	r3, r1, r3
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	0b1b      	lsrs	r3, r3, #12
 8007f92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	1d59      	adds	r1, r3, #5
 8007f98:	4b92      	ldr	r3, [pc, #584]	; (80081e4 <EE_Init+0x7e4>)
 8007f9a:	fba3 2301 	umull	r2, r3, r3, r1
 8007f9e:	089a      	lsrs	r2, r3, #2
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	005b      	lsls	r3, r3, #1
 8007fa4:	4413      	add	r3, r2
 8007fa6:	005b      	lsls	r3, r3, #1
 8007fa8:	1aca      	subs	r2, r1, r3
 8007faa:	4b8c      	ldr	r3, [pc, #560]	; (80081dc <EE_Init+0x7dc>)
 8007fac:	881b      	ldrh	r3, [r3, #0]
 8007fae:	0299      	lsls	r1, r3, #10
 8007fb0:	4b8b      	ldr	r3, [pc, #556]	; (80081e0 <EE_Init+0x7e0>)
 8007fb2:	400b      	ands	r3, r1
 8007fb4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007fb8:	fbb1 f0f3 	udiv	r0, r1, r3
 8007fbc:	fb00 f303 	mul.w	r3, r0, r3
 8007fc0:	1acb      	subs	r3, r1, r3
 8007fc2:	0b1b      	lsrs	r3, r3, #12
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007fca:	031a      	lsls	r2, r3, #12
 8007fcc:	4b83      	ldr	r3, [pc, #524]	; (80081dc <EE_Init+0x7dc>)
 8007fce:	881b      	ldrh	r3, [r3, #0]
 8007fd0:	0299      	lsls	r1, r3, #10
 8007fd2:	4b83      	ldr	r3, [pc, #524]	; (80081e0 <EE_Init+0x7e0>)
 8007fd4:	400b      	ands	r3, r1
 8007fd6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007fda:	fbb1 f1f3 	udiv	r1, r1, r3
 8007fde:	4b7f      	ldr	r3, [pc, #508]	; (80081dc <EE_Init+0x7dc>)
 8007fe0:	881b      	ldrh	r3, [r3, #0]
 8007fe2:	0298      	lsls	r0, r3, #10
 8007fe4:	4b7e      	ldr	r3, [pc, #504]	; (80081e0 <EE_Init+0x7e0>)
 8007fe6:	4003      	ands	r3, r0
 8007fe8:	fb01 f303 	mul.w	r3, r1, r3
 8007fec:	4413      	add	r3, r2
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f001 f9a8 	bl	8009344 <GetPageState>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	d102      	bne.n	8008000 <EE_Init+0x600>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8007ffe:	e048      	b.n	8008092 <EE_Init+0x692>
        }
        else /* Previous page is not valid state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8008000:	2301      	movs	r3, #1
 8008002:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8008004:	e045      	b.n	8008092 <EE_Init+0x692>
        }
      }
      else /* The active page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 8008006:	4b75      	ldr	r3, [pc, #468]	; (80081dc <EE_Init+0x7dc>)
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	029a      	lsls	r2, r3, #10
 800800c:	4b74      	ldr	r3, [pc, #464]	; (80081e0 <EE_Init+0x7e0>)
 800800e:	4013      	ands	r3, r2
 8008010:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008014:	fbb2 f1f3 	udiv	r1, r2, r3
 8008018:	fb01 f303 	mul.w	r3, r1, r3
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	0b1b      	lsrs	r3, r3, #12
 8008020:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	1c59      	adds	r1, r3, #1
 8008026:	4b6f      	ldr	r3, [pc, #444]	; (80081e4 <EE_Init+0x7e4>)
 8008028:	fba3 2301 	umull	r2, r3, r3, r1
 800802c:	089a      	lsrs	r2, r3, #2
 800802e:	4613      	mov	r3, r2
 8008030:	005b      	lsls	r3, r3, #1
 8008032:	4413      	add	r3, r2
 8008034:	005b      	lsls	r3, r3, #1
 8008036:	1aca      	subs	r2, r1, r3
 8008038:	4b68      	ldr	r3, [pc, #416]	; (80081dc <EE_Init+0x7dc>)
 800803a:	881b      	ldrh	r3, [r3, #0]
 800803c:	0299      	lsls	r1, r3, #10
 800803e:	4b68      	ldr	r3, [pc, #416]	; (80081e0 <EE_Init+0x7e0>)
 8008040:	400b      	ands	r3, r1
 8008042:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008046:	fbb1 f0f3 	udiv	r0, r1, r3
 800804a:	fb00 f303 	mul.w	r3, r0, r3
 800804e:	1acb      	subs	r3, r1, r3
 8008050:	0b1b      	lsrs	r3, r3, #12
 8008052:	4413      	add	r3, r2
 8008054:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008058:	031a      	lsls	r2, r3, #12
 800805a:	4b60      	ldr	r3, [pc, #384]	; (80081dc <EE_Init+0x7dc>)
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	0299      	lsls	r1, r3, #10
 8008060:	4b5f      	ldr	r3, [pc, #380]	; (80081e0 <EE_Init+0x7e0>)
 8008062:	400b      	ands	r3, r1
 8008064:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008068:	fbb1 f1f3 	udiv	r1, r1, r3
 800806c:	4b5b      	ldr	r3, [pc, #364]	; (80081dc <EE_Init+0x7dc>)
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	0298      	lsls	r0, r3, #10
 8008072:	4b5b      	ldr	r3, [pc, #364]	; (80081e0 <EE_Init+0x7e0>)
 8008074:	4003      	ands	r3, r0
 8008076:	fb01 f303 	mul.w	r3, r1, r3
 800807a:	4413      	add	r3, r2
 800807c:	4618      	mov	r0, r3
 800807e:	f001 f961 	bl	8009344 <GetPageState>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d102      	bne.n	800808e <EE_Init+0x68e>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 8008088:	2300      	movs	r3, #0
 800808a:	76fb      	strb	r3, [r7, #27]
 800808c:	e001      	b.n	8008092 <EE_Init+0x692>
        }
        else /* Following page is not erased state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800808e:	2301      	movs	r3, #1
 8008090:	76fb      	strb	r3, [r7, #27]
        }
      }

      /* If the active page is a true active page, initialize global variables */
      if (pagestate == STATE_RELIABLE)
 8008092:	7efb      	ldrb	r3, [r7, #27]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d111      	bne.n	80080bc <EE_Init+0x6bc>
      {
        if (nbactivepage == 0U)
 8008098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809a:	2b00      	cmp	r3, #0
 800809c:	d107      	bne.n	80080ae <EE_Init+0x6ae>
        {
          ubCurrentActivePage = page;
 800809e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080a0:	b2da      	uxtb	r2, r3
 80080a2:	4b51      	ldr	r3, [pc, #324]	; (80081e8 <EE_Init+0x7e8>)
 80080a4:	701a      	strb	r2, [r3, #0]
          nbactivepage++;
 80080a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a8:	3301      	adds	r3, #1
 80080aa:	633b      	str	r3, [r7, #48]	; 0x30
 80080ac:	e006      	b.n	80080bc <EE_Init+0x6bc>
        }
        else
        {
          /* Error: More than one reliable active page is present */
          return EE_INVALID_PAGE_SEQUENCE;
 80080ae:	230a      	movs	r3, #10
 80080b0:	e1cf      	b.n	8008452 <EE_Init+0xa52>
        }
      }
    }
    /* Keep index of last valid page, will be required in case no active page is found */
    else if (pagestatus == STATE_PAGE_VALID)
 80080b2:	7ebb      	ldrb	r3, [r7, #26]
 80080b4:	2b03      	cmp	r3, #3
 80080b6:	d101      	bne.n	80080bc <EE_Init+0x6bc>
    {
      lastvalidpage = page;
 80080b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 80080bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080be:	3301      	adds	r3, #1
 80080c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080c2:	4b46      	ldr	r3, [pc, #280]	; (80081dc <EE_Init+0x7dc>)
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	029a      	lsls	r2, r3, #10
 80080c8:	4b45      	ldr	r3, [pc, #276]	; (80081e0 <EE_Init+0x7e0>)
 80080ca:	4013      	ands	r3, r2
 80080cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80080d0:	fbb2 f1f3 	udiv	r1, r2, r3
 80080d4:	fb01 f303 	mul.w	r3, r1, r3
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	0b1b      	lsrs	r3, r3, #12
 80080dc:	3306      	adds	r3, #6
 80080de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80080e0:	429a      	cmp	r2, r3
 80080e2:	f4ff af09 	bcc.w	8007ef8 <EE_Init+0x4f8>
    }
  }

  /* In case no active page is found, set page after last valid page to active state */
  if (nbactivepage == 0U)
 80080e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d136      	bne.n	800815a <EE_Init+0x75a>
  {
    ubCurrentActivePage = FOLLOWING_PAGE(lastvalidpage);
 80080ec:	4b3b      	ldr	r3, [pc, #236]	; (80081dc <EE_Init+0x7dc>)
 80080ee:	881b      	ldrh	r3, [r3, #0]
 80080f0:	029a      	lsls	r2, r3, #10
 80080f2:	4b3b      	ldr	r3, [pc, #236]	; (80081e0 <EE_Init+0x7e0>)
 80080f4:	4013      	ands	r3, r2
 80080f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80080fa:	fbb2 f1f3 	udiv	r1, r2, r3
 80080fe:	fb01 f303 	mul.w	r3, r1, r3
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	0b1b      	lsrs	r3, r3, #12
 8008106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	1c59      	adds	r1, r3, #1
 800810c:	4b35      	ldr	r3, [pc, #212]	; (80081e4 <EE_Init+0x7e4>)
 800810e:	fba3 2301 	umull	r2, r3, r3, r1
 8008112:	089a      	lsrs	r2, r3, #2
 8008114:	4613      	mov	r3, r2
 8008116:	005b      	lsls	r3, r3, #1
 8008118:	4413      	add	r3, r2
 800811a:	005b      	lsls	r3, r3, #1
 800811c:	1aca      	subs	r2, r1, r3
 800811e:	b2d1      	uxtb	r1, r2
 8008120:	4b2e      	ldr	r3, [pc, #184]	; (80081dc <EE_Init+0x7dc>)
 8008122:	881b      	ldrh	r3, [r3, #0]
 8008124:	029a      	lsls	r2, r3, #10
 8008126:	4b2e      	ldr	r3, [pc, #184]	; (80081e0 <EE_Init+0x7e0>)
 8008128:	4013      	ands	r3, r2
 800812a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800812e:	fbb2 f0f3 	udiv	r0, r2, r3
 8008132:	fb00 f303 	mul.w	r3, r0, r3
 8008136:	1ad3      	subs	r3, r2, r3
 8008138:	0b1b      	lsrs	r3, r3, #12
 800813a:	b2db      	uxtb	r3, r3
 800813c:	440b      	add	r3, r1
 800813e:	b2da      	uxtb	r2, r3
 8008140:	4b29      	ldr	r3, [pc, #164]	; (80081e8 <EE_Init+0x7e8>)
 8008142:	701a      	strb	r2, [r3, #0]
    if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 8008144:	4b28      	ldr	r3, [pc, #160]	; (80081e8 <EE_Init+0x7e8>)
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	2102      	movs	r1, #2
 800814a:	4618      	mov	r0, r3
 800814c:	f001 f828 	bl	80091a0 <SetPageState>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <EE_Init+0x75a>
    {
      return EE_WRITE_ERROR;
 8008156:	2302      	movs	r3, #2
 8008158:	e17b      	b.n	8008452 <EE_Init+0xa52>
  /* Step 5: Initialize eeprom emulation global variables relative     */
  /*         to active page                                            */
  /*********************************************************************/

  /* Initialize global variables, with elements detected in active page */
  uhNbWrittenElements = 0U;
 800815a:	4b24      	ldr	r3, [pc, #144]	; (80081ec <EE_Init+0x7ec>)
 800815c:	2200      	movs	r2, #0
 800815e:	801a      	strh	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 8008160:	4b23      	ldr	r3, [pc, #140]	; (80081f0 <EE_Init+0x7f0>)
 8008162:	2220      	movs	r2, #32
 8008164:	601a      	str	r2, [r3, #0]

  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8008166:	2320      	movs	r3, #32
 8008168:	637b      	str	r3, [r7, #52]	; 0x34
 800816a:	e031      	b.n	80081d0 <EE_Init+0x7d0>
  {
    /* Check elements present in active page */
    addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 800816c:	4b1e      	ldr	r3, [pc, #120]	; (80081e8 <EE_Init+0x7e8>)
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008174:	031a      	lsls	r2, r3, #12
 8008176:	4b19      	ldr	r3, [pc, #100]	; (80081dc <EE_Init+0x7dc>)
 8008178:	881b      	ldrh	r3, [r3, #0]
 800817a:	0299      	lsls	r1, r3, #10
 800817c:	4b18      	ldr	r3, [pc, #96]	; (80081e0 <EE_Init+0x7e0>)
 800817e:	400b      	ands	r3, r1
 8008180:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008184:	fbb1 f1f3 	udiv	r1, r1, r3
 8008188:	4b14      	ldr	r3, [pc, #80]	; (80081dc <EE_Init+0x7dc>)
 800818a:	881b      	ldrh	r3, [r3, #0]
 800818c:	0298      	lsls	r0, r3, #10
 800818e:	4b14      	ldr	r3, [pc, #80]	; (80081e0 <EE_Init+0x7e0>)
 8008190:	4003      	ands	r3, r0
 8008192:	fb01 f303 	mul.w	r3, r1, r3
 8008196:	441a      	add	r2, r3
 8008198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800819a:	4413      	add	r3, r2
 800819c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
    addressvalue2 = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx + 8));
    if ((addressvalue != EE_MASK_FULL) && (addressvalue2 != EE_MASK_FULL))
#else
    if (addressvalue != EE_MASK_FULL)
 80081a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80081a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ac:	bf08      	it	eq
 80081ae:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80081b2:	d01f      	beq.n	80081f4 <EE_Init+0x7f4>
#endif
    {
      /* Then increment uhNbWrittenElements and uwAddressNextWrite */
      uhNbWrittenElements++;
 80081b4:	4b0d      	ldr	r3, [pc, #52]	; (80081ec <EE_Init+0x7ec>)
 80081b6:	881b      	ldrh	r3, [r3, #0]
 80081b8:	3301      	adds	r3, #1
 80081ba:	b29a      	uxth	r2, r3
 80081bc:	4b0b      	ldr	r3, [pc, #44]	; (80081ec <EE_Init+0x7ec>)
 80081be:	801a      	strh	r2, [r3, #0]
      uwAddressNextWrite += EE_ELEMENT_SIZE;
 80081c0:	4b0b      	ldr	r3, [pc, #44]	; (80081f0 <EE_Init+0x7f0>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	3308      	adds	r3, #8
 80081c6:	4a0a      	ldr	r2, [pc, #40]	; (80081f0 <EE_Init+0x7f0>)
 80081c8:	6013      	str	r3, [r2, #0]
  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 80081ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081cc:	3308      	adds	r3, #8
 80081ce:	637b      	str	r3, [r7, #52]	; 0x34
 80081d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081d6:	d3c9      	bcc.n	800816c <EE_Init+0x76c>
 80081d8:	e00d      	b.n	80081f6 <EE_Init+0x7f6>
 80081da:	bf00      	nop
 80081dc:	1fff75e0 	.word	0x1fff75e0
 80081e0:	001ffc00 	.word	0x001ffc00
 80081e4:	aaaaaaab 	.word	0xaaaaaaab
 80081e8:	2000054a 	.word	0x2000054a
 80081ec:	20000548 	.word	0x20000548
 80081f0:	20000014 	.word	0x20000014
    }
    else /* no more element in the page */
    {
      break;
 80081f4:	bf00      	nop
  /*         to valid pages, and check consistency of pages sequence   */
  /*********************************************************************/

  /* Check consistency of pages sequence: one active page, optionnally some valid pages before */
  /* Update global variable uhNbWrittenElements if valid pages are found */
  page = ubCurrentActivePage;
 80081f6:	4b99      	ldr	r3, [pc, #612]	; (800845c <EE_Init+0xa5c>)
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  firstvalidpage = ubCurrentActivePage;
 80081fc:	4b97      	ldr	r3, [pc, #604]	; (800845c <EE_Init+0xa5c>)
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	623b      	str	r3, [r7, #32]
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8008202:	e050      	b.n	80082a6 <EE_Init+0x8a6>
  {
    /* Decrement page index among circular pages list */
    page = PREVIOUS_PAGE(page);
 8008204:	4b96      	ldr	r3, [pc, #600]	; (8008460 <EE_Init+0xa60>)
 8008206:	881b      	ldrh	r3, [r3, #0]
 8008208:	029a      	lsls	r2, r3, #10
 800820a:	4b96      	ldr	r3, [pc, #600]	; (8008464 <EE_Init+0xa64>)
 800820c:	4013      	ands	r3, r2
 800820e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008212:	fbb2 f1f3 	udiv	r1, r2, r3
 8008216:	fb01 f303 	mul.w	r3, r1, r3
 800821a:	1ad3      	subs	r3, r2, r3
 800821c:	0b1b      	lsrs	r3, r3, #12
 800821e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	1d59      	adds	r1, r3, #5
 8008224:	4b90      	ldr	r3, [pc, #576]	; (8008468 <EE_Init+0xa68>)
 8008226:	fba3 2301 	umull	r2, r3, r3, r1
 800822a:	089a      	lsrs	r2, r3, #2
 800822c:	4613      	mov	r3, r2
 800822e:	005b      	lsls	r3, r3, #1
 8008230:	4413      	add	r3, r2
 8008232:	005b      	lsls	r3, r3, #1
 8008234:	1aca      	subs	r2, r1, r3
 8008236:	4b8a      	ldr	r3, [pc, #552]	; (8008460 <EE_Init+0xa60>)
 8008238:	881b      	ldrh	r3, [r3, #0]
 800823a:	0299      	lsls	r1, r3, #10
 800823c:	4b89      	ldr	r3, [pc, #548]	; (8008464 <EE_Init+0xa64>)
 800823e:	400b      	ands	r3, r1
 8008240:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008244:	fbb1 f0f3 	udiv	r0, r1, r3
 8008248:	fb00 f303 	mul.w	r3, r0, r3
 800824c:	1acb      	subs	r3, r1, r3
 800824e:	0b1b      	lsrs	r3, r3, #12
 8008250:	4413      	add	r3, r2
 8008252:	63fb      	str	r3, [r7, #60]	; 0x3c
    pagestatus = GetPageState(PAGE_ADDRESS(page));
 8008254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008256:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800825a:	031a      	lsls	r2, r3, #12
 800825c:	4b80      	ldr	r3, [pc, #512]	; (8008460 <EE_Init+0xa60>)
 800825e:	881b      	ldrh	r3, [r3, #0]
 8008260:	0299      	lsls	r1, r3, #10
 8008262:	4b80      	ldr	r3, [pc, #512]	; (8008464 <EE_Init+0xa64>)
 8008264:	400b      	ands	r3, r1
 8008266:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800826a:	fbb1 f1f3 	udiv	r1, r1, r3
 800826e:	4b7c      	ldr	r3, [pc, #496]	; (8008460 <EE_Init+0xa60>)
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	0298      	lsls	r0, r3, #10
 8008274:	4b7b      	ldr	r3, [pc, #492]	; (8008464 <EE_Init+0xa64>)
 8008276:	4003      	ands	r3, r0
 8008278:	fb01 f303 	mul.w	r3, r1, r3
 800827c:	4413      	add	r3, r2
 800827e:	4618      	mov	r0, r3
 8008280:	f001 f860 	bl	8009344 <GetPageState>
 8008284:	4603      	mov	r3, r0
 8008286:	76bb      	strb	r3, [r7, #26]

    /* Check if page is valid state */
    if (pagestatus == STATE_PAGE_VALID)
 8008288:	7ebb      	ldrb	r3, [r7, #26]
 800828a:	2b03      	cmp	r3, #3
 800828c:	d109      	bne.n	80082a2 <EE_Init+0x8a2>
    {
      /* Update uhNbWrittenElements with number of elements in full page */
      uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 800828e:	4b77      	ldr	r3, [pc, #476]	; (800846c <EE_Init+0xa6c>)
 8008290:	881b      	ldrh	r3, [r3, #0]
 8008292:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008296:	b29a      	uxth	r2, r3
 8008298:	4b74      	ldr	r3, [pc, #464]	; (800846c <EE_Init+0xa6c>)
 800829a:	801a      	strh	r2, [r3, #0]

      /* Keep index of first valid page */
      firstvalidpage = page;
 800829c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800829e:	623b      	str	r3, [r7, #32]
 80082a0:	e001      	b.n	80082a6 <EE_Init+0x8a6>
    }
    else
    {
      /* Error: Pages sequence is not consistent */
      return EE_INVALID_PAGE_SEQUENCE;
 80082a2:	230a      	movs	r3, #10
 80082a4:	e0d5      	b.n	8008452 <EE_Init+0xa52>
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 80082a6:	4b6e      	ldr	r3, [pc, #440]	; (8008460 <EE_Init+0xa60>)
 80082a8:	881b      	ldrh	r3, [r3, #0]
 80082aa:	029a      	lsls	r2, r3, #10
 80082ac:	4b6d      	ldr	r3, [pc, #436]	; (8008464 <EE_Init+0xa64>)
 80082ae:	4013      	ands	r3, r2
 80082b0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80082b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80082b8:	fb01 f303 	mul.w	r3, r1, r3
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	0b1b      	lsrs	r3, r3, #12
 80082c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d010      	beq.n	80082e8 <EE_Init+0x8e8>
 80082c6:	4b66      	ldr	r3, [pc, #408]	; (8008460 <EE_Init+0xa60>)
 80082c8:	881b      	ldrh	r3, [r3, #0]
 80082ca:	029a      	lsls	r2, r3, #10
 80082cc:	4b65      	ldr	r3, [pc, #404]	; (8008464 <EE_Init+0xa64>)
 80082ce:	4013      	ands	r3, r2
 80082d0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80082d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80082d8:	fb01 f303 	mul.w	r3, r1, r3
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	0b1b      	lsrs	r3, r3, #12
 80082e0:	3303      	adds	r3, #3
 80082e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d18d      	bne.n	8008204 <EE_Init+0x804>
  /*********************************************************************/
  /* Step 7: Ensure empty pages are erased                             */
  /*********************************************************************/

  /* Ensure all pages after active page, until first valid page, are erased */
  page = FOLLOWING_PAGE(ubCurrentActivePage);
 80082e8:	4b5c      	ldr	r3, [pc, #368]	; (800845c <EE_Init+0xa5c>)
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	4618      	mov	r0, r3
 80082ee:	4b5c      	ldr	r3, [pc, #368]	; (8008460 <EE_Init+0xa60>)
 80082f0:	881b      	ldrh	r3, [r3, #0]
 80082f2:	029a      	lsls	r2, r3, #10
 80082f4:	4b5b      	ldr	r3, [pc, #364]	; (8008464 <EE_Init+0xa64>)
 80082f6:	4013      	ands	r3, r2
 80082f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80082fc:	fbb2 f1f3 	udiv	r1, r2, r3
 8008300:	fb01 f303 	mul.w	r3, r1, r3
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	0b1b      	lsrs	r3, r3, #12
 8008308:	1ac3      	subs	r3, r0, r3
 800830a:	1c59      	adds	r1, r3, #1
 800830c:	4b56      	ldr	r3, [pc, #344]	; (8008468 <EE_Init+0xa68>)
 800830e:	fba3 2301 	umull	r2, r3, r3, r1
 8008312:	089a      	lsrs	r2, r3, #2
 8008314:	4613      	mov	r3, r2
 8008316:	005b      	lsls	r3, r3, #1
 8008318:	4413      	add	r3, r2
 800831a:	005b      	lsls	r3, r3, #1
 800831c:	1aca      	subs	r2, r1, r3
 800831e:	4b50      	ldr	r3, [pc, #320]	; (8008460 <EE_Init+0xa60>)
 8008320:	881b      	ldrh	r3, [r3, #0]
 8008322:	0299      	lsls	r1, r3, #10
 8008324:	4b4f      	ldr	r3, [pc, #316]	; (8008464 <EE_Init+0xa64>)
 8008326:	400b      	ands	r3, r1
 8008328:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800832c:	fbb1 f0f3 	udiv	r0, r1, r3
 8008330:	fb00 f303 	mul.w	r3, r0, r3
 8008334:	1acb      	subs	r3, r1, r3
 8008336:	0b1b      	lsrs	r3, r3, #12
 8008338:	4413      	add	r3, r2
 800833a:	63fb      	str	r3, [r7, #60]	; 0x3c
  pageaddress = PAGE_ADDRESS(page);
 800833c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800833e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008342:	031a      	lsls	r2, r3, #12
 8008344:	4b46      	ldr	r3, [pc, #280]	; (8008460 <EE_Init+0xa60>)
 8008346:	881b      	ldrh	r3, [r3, #0]
 8008348:	0299      	lsls	r1, r3, #10
 800834a:	4b46      	ldr	r3, [pc, #280]	; (8008464 <EE_Init+0xa64>)
 800834c:	400b      	ands	r3, r1
 800834e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008352:	fbb1 f1f3 	udiv	r1, r1, r3
 8008356:	4b42      	ldr	r3, [pc, #264]	; (8008460 <EE_Init+0xa60>)
 8008358:	881b      	ldrh	r3, [r3, #0]
 800835a:	0298      	lsls	r0, r3, #10
 800835c:	4b41      	ldr	r3, [pc, #260]	; (8008464 <EE_Init+0xa64>)
 800835e:	4003      	ands	r3, r0
 8008360:	fb01 f303 	mul.w	r3, r1, r3
 8008364:	4413      	add	r3, r2
 8008366:	63bb      	str	r3, [r7, #56]	; 0x38

  while (page != firstvalidpage)
 8008368:	e05a      	b.n	8008420 <EE_Init+0xa20>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 800836a:	79fb      	ldrb	r3, [r7, #7]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d108      	bne.n	8008382 <EE_Init+0x982>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 8008370:	2101      	movs	r1, #1
 8008372:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008374:	f001 f8e4 	bl	8009540 <FI_PageErase>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d012      	beq.n	80083a4 <EE_Init+0x9a4>
      {
        return EE_ERASE_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e067      	b.n	8008452 <EE_Init+0xa52>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if page is fully erased */
      if (VerifyPageFullyErased(pageaddress, PAGE_SIZE) == EE_PAGE_NOTERASED)
 8008382:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008386:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008388:	f000 faec 	bl	8008964 <VerifyPageFullyErased>
 800838c:	4603      	mov	r3, r0
 800838e:	2b10      	cmp	r3, #16
 8008390:	d108      	bne.n	80083a4 <EE_Init+0x9a4>
      {
        /* Erase pages if not fully erased */
        if (FI_PageErase(page, 1U) != EE_OK)
 8008392:	2101      	movs	r1, #1
 8008394:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008396:	f001 f8d3 	bl	8009540 <FI_PageErase>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d001      	beq.n	80083a4 <EE_Init+0x9a4>
        {
          return EE_ERASE_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	e056      	b.n	8008452 <EE_Init+0xa52>
        }
      }
    }

    /* Increment page index among circular pages list, to get first page to erased */
    page = FOLLOWING_PAGE(page);
 80083a4:	4b2e      	ldr	r3, [pc, #184]	; (8008460 <EE_Init+0xa60>)
 80083a6:	881b      	ldrh	r3, [r3, #0]
 80083a8:	029a      	lsls	r2, r3, #10
 80083aa:	4b2e      	ldr	r3, [pc, #184]	; (8008464 <EE_Init+0xa64>)
 80083ac:	4013      	ands	r3, r2
 80083ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80083b2:	fbb2 f1f3 	udiv	r1, r2, r3
 80083b6:	fb01 f303 	mul.w	r3, r1, r3
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	0b1b      	lsrs	r3, r3, #12
 80083be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	1c59      	adds	r1, r3, #1
 80083c4:	4b28      	ldr	r3, [pc, #160]	; (8008468 <EE_Init+0xa68>)
 80083c6:	fba3 2301 	umull	r2, r3, r3, r1
 80083ca:	089a      	lsrs	r2, r3, #2
 80083cc:	4613      	mov	r3, r2
 80083ce:	005b      	lsls	r3, r3, #1
 80083d0:	4413      	add	r3, r2
 80083d2:	005b      	lsls	r3, r3, #1
 80083d4:	1aca      	subs	r2, r1, r3
 80083d6:	4b22      	ldr	r3, [pc, #136]	; (8008460 <EE_Init+0xa60>)
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	0299      	lsls	r1, r3, #10
 80083dc:	4b21      	ldr	r3, [pc, #132]	; (8008464 <EE_Init+0xa64>)
 80083de:	400b      	ands	r3, r1
 80083e0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80083e4:	fbb1 f0f3 	udiv	r0, r1, r3
 80083e8:	fb00 f303 	mul.w	r3, r0, r3
 80083ec:	1acb      	subs	r3, r1, r3
 80083ee:	0b1b      	lsrs	r3, r3, #12
 80083f0:	4413      	add	r3, r2
 80083f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    pageaddress = PAGE_ADDRESS(page);
 80083f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083f6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80083fa:	031a      	lsls	r2, r3, #12
 80083fc:	4b18      	ldr	r3, [pc, #96]	; (8008460 <EE_Init+0xa60>)
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	0299      	lsls	r1, r3, #10
 8008402:	4b18      	ldr	r3, [pc, #96]	; (8008464 <EE_Init+0xa64>)
 8008404:	400b      	ands	r3, r1
 8008406:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800840a:	fbb1 f1f3 	udiv	r1, r1, r3
 800840e:	4b14      	ldr	r3, [pc, #80]	; (8008460 <EE_Init+0xa60>)
 8008410:	881b      	ldrh	r3, [r3, #0]
 8008412:	0298      	lsls	r0, r3, #10
 8008414:	4b13      	ldr	r3, [pc, #76]	; (8008464 <EE_Init+0xa64>)
 8008416:	4003      	ands	r3, r0
 8008418:	fb01 f303 	mul.w	r3, r1, r3
 800841c:	4413      	add	r3, r2
 800841e:	63bb      	str	r3, [r7, #56]	; 0x38
  while (page != firstvalidpage)
 8008420:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008422:	6a3b      	ldr	r3, [r7, #32]
 8008424:	429a      	cmp	r2, r3
 8008426:	d1a0      	bne.n	800836a <EE_Init+0x96a>
  }
 
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 8008428:	f001 f91e 	bl	8009668 <FI_CacheFlush>
  /*         instability of line value 0xFFFFFFFF consecutive to a     */
  /*         reset during write here                                   */
  /*         Only needed if recovery transfer did not occured          */
  /*********************************************************************/

if (recoverytransfer == 0U)
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d10e      	bne.n	8008450 <EE_Init+0xa50>
  {

#ifdef DUALCORE_FLASH_SHARING
    status = VerifyPagesFullWriteVariable(0U, 0U, EE_INIT_WRITE);
 8008432:	2203      	movs	r2, #3
 8008434:	2100      	movs	r1, #0
 8008436:	2000      	movs	r0, #0
 8008438:	f000 fe24 	bl	8009084 <VerifyPagesFullWriteVariable>
 800843c:	4603      	mov	r3, r0
 800843e:	81fb      	strh	r3, [r7, #14]
    
    // The dummy write can be skipped in case pages are full
     // because in this case potential instability can not happen 
    if ((status != EE_OK) && (status != EE_PAGE_FULL))
 8008440:	89fb      	ldrh	r3, [r7, #14]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d004      	beq.n	8008450 <EE_Init+0xa50>
 8008446:	89fb      	ldrh	r3, [r7, #14]
 8008448:	2b12      	cmp	r3, #18
 800844a:	d001      	beq.n	8008450 <EE_Init+0xa50>
    {
      return EE_WRITE_ERROR;
 800844c:	2302      	movs	r3, #2
 800844e:	e000      	b.n	8008452 <EE_Init+0xa52>
      return EE_WRITE_ERROR;
    }
#endif
  }

  return EE_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3740      	adds	r7, #64	; 0x40
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	2000054a 	.word	0x2000054a
 8008460:	1fff75e0 	.word	0x1fff75e0
 8008464:	001ffc00 	.word	0x001ffc00
 8008468:	aaaaaaab 	.word	0xaaaaaaab
 800846c:	20000548 	.word	0x20000548

08008470 <EE_Format>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status EE_Format(EE_Erase_type EraseType)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	4603      	mov	r3, r0
 8008478:	71fb      	strb	r3, [r7, #7]
  uint32_t page = 0U;
 800847a:	2300      	movs	r3, #0
 800847c:	60fb      	str	r3, [r7, #12]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 800847e:	f001 f915 	bl	80096ac <FI_CheckBankConfig>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <EE_Format+0x1c>
  {
    return EE_INVALID_BANK_CFG;
 8008488:	230e      	movs	r3, #14
 800848a:	e083      	b.n	8008594 <EE_Format+0x124>
//  /* Inform CPU2 about Erase Activity */
//  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
//#endif
  
  /* Erase All Pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800848c:	4b43      	ldr	r3, [pc, #268]	; (800859c <EE_Format+0x12c>)
 800848e:	881b      	ldrh	r3, [r3, #0]
 8008490:	029a      	lsls	r2, r3, #10
 8008492:	4b43      	ldr	r3, [pc, #268]	; (80085a0 <EE_Format+0x130>)
 8008494:	4013      	ands	r3, r2
 8008496:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800849a:	fbb2 f1f3 	udiv	r1, r2, r3
 800849e:	fb01 f303 	mul.w	r3, r1, r3
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	0b1b      	lsrs	r3, r3, #12
 80084a6:	60fb      	str	r3, [r7, #12]
 80084a8:	e034      	b.n	8008514 <EE_Format+0xa4>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 80084aa:	79fb      	ldrb	r3, [r7, #7]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d108      	bne.n	80084c2 <EE_Format+0x52>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 80084b0:	2101      	movs	r1, #1
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	f001 f844 	bl	8009540 <FI_PageErase>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d027      	beq.n	800850e <EE_Format+0x9e>
//EE_init called only when CPU2 is not yet active
//#ifdef DUALCORE_FLASH_SHARING
//        /* Inform CPU2 about end of Erase Activity */
//        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
//#endif
        return EE_ERASE_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	e068      	b.n	8008594 <EE_Format+0x124>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if Page is not yet fully erased */
      if (VerifyPageFullyErased(PAGE_ADDRESS(page), PAGE_SIZE) == EE_PAGE_NOTERASED)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80084c8:	031a      	lsls	r2, r3, #12
 80084ca:	4b34      	ldr	r3, [pc, #208]	; (800859c <EE_Format+0x12c>)
 80084cc:	881b      	ldrh	r3, [r3, #0]
 80084ce:	0299      	lsls	r1, r3, #10
 80084d0:	4b33      	ldr	r3, [pc, #204]	; (80085a0 <EE_Format+0x130>)
 80084d2:	400b      	ands	r3, r1
 80084d4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80084d8:	fbb1 f1f3 	udiv	r1, r1, r3
 80084dc:	4b2f      	ldr	r3, [pc, #188]	; (800859c <EE_Format+0x12c>)
 80084de:	881b      	ldrh	r3, [r3, #0]
 80084e0:	0298      	lsls	r0, r3, #10
 80084e2:	4b2f      	ldr	r3, [pc, #188]	; (80085a0 <EE_Format+0x130>)
 80084e4:	4003      	ands	r3, r0
 80084e6:	fb01 f303 	mul.w	r3, r1, r3
 80084ea:	4413      	add	r3, r2
 80084ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 fa37 	bl	8008964 <VerifyPageFullyErased>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b10      	cmp	r3, #16
 80084fa:	d108      	bne.n	800850e <EE_Format+0x9e>
      {
        /* Erase the page */
        /* If Erase operation was failed, a Flash error code is returned */
        if (FI_PageErase(page, 1U) != EE_OK)
 80084fc:	2101      	movs	r1, #1
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f001 f81e 	bl	8009540 <FI_PageErase>
 8008504:	4603      	mov	r3, r0
 8008506:	2b00      	cmp	r3, #0
 8008508:	d001      	beq.n	800850e <EE_Format+0x9e>
//EE_init called only when CPU2 is not yet active
//#ifdef DUALCORE_FLASH_SHARING
//          /* Inform CPU2 about end of Erase Activity */
//          SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
//#endif
          return EE_ERASE_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	e042      	b.n	8008594 <EE_Format+0x124>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	3301      	adds	r3, #1
 8008512:	60fb      	str	r3, [r7, #12]
 8008514:	4b21      	ldr	r3, [pc, #132]	; (800859c <EE_Format+0x12c>)
 8008516:	881b      	ldrh	r3, [r3, #0]
 8008518:	029a      	lsls	r2, r3, #10
 800851a:	4b21      	ldr	r3, [pc, #132]	; (80085a0 <EE_Format+0x130>)
 800851c:	4013      	ands	r3, r2
 800851e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008522:	fbb2 f1f3 	udiv	r1, r2, r3
 8008526:	fb01 f303 	mul.w	r3, r1, r3
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	0b1b      	lsrs	r3, r3, #12
 800852e:	3306      	adds	r3, #6
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	429a      	cmp	r2, r3
 8008534:	d3b9      	bcc.n	80084aa <EE_Format+0x3a>
      }
    }
  }
  
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 8008536:	f001 f897 	bl	8009668 <FI_CacheFlush>
//  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
//#endif

  /* Set first Page in Active State */
  /* If program operation was failed, a Flash error code is returned */
  if (SetPageState(START_PAGE, STATE_PAGE_ACTIVE) != EE_OK)
 800853a:	4b18      	ldr	r3, [pc, #96]	; (800859c <EE_Format+0x12c>)
 800853c:	881b      	ldrh	r3, [r3, #0]
 800853e:	029a      	lsls	r2, r3, #10
 8008540:	4b17      	ldr	r3, [pc, #92]	; (80085a0 <EE_Format+0x130>)
 8008542:	4013      	ands	r3, r2
 8008544:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008548:	fbb2 f1f3 	udiv	r1, r2, r3
 800854c:	fb01 f303 	mul.w	r3, r1, r3
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	0b1b      	lsrs	r3, r3, #12
 8008554:	2102      	movs	r1, #2
 8008556:	4618      	mov	r0, r3
 8008558:	f000 fe22 	bl	80091a0 <SetPageState>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d001      	beq.n	8008566 <EE_Format+0xf6>
  {
    return EE_WRITE_ERROR;
 8008562:	2302      	movs	r3, #2
 8008564:	e016      	b.n	8008594 <EE_Format+0x124>
  }

  /* Reset global variables */
  uhNbWrittenElements = (uint16_t)0U;
 8008566:	4b0f      	ldr	r3, [pc, #60]	; (80085a4 <EE_Format+0x134>)
 8008568:	2200      	movs	r2, #0
 800856a:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = START_PAGE;
 800856c:	4b0b      	ldr	r3, [pc, #44]	; (800859c <EE_Format+0x12c>)
 800856e:	881b      	ldrh	r3, [r3, #0]
 8008570:	029a      	lsls	r2, r3, #10
 8008572:	4b0b      	ldr	r3, [pc, #44]	; (80085a0 <EE_Format+0x130>)
 8008574:	4013      	ands	r3, r2
 8008576:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800857a:	fbb2 f1f3 	udiv	r1, r2, r3
 800857e:	fb01 f303 	mul.w	r3, r1, r3
 8008582:	1ad3      	subs	r3, r2, r3
 8008584:	0b1b      	lsrs	r3, r3, #12
 8008586:	b2da      	uxtb	r2, r3
 8008588:	4b07      	ldr	r3, [pc, #28]	; (80085a8 <EE_Format+0x138>)
 800858a:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE; /* Initialize write position just after page header */
 800858c:	4b07      	ldr	r3, [pc, #28]	; (80085ac <EE_Format+0x13c>)
 800858e:	2220      	movs	r2, #32
 8008590:	601a      	str	r2, [r3, #0]

  return EE_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3710      	adds	r7, #16
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	1fff75e0 	.word	0x1fff75e0
 80085a0:	001ffc00 	.word	0x001ffc00
 80085a4:	20000548 	.word	0x20000548
 80085a8:	2000054a 	.word	0x2000054a
 80085ac:	20000014 	.word	0x20000014

080085b0 <EE_ReadVariable32bits>:
  * @retval EE_Status
  *           - EE_OK: if variable was found
  *           - EE error code: if an error occurs
  */
EE_Status EE_ReadVariable32bits(uint16_t VirtAddress, uint32_t* pData)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	4603      	mov	r3, r0
 80085b8:	6039      	str	r1, [r7, #0]
 80085ba:	80fb      	strh	r3, [r7, #6]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 80085bc:	88fb      	ldrh	r3, [r7, #6]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d016      	beq.n	80085f0 <EE_ReadVariable32bits+0x40>
 80085c2:	88fb      	ldrh	r3, [r7, #6]
 80085c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d011      	beq.n	80085f0 <EE_ReadVariable32bits+0x40>
  {
    EE_DATA_TYPE datatmp = 0U;
 80085cc:	2300      	movs	r3, #0
 80085ce:	60bb      	str	r3, [r7, #8]
    EE_Status status = EE_OK;
 80085d0:	2300      	movs	r3, #0
 80085d2:	81fb      	strh	r3, [r7, #14]

    /* Read variable of size EE_DATA_TYPE, then cast it to 32bits */
    status = ReadVariable(VirtAddress, &datatmp);
 80085d4:	f107 0208 	add.w	r2, r7, #8
 80085d8:	88fb      	ldrh	r3, [r7, #6]
 80085da:	4611      	mov	r1, r2
 80085dc:	4618      	mov	r0, r3
 80085de:	f000 f8c3 	bl	8008768 <ReadVariable>
 80085e2:	4603      	mov	r3, r0
 80085e4:	81fb      	strh	r3, [r7, #14]
    *pData = (uint32_t) datatmp;
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	601a      	str	r2, [r3, #0]

    return status;
 80085ec:	89fb      	ldrh	r3, [r7, #14]
 80085ee:	e000      	b.n	80085f2 <EE_ReadVariable32bits+0x42>
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 80085f0:	2308      	movs	r3, #8
  } 
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <EE_WriteVariable32bits>:
  *           - EE_OK: on success
  *           - EE_CLEANUP_REQUIRED: success and user has to trig flash pages cleanup
  *           - EE error code: if an error occurs
  */
EE_Status EE_WriteVariable32bits(uint16_t VirtAddress, uint32_t Data)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b082      	sub	sp, #8
 80085fe:	af00      	add	r7, sp, #0
 8008600:	4603      	mov	r3, r0
 8008602:	6039      	str	r1, [r7, #0]
 8008604:	80fb      	strh	r3, [r7, #6]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 8008606:	88fb      	ldrh	r3, [r7, #6]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d00b      	beq.n	8008624 <EE_WriteVariable32bits+0x2a>
 800860c:	88fb      	ldrh	r3, [r7, #6]
 800860e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008612:	4293      	cmp	r3, r2
 8008614:	d006      	beq.n	8008624 <EE_WriteVariable32bits+0x2a>
  {
#ifndef FLASH_LINES_128B
    return WriteVariable(VirtAddress, (EE_DATA_TYPE) Data);
 8008616:	88fb      	ldrh	r3, [r7, #6]
 8008618:	6839      	ldr	r1, [r7, #0]
 800861a:	4618      	mov	r0, r3
 800861c:	f000 f982 	bl	8008924 <WriteVariable>
 8008620:	4603      	mov	r3, r0
 8008622:	e000      	b.n	8008626 <EE_WriteVariable32bits+0x2c>
    return WriteVariable(VirtAddress, (EE_DATA_TYPE*) &Data);
#endif
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 8008624:	2308      	movs	r3, #8
  } 
}
 8008626:	4618      	mov	r0, r3
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
	...

08008630 <EE_CleanUp>:
  * @retval EE_Status
  *           - EE_OK: in case of success
  *           - EE error code: if an error occurs
  */
EE_Status EE_CleanUp(void)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
  uint32_t firstpage = 0U, page = 0U;
 8008636:	2300      	movs	r3, #0
 8008638:	617b      	str	r3, [r7, #20]
 800863a:	2300      	movs	r3, #0
 800863c:	613b      	str	r3, [r7, #16]
  uint32_t firstpageaddress = 0U, pageaddress = 0U;
 800863e:	2300      	movs	r3, #0
 8008640:	60fb      	str	r3, [r7, #12]
 8008642:	2300      	movs	r3, #0
 8008644:	60bb      	str	r3, [r7, #8]
  EE_State_type firstpagestatus = STATE_PAGE_INVALID, pagestatus = STATE_PAGE_INVALID;
 8008646:	2305      	movs	r3, #5
 8008648:	71fb      	strb	r3, [r7, #7]
 800864a:	2305      	movs	r3, #5
 800864c:	71bb      	strb	r3, [r7, #6]

  /* Check first half and second half page group */
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800864e:	4b44      	ldr	r3, [pc, #272]	; (8008760 <EE_CleanUp+0x130>)
 8008650:	881b      	ldrh	r3, [r3, #0]
 8008652:	029a      	lsls	r2, r3, #10
 8008654:	4b43      	ldr	r3, [pc, #268]	; (8008764 <EE_CleanUp+0x134>)
 8008656:	4013      	ands	r3, r2
 8008658:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800865c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008660:	fb01 f303 	mul.w	r3, r1, r3
 8008664:	1ad3      	subs	r3, r2, r3
 8008666:	0b1b      	lsrs	r3, r3, #12
 8008668:	617b      	str	r3, [r7, #20]
 800866a:	e062      	b.n	8008732 <EE_CleanUp+0x102>
  {
    /* Check status of first page of the group */
    firstpageaddress = PAGE_ADDRESS(firstpage);
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008672:	031a      	lsls	r2, r3, #12
 8008674:	4b3a      	ldr	r3, [pc, #232]	; (8008760 <EE_CleanUp+0x130>)
 8008676:	881b      	ldrh	r3, [r3, #0]
 8008678:	0299      	lsls	r1, r3, #10
 800867a:	4b3a      	ldr	r3, [pc, #232]	; (8008764 <EE_CleanUp+0x134>)
 800867c:	400b      	ands	r3, r1
 800867e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008682:	fbb1 f1f3 	udiv	r1, r1, r3
 8008686:	4b36      	ldr	r3, [pc, #216]	; (8008760 <EE_CleanUp+0x130>)
 8008688:	881b      	ldrh	r3, [r3, #0]
 800868a:	0298      	lsls	r0, r3, #10
 800868c:	4b35      	ldr	r3, [pc, #212]	; (8008764 <EE_CleanUp+0x134>)
 800868e:	4003      	ands	r3, r0
 8008690:	fb01 f303 	mul.w	r3, r1, r3
 8008694:	4413      	add	r3, r2
 8008696:	60fb      	str	r3, [r7, #12]
    firstpagestatus = GetPageState(firstpageaddress);
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f000 fe53 	bl	8009344 <GetPageState>
 800869e:	4603      	mov	r3, r0
 80086a0:	71fb      	strb	r3, [r7, #7]

    /* If first page of the group is erasing state, check that all other pages
    of the group are also erasing state */
    if (firstpagestatus == STATE_PAGE_ERASING)
 80086a2:	79fb      	ldrb	r3, [r7, #7]
 80086a4:	2b04      	cmp	r3, #4
 80086a6:	d141      	bne.n	800872c <EE_CleanUp+0xfc>
    {
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	3301      	adds	r3, #1
 80086ac:	613b      	str	r3, [r7, #16]
 80086ae:	e022      	b.n	80086f6 <EE_CleanUp+0xc6>
      {
        pageaddress = PAGE_ADDRESS(page);
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80086b6:	031a      	lsls	r2, r3, #12
 80086b8:	4b29      	ldr	r3, [pc, #164]	; (8008760 <EE_CleanUp+0x130>)
 80086ba:	881b      	ldrh	r3, [r3, #0]
 80086bc:	0299      	lsls	r1, r3, #10
 80086be:	4b29      	ldr	r3, [pc, #164]	; (8008764 <EE_CleanUp+0x134>)
 80086c0:	400b      	ands	r3, r1
 80086c2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80086c6:	fbb1 f1f3 	udiv	r1, r1, r3
 80086ca:	4b25      	ldr	r3, [pc, #148]	; (8008760 <EE_CleanUp+0x130>)
 80086cc:	881b      	ldrh	r3, [r3, #0]
 80086ce:	0298      	lsls	r0, r3, #10
 80086d0:	4b24      	ldr	r3, [pc, #144]	; (8008764 <EE_CleanUp+0x134>)
 80086d2:	4003      	ands	r3, r0
 80086d4:	fb01 f303 	mul.w	r3, r1, r3
 80086d8:	4413      	add	r3, r2
 80086da:	60bb      	str	r3, [r7, #8]
        pagestatus = GetPageState(pageaddress);
 80086dc:	68b8      	ldr	r0, [r7, #8]
 80086de:	f000 fe31 	bl	8009344 <GetPageState>
 80086e2:	4603      	mov	r3, r0
 80086e4:	71bb      	strb	r3, [r7, #6]

        /* If page is not erasing, return error */
        if (pagestatus != STATE_PAGE_ERASING)
 80086e6:	79bb      	ldrb	r3, [r7, #6]
 80086e8:	2b04      	cmp	r3, #4
 80086ea:	d001      	beq.n	80086f0 <EE_CleanUp+0xc0>
        {
          return EE_ERROR_NOERASING_PAGE;
 80086ec:	2305      	movs	r3, #5
 80086ee:	e032      	b.n	8008756 <EE_CleanUp+0x126>
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	3301      	adds	r3, #1
 80086f4:	613b      	str	r3, [r7, #16]
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	3303      	adds	r3, #3
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d3d7      	bcc.n	80086b0 <EE_CleanUp+0x80>
        }
      }
      
#ifdef DUALCORE_FLASH_SHARING
      /* Inform CPU2 about Erase Activity */
      SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
 8008700:	2001      	movs	r0, #1
 8008702:	f002 fa1b 	bl	800ab3c <SHCI_C2_FLASH_EraseActivity>
#endif

      /* Erase all the pages of the group */
      /* If erase operation fails, a Flash error code is returned */
      if (FI_PageErase(firstpage, PAGES_NUMBER / 2U) != EE_OK)
 8008706:	2103      	movs	r1, #3
 8008708:	6978      	ldr	r0, [r7, #20]
 800870a:	f000 ff19 	bl	8009540 <FI_PageErase>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d004      	beq.n	800871e <EE_CleanUp+0xee>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
 8008714:	2000      	movs	r0, #0
 8008716:	f002 fa11 	bl	800ab3c <SHCI_C2_FLASH_EraseActivity>
#endif
        return EE_ERASE_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	e01b      	b.n	8008756 <EE_CleanUp+0x126>
      }
      else
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
 800871e:	2000      	movs	r0, #0
 8008720:	f002 fa0c 	bl	800ab3c <SHCI_C2_FLASH_EraseActivity>
#endif
        
        /* To keep their coherency, flush the caches if needed depending on the product */
        FI_CacheFlush();
 8008724:	f000 ffa0 	bl	8009668 <FI_CacheFlush>
        
        return EE_OK;
 8008728:	2300      	movs	r3, #0
 800872a:	e014      	b.n	8008756 <EE_CleanUp+0x126>
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	3303      	adds	r3, #3
 8008730:	617b      	str	r3, [r7, #20]
 8008732:	4b0b      	ldr	r3, [pc, #44]	; (8008760 <EE_CleanUp+0x130>)
 8008734:	881b      	ldrh	r3, [r3, #0]
 8008736:	029a      	lsls	r2, r3, #10
 8008738:	4b0a      	ldr	r3, [pc, #40]	; (8008764 <EE_CleanUp+0x134>)
 800873a:	4013      	ands	r3, r2
 800873c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008740:	fbb2 f1f3 	udiv	r1, r2, r3
 8008744:	fb01 f303 	mul.w	r3, r1, r3
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	0b1b      	lsrs	r3, r3, #12
 800874c:	3306      	adds	r3, #6
 800874e:	697a      	ldr	r2, [r7, #20]
 8008750:	429a      	cmp	r2, r3
 8008752:	d38b      	bcc.n	800866c <EE_CleanUp+0x3c>
      }
    }
  }

  /* Error if no erasing pages group is found */
  return EE_ERROR_NOERASING_PAGE;
 8008754:	2305      	movs	r3, #5
}
 8008756:	4618      	mov	r0, r3
 8008758:	3718      	adds	r7, #24
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	1fff75e0 	.word	0x1fff75e0
 8008764:	001ffc00 	.word	0x001ffc00

08008768 <ReadVariable>:
#ifndef FLASH_LINES_128B
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#else
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#endif
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b08a      	sub	sp, #40	; 0x28
 800876c:	af00      	add	r7, sp, #0
 800876e:	4603      	mov	r3, r0
 8008770:	6039      	str	r1, [r7, #0]
 8008772:	80fb      	strh	r3, [r7, #6]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8008774:	f04f 0200 	mov.w	r2, #0
 8008778:	f04f 0300 	mov.w	r3, #0
 800877c:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
#endif
  uint32_t page = 0U, pageaddress = 0U, counter = 0U, crc = 0U;
 8008780:	2300      	movs	r3, #0
 8008782:	627b      	str	r3, [r7, #36]	; 0x24
 8008784:	2300      	movs	r3, #0
 8008786:	623b      	str	r3, [r7, #32]
 8008788:	2300      	movs	r3, #0
 800878a:	61fb      	str	r3, [r7, #28]
 800878c:	2300      	movs	r3, #0
 800878e:	60fb      	str	r3, [r7, #12]
  EE_State_type pagestate = STATE_PAGE_INVALID;
 8008790:	2305      	movs	r3, #5
 8008792:	76fb      	strb	r3, [r7, #27]

  /* Get active Page for read operation */
  page = FindPage(FIND_READ_PAGE);
 8008794:	2000      	movs	r0, #0
 8008796:	f000 f90b 	bl	80089b0 <FindPage>
 800879a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check if there is no active page */
  if (page == EE_NO_PAGE_FOUND)
 800879c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a2:	d101      	bne.n	80087a8 <ReadVariable+0x40>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e0b2      	b.n	800890e <ReadVariable+0x1a6>
  }
  pageaddress = PAGE_ADDRESS(page);
 80087a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087aa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80087ae:	031a      	lsls	r2, r3, #12
 80087b0:	4b59      	ldr	r3, [pc, #356]	; (8008918 <ReadVariable+0x1b0>)
 80087b2:	881b      	ldrh	r3, [r3, #0]
 80087b4:	0299      	lsls	r1, r3, #10
 80087b6:	4b59      	ldr	r3, [pc, #356]	; (800891c <ReadVariable+0x1b4>)
 80087b8:	400b      	ands	r3, r1
 80087ba:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80087be:	fbb1 f1f3 	udiv	r1, r1, r3
 80087c2:	4b55      	ldr	r3, [pc, #340]	; (8008918 <ReadVariable+0x1b0>)
 80087c4:	881b      	ldrh	r3, [r3, #0]
 80087c6:	0298      	lsls	r0, r3, #10
 80087c8:	4b54      	ldr	r3, [pc, #336]	; (800891c <ReadVariable+0x1b4>)
 80087ca:	4003      	ands	r3, r0
 80087cc:	fb01 f303 	mul.w	r3, r1, r3
 80087d0:	4413      	add	r3, r2
 80087d2:	623b      	str	r3, [r7, #32]
  pagestate = GetPageState(pageaddress);
 80087d4:	6a38      	ldr	r0, [r7, #32]
 80087d6:	f000 fdb5 	bl	8009344 <GetPageState>
 80087da:	4603      	mov	r3, r0
 80087dc:	76fb      	strb	r3, [r7, #27]

  /* Search variable in active page and valid pages until erased page is found
     or in erasing pages until erased page is found */
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 80087de:	e089      	b.n	80088f4 <ReadVariable+0x18c>
  {
    /* Set counter index to last element position in the page */
    counter = PAGE_SIZE - EE_ELEMENT_SIZE;
 80087e0:	f640 73f8 	movw	r3, #4088	; 0xff8
 80087e4:	61fb      	str	r3, [r7, #28]

    /* Check each page address starting from end */
    while (counter >= PAGE_HEADER_SIZE)
 80087e6:	e03f      	b.n	8008868 <ReadVariable+0x100>
    {
      /* Get the current location content to be compared with virtual address */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + counter));
 80087e8:	6a3a      	ldr	r2, [r7, #32]
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	4413      	add	r3, r2
 80087ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifndef FLASH_LINES_128B
      if (addressvalue != EE_PAGESTAT_ERASED)
 80087f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80087fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087fe:	bf08      	it	eq
 8008800:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8008804:	d02d      	beq.n	8008862 <ReadVariable+0xfa>
      {
        /* Compare the read address with the virtual address */
        if (EE_VIRTUALADDRESS_VALUE(addressvalue) == VirtAddress)
 8008806:	8a3b      	ldrh	r3, [r7, #16]
 8008808:	88fa      	ldrh	r2, [r7, #6]
 800880a:	429a      	cmp	r2, r3
 800880c:	d129      	bne.n	8008862 <ReadVariable+0xfa>
        {
          /* Calculate crc of variable data and virtual address */
          crc = CalculateCrc(EE_DATA_VALUE(addressvalue), EE_VIRTUALADDRESS_VALUE(addressvalue));
 800880e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008812:	f04f 0200 	mov.w	r2, #0
 8008816:	f04f 0300 	mov.w	r3, #0
 800881a:	000a      	movs	r2, r1
 800881c:	2300      	movs	r3, #0
 800881e:	8a3b      	ldrh	r3, [r7, #16]
 8008820:	4619      	mov	r1, r3
 8008822:	4610      	mov	r0, r2
 8008824:	f000 fe04 	bl	8009430 <CalculateCrc>
 8008828:	4603      	mov	r3, r0
 800882a:	60fb      	str	r3, [r7, #12]
          
          /* if crc verification pass, data is correct and is returned.
             if crc verification fails, data is corrupted and has to be skip */
          if (crc == EE_CRC_VALUE(addressvalue))
 800882c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008830:	f04f 0200 	mov.w	r2, #0
 8008834:	f04f 0300 	mov.w	r3, #0
 8008838:	0c02      	lsrs	r2, r0, #16
 800883a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800883e:	0c0b      	lsrs	r3, r1, #16
 8008840:	b293      	uxth	r3, r2
 8008842:	461a      	mov	r2, r3
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	4293      	cmp	r3, r2
 8008848:	d10b      	bne.n	8008862 <ReadVariable+0xfa>
          {
            /* Get content of variable value */
            *pData = EE_DATA_VALUE(addressvalue);
 800884a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800884e:	f04f 0200 	mov.w	r2, #0
 8008852:	f04f 0300 	mov.w	r3, #0
 8008856:	000a      	movs	r2, r1
 8008858:	2300      	movs	r3, #0
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	601a      	str	r2, [r3, #0]

            return EE_OK;
 800885e:	2300      	movs	r3, #0
 8008860:	e055      	b.n	800890e <ReadVariable+0x1a6>
          }
        }
      }
#endif
      /* Next address location */
      counter -= EE_ELEMENT_SIZE;
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	3b08      	subs	r3, #8
 8008866:	61fb      	str	r3, [r7, #28]
    while (counter >= PAGE_HEADER_SIZE)
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	2b1f      	cmp	r3, #31
 800886c:	d8bc      	bhi.n	80087e8 <ReadVariable+0x80>
    }

    /* Decrement page index circularly, among pages allocated to eeprom emulation */
    page = PREVIOUS_PAGE(page);
 800886e:	4b2a      	ldr	r3, [pc, #168]	; (8008918 <ReadVariable+0x1b0>)
 8008870:	881b      	ldrh	r3, [r3, #0]
 8008872:	029a      	lsls	r2, r3, #10
 8008874:	4b29      	ldr	r3, [pc, #164]	; (800891c <ReadVariable+0x1b4>)
 8008876:	4013      	ands	r3, r2
 8008878:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800887c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008880:	fb01 f303 	mul.w	r3, r1, r3
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	0b1b      	lsrs	r3, r3, #12
 8008888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	1d59      	adds	r1, r3, #5
 800888e:	4b24      	ldr	r3, [pc, #144]	; (8008920 <ReadVariable+0x1b8>)
 8008890:	fba3 2301 	umull	r2, r3, r3, r1
 8008894:	089a      	lsrs	r2, r3, #2
 8008896:	4613      	mov	r3, r2
 8008898:	005b      	lsls	r3, r3, #1
 800889a:	4413      	add	r3, r2
 800889c:	005b      	lsls	r3, r3, #1
 800889e:	1aca      	subs	r2, r1, r3
 80088a0:	4b1d      	ldr	r3, [pc, #116]	; (8008918 <ReadVariable+0x1b0>)
 80088a2:	881b      	ldrh	r3, [r3, #0]
 80088a4:	0299      	lsls	r1, r3, #10
 80088a6:	4b1d      	ldr	r3, [pc, #116]	; (800891c <ReadVariable+0x1b4>)
 80088a8:	400b      	ands	r3, r1
 80088aa:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80088ae:	fbb1 f0f3 	udiv	r0, r1, r3
 80088b2:	fb00 f303 	mul.w	r3, r0, r3
 80088b6:	1acb      	subs	r3, r1, r3
 80088b8:	0b1b      	lsrs	r3, r3, #12
 80088ba:	4413      	add	r3, r2
 80088bc:	627b      	str	r3, [r7, #36]	; 0x24
    pageaddress = PAGE_ADDRESS(page);
 80088be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80088c4:	031a      	lsls	r2, r3, #12
 80088c6:	4b14      	ldr	r3, [pc, #80]	; (8008918 <ReadVariable+0x1b0>)
 80088c8:	881b      	ldrh	r3, [r3, #0]
 80088ca:	0299      	lsls	r1, r3, #10
 80088cc:	4b13      	ldr	r3, [pc, #76]	; (800891c <ReadVariable+0x1b4>)
 80088ce:	400b      	ands	r3, r1
 80088d0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80088d4:	fbb1 f1f3 	udiv	r1, r1, r3
 80088d8:	4b0f      	ldr	r3, [pc, #60]	; (8008918 <ReadVariable+0x1b0>)
 80088da:	881b      	ldrh	r3, [r3, #0]
 80088dc:	0298      	lsls	r0, r3, #10
 80088de:	4b0f      	ldr	r3, [pc, #60]	; (800891c <ReadVariable+0x1b4>)
 80088e0:	4003      	ands	r3, r0
 80088e2:	fb01 f303 	mul.w	r3, r1, r3
 80088e6:	4413      	add	r3, r2
 80088e8:	623b      	str	r3, [r7, #32]
    pagestate = GetPageState(pageaddress);
 80088ea:	6a38      	ldr	r0, [r7, #32]
 80088ec:	f000 fd2a 	bl	8009344 <GetPageState>
 80088f0:	4603      	mov	r3, r0
 80088f2:	76fb      	strb	r3, [r7, #27]
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 80088f4:	7efb      	ldrb	r3, [r7, #27]
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	f43f af72 	beq.w	80087e0 <ReadVariable+0x78>
 80088fc:	7efb      	ldrb	r3, [r7, #27]
 80088fe:	2b03      	cmp	r3, #3
 8008900:	f43f af6e 	beq.w	80087e0 <ReadVariable+0x78>
 8008904:	7efb      	ldrb	r3, [r7, #27]
 8008906:	2b04      	cmp	r3, #4
 8008908:	f43f af6a 	beq.w	80087e0 <ReadVariable+0x78>
  }

  /* Variable is not found */
  return EE_NO_DATA;
 800890c:	2307      	movs	r3, #7
}
 800890e:	4618      	mov	r0, r3
 8008910:	3728      	adds	r7, #40	; 0x28
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	1fff75e0 	.word	0x1fff75e0
 800891c:	001ffc00 	.word	0x001ffc00
 8008920:	aaaaaaab 	.word	0xaaaaaaab

08008924 <WriteVariable>:
#ifndef FLASH_LINES_128B
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#else
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data)
#endif
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	4603      	mov	r3, r0
 800892c:	6039      	str	r1, [r7, #0]
 800892e:	80fb      	strh	r3, [r7, #6]
  EE_Status status = EE_OK;
 8008930:	2300      	movs	r3, #0
 8008932:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM, if not full */
#if defined (DUALCORE_FLASH_SHARING) || defined (FLASH_LINES_128B)
  status = VerifyPagesFullWriteVariable(VirtAddress, Data, EE_SIMPLE_WRITE);
 8008934:	88fb      	ldrh	r3, [r7, #6]
 8008936:	2201      	movs	r2, #1
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	4618      	mov	r0, r3
 800893c:	f000 fba2 	bl	8009084 <VerifyPagesFullWriteVariable>
 8008940:	4603      	mov	r3, r0
 8008942:	81fb      	strh	r3, [r7, #14]
#else
  status = VerifyPagesFullWriteVariable(VirtAddress, Data);
#endif
  if (status == EE_PAGE_FULL)
 8008944:	89fb      	ldrh	r3, [r7, #14]
 8008946:	2b12      	cmp	r3, #18
 8008948:	d107      	bne.n	800895a <WriteVariable+0x36>
  {
    /* In case the EEPROM pages are full, perform Pages transfer */
    return PagesTransfer(VirtAddress, Data, EE_TRANSFER_NORMAL);
 800894a:	88fb      	ldrh	r3, [r7, #6]
 800894c:	2200      	movs	r2, #0
 800894e:	6839      	ldr	r1, [r7, #0]
 8008950:	4618      	mov	r0, r3
 8008952:	f000 f951 	bl	8008bf8 <PagesTransfer>
 8008956:	4603      	mov	r3, r0
 8008958:	e000      	b.n	800895c <WriteVariable+0x38>
  }

  /* Return last operation status */
  return status;
 800895a:	89fb      	ldrh	r3, [r7, #14]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <VerifyPageFullyErased>:
  * @retval EE_Status
  *           - EE_PAGE_NOTERASED : if Page not erased
  *           - EE_PAGE_ERASED    : if Page erased
  */
static EE_Status VerifyPageFullyErased(uint32_t Address, uint32_t PageSize)
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  EE_Status readstatus = EE_PAGE_ERASED;
 800896e:	2311      	movs	r3, #17
 8008970:	81fb      	strh	r3, [r7, #14]
  uint32_t counter = 0U;
 8008972:	2300      	movs	r3, #0
 8008974:	60bb      	str	r3, [r7, #8]

  /* Check each element in the page */
  while (counter < PageSize)
 8008976:	e00f      	b.n	8008998 <VerifyPageFullyErased+0x34>
  {
    /* Compare the read address with the virtual address */
#ifndef FLASH_LINES_128B    
	if ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED)
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	4413      	add	r3, r2
 800897e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008986:	bf08      	it	eq
 8008988:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800898c:	d001      	beq.n	8008992 <VerifyPageFullyErased+0x2e>
#else
	if ( ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED) && ((*(__IO EE_ELEMENT_TYPE*)(Address+counter+8U)) != EE_PAGESTAT_ERASED) )
#endif    
	{
      /* In case one element is not erased, reset readstatus flag */
      readstatus = EE_PAGE_NOTERASED;
 800898e:	2310      	movs	r3, #16
 8008990:	81fb      	strh	r3, [r7, #14]
    }
    /* Next address location */
    counter = counter + EE_ELEMENT_SIZE;
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	3308      	adds	r3, #8
 8008996:	60bb      	str	r3, [r7, #8]
  while (counter < PageSize)
 8008998:	68ba      	ldr	r2, [r7, #8]
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	429a      	cmp	r2, r3
 800899e:	d3eb      	bcc.n	8008978 <VerifyPageFullyErased+0x14>
  }

  /* Return readstatus value */
  return readstatus;
 80089a0:	89fb      	ldrh	r3, [r7, #14]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3714      	adds	r7, #20
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
	...

080089b0 <FindPage>:
  * @retval Page_Index
  *           - Page Index: on success
  *           - @ref EE_NO_PAGE_FOUND : if an error occurs
  */
static uint32_t FindPage(EE_Find_type Operation)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	4603      	mov	r3, r0
 80089b8:	71fb      	strb	r3, [r7, #7]
  EE_State_type currentpagestatus = STATE_PAGE_INVALID, followingpagestatus = STATE_PAGE_INVALID;
 80089ba:	2305      	movs	r3, #5
 80089bc:	75fb      	strb	r3, [r7, #23]
 80089be:	2305      	movs	r3, #5
 80089c0:	75bb      	strb	r3, [r7, #22]
  uint32_t currentpage = 0U, followingpage = 0U, previouspage = 0U;
 80089c2:	2300      	movs	r3, #0
 80089c4:	613b      	str	r3, [r7, #16]
 80089c6:	2300      	movs	r3, #0
 80089c8:	60fb      	str	r3, [r7, #12]
 80089ca:	2300      	movs	r3, #0
 80089cc:	60bb      	str	r3, [r7, #8]

  /* Get currentpage status */
  currentpage = ubCurrentActivePage;
 80089ce:	4b85      	ldr	r3, [pc, #532]	; (8008be4 <FindPage+0x234>)
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	613b      	str	r3, [r7, #16]
  currentpagestatus = GetPageState(PAGE_ADDRESS(currentpage));
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80089da:	031a      	lsls	r2, r3, #12
 80089dc:	4b82      	ldr	r3, [pc, #520]	; (8008be8 <FindPage+0x238>)
 80089de:	881b      	ldrh	r3, [r3, #0]
 80089e0:	0299      	lsls	r1, r3, #10
 80089e2:	4b82      	ldr	r3, [pc, #520]	; (8008bec <FindPage+0x23c>)
 80089e4:	400b      	ands	r3, r1
 80089e6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80089ea:	fbb1 f1f3 	udiv	r1, r1, r3
 80089ee:	4b7e      	ldr	r3, [pc, #504]	; (8008be8 <FindPage+0x238>)
 80089f0:	881b      	ldrh	r3, [r3, #0]
 80089f2:	0298      	lsls	r0, r3, #10
 80089f4:	4b7d      	ldr	r3, [pc, #500]	; (8008bec <FindPage+0x23c>)
 80089f6:	4003      	ands	r3, r0
 80089f8:	fb01 f303 	mul.w	r3, r1, r3
 80089fc:	4413      	add	r3, r2
 80089fe:	4618      	mov	r0, r3
 8008a00:	f000 fca0 	bl	8009344 <GetPageState>
 8008a04:	4603      	mov	r3, r0
 8008a06:	75fb      	strb	r3, [r7, #23]

  /* Get followingpage status */
  followingpage = FOLLOWING_PAGE(currentpage);
 8008a08:	4b77      	ldr	r3, [pc, #476]	; (8008be8 <FindPage+0x238>)
 8008a0a:	881b      	ldrh	r3, [r3, #0]
 8008a0c:	029a      	lsls	r2, r3, #10
 8008a0e:	4b77      	ldr	r3, [pc, #476]	; (8008bec <FindPage+0x23c>)
 8008a10:	4013      	ands	r3, r2
 8008a12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008a16:	fbb2 f1f3 	udiv	r1, r2, r3
 8008a1a:	fb01 f303 	mul.w	r3, r1, r3
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	0b1b      	lsrs	r3, r3, #12
 8008a22:	693a      	ldr	r2, [r7, #16]
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	1c59      	adds	r1, r3, #1
 8008a28:	4b71      	ldr	r3, [pc, #452]	; (8008bf0 <FindPage+0x240>)
 8008a2a:	fba3 2301 	umull	r2, r3, r3, r1
 8008a2e:	089a      	lsrs	r2, r3, #2
 8008a30:	4613      	mov	r3, r2
 8008a32:	005b      	lsls	r3, r3, #1
 8008a34:	4413      	add	r3, r2
 8008a36:	005b      	lsls	r3, r3, #1
 8008a38:	1aca      	subs	r2, r1, r3
 8008a3a:	4b6b      	ldr	r3, [pc, #428]	; (8008be8 <FindPage+0x238>)
 8008a3c:	881b      	ldrh	r3, [r3, #0]
 8008a3e:	0299      	lsls	r1, r3, #10
 8008a40:	4b6a      	ldr	r3, [pc, #424]	; (8008bec <FindPage+0x23c>)
 8008a42:	400b      	ands	r3, r1
 8008a44:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008a48:	fbb1 f0f3 	udiv	r0, r1, r3
 8008a4c:	fb00 f303 	mul.w	r3, r0, r3
 8008a50:	1acb      	subs	r3, r1, r3
 8008a52:	0b1b      	lsrs	r3, r3, #12
 8008a54:	4413      	add	r3, r2
 8008a56:	60fb      	str	r3, [r7, #12]
  followingpagestatus = GetPageState(PAGE_ADDRESS(followingpage));
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008a5e:	031a      	lsls	r2, r3, #12
 8008a60:	4b61      	ldr	r3, [pc, #388]	; (8008be8 <FindPage+0x238>)
 8008a62:	881b      	ldrh	r3, [r3, #0]
 8008a64:	0299      	lsls	r1, r3, #10
 8008a66:	4b61      	ldr	r3, [pc, #388]	; (8008bec <FindPage+0x23c>)
 8008a68:	400b      	ands	r3, r1
 8008a6a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008a6e:	fbb1 f1f3 	udiv	r1, r1, r3
 8008a72:	4b5d      	ldr	r3, [pc, #372]	; (8008be8 <FindPage+0x238>)
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	0298      	lsls	r0, r3, #10
 8008a78:	4b5c      	ldr	r3, [pc, #368]	; (8008bec <FindPage+0x23c>)
 8008a7a:	4003      	ands	r3, r0
 8008a7c:	fb01 f303 	mul.w	r3, r1, r3
 8008a80:	4413      	add	r3, r2
 8008a82:	4618      	mov	r0, r3
 8008a84:	f000 fc5e 	bl	8009344 <GetPageState>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	75bb      	strb	r3, [r7, #22]

  /* Get previouspage status */
  previouspage = PREVIOUS_PAGE(currentpage);
 8008a8c:	4b56      	ldr	r3, [pc, #344]	; (8008be8 <FindPage+0x238>)
 8008a8e:	881b      	ldrh	r3, [r3, #0]
 8008a90:	029a      	lsls	r2, r3, #10
 8008a92:	4b56      	ldr	r3, [pc, #344]	; (8008bec <FindPage+0x23c>)
 8008a94:	4013      	ands	r3, r2
 8008a96:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008a9a:	fbb2 f1f3 	udiv	r1, r2, r3
 8008a9e:	fb01 f303 	mul.w	r3, r1, r3
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	0b1b      	lsrs	r3, r3, #12
 8008aa6:	693a      	ldr	r2, [r7, #16]
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	1d59      	adds	r1, r3, #5
 8008aac:	4b50      	ldr	r3, [pc, #320]	; (8008bf0 <FindPage+0x240>)
 8008aae:	fba3 2301 	umull	r2, r3, r3, r1
 8008ab2:	089a      	lsrs	r2, r3, #2
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	005b      	lsls	r3, r3, #1
 8008ab8:	4413      	add	r3, r2
 8008aba:	005b      	lsls	r3, r3, #1
 8008abc:	1aca      	subs	r2, r1, r3
 8008abe:	4b4a      	ldr	r3, [pc, #296]	; (8008be8 <FindPage+0x238>)
 8008ac0:	881b      	ldrh	r3, [r3, #0]
 8008ac2:	0299      	lsls	r1, r3, #10
 8008ac4:	4b49      	ldr	r3, [pc, #292]	; (8008bec <FindPage+0x23c>)
 8008ac6:	400b      	ands	r3, r1
 8008ac8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008acc:	fbb1 f0f3 	udiv	r0, r1, r3
 8008ad0:	fb00 f303 	mul.w	r3, r0, r3
 8008ad4:	1acb      	subs	r3, r1, r3
 8008ad6:	0b1b      	lsrs	r3, r3, #12
 8008ad8:	4413      	add	r3, r2
 8008ada:	60bb      	str	r3, [r7, #8]

  /* Write, read or erase operation */
  switch (Operation)
 8008adc:	79fb      	ldrb	r3, [r7, #7]
 8008ade:	2b02      	cmp	r3, #2
 8008ae0:	d071      	beq.n	8008bc6 <FindPage+0x216>
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	dc77      	bgt.n	8008bd6 <FindPage+0x226>
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d060      	beq.n	8008bac <FindPage+0x1fc>
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d173      	bne.n	8008bd6 <FindPage+0x226>
  {
    case FIND_WRITE_PAGE:   /* ---- Write operation ---- */
      /* Normal operation, no page transfer on going */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 8008aee:	7dfb      	ldrb	r3, [r7, #23]
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d12a      	bne.n	8008b4a <FindPage+0x19a>
      {
        /* Check if active page is not full */
        if (uwAddressNextWrite < PAGE_SIZE)
 8008af4:	4b3f      	ldr	r3, [pc, #252]	; (8008bf4 <FindPage+0x244>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008afc:	d201      	bcs.n	8008b02 <FindPage+0x152>
        {
          /* Return current Active page */
          return currentpage;
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	e06b      	b.n	8008bda <FindPage+0x22a>
        }
        else
        /* No more space in current active page */
        {
          /* Check if following page is erasing state */
          if (followingpagestatus == STATE_PAGE_ERASING)
 8008b02:	7dbb      	ldrb	r3, [r7, #22]
 8008b04:	2b04      	cmp	r3, #4
 8008b06:	d107      	bne.n	8008b18 <FindPage+0x168>
          {
            /* Force Cleanup, as not yet performed by user */
            if (EE_CleanUp() != EE_OK)
 8008b08:	f7ff fd92 	bl	8008630 <EE_CleanUp>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d002      	beq.n	8008b18 <FindPage+0x168>
            {
              return EE_NO_PAGE_FOUND;
 8008b12:	f04f 33ff 	mov.w	r3, #4294967295
 8008b16:	e060      	b.n	8008bda <FindPage+0x22a>
            }
          }

          /* Set current active page in valid state */
          if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 8008b18:	2103      	movs	r1, #3
 8008b1a:	6938      	ldr	r0, [r7, #16]
 8008b1c:	f000 fb40 	bl	80091a0 <SetPageState>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d002      	beq.n	8008b2c <FindPage+0x17c>
          {
            return EE_NO_PAGE_FOUND;
 8008b26:	f04f 33ff 	mov.w	r3, #4294967295
 8008b2a:	e056      	b.n	8008bda <FindPage+0x22a>
          }

          /* Set following page as active */
          if (SetPageState(followingpage, STATE_PAGE_ACTIVE) != EE_OK)
 8008b2c:	2102      	movs	r1, #2
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f000 fb36 	bl	80091a0 <SetPageState>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d002      	beq.n	8008b40 <FindPage+0x190>
          {
            return EE_NO_PAGE_FOUND;
 8008b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b3e:	e04c      	b.n	8008bda <FindPage+0x22a>
          }
          uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 8008b40:	4b2c      	ldr	r3, [pc, #176]	; (8008bf4 <FindPage+0x244>)
 8008b42:	2220      	movs	r2, #32
 8008b44:	601a      	str	r2, [r3, #0]
          return followingpage;         /* Following page is now active one */
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	e047      	b.n	8008bda <FindPage+0x22a>
        }
      }
      /* Transfer is on going, page receiving data */
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 8008b4a:	7dfb      	ldrb	r3, [r7, #23]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d12a      	bne.n	8008ba6 <FindPage+0x1f6>
        {
          /* Check if receive page is not full */
          if (uwAddressNextWrite < PAGE_SIZE)
 8008b50:	4b28      	ldr	r3, [pc, #160]	; (8008bf4 <FindPage+0x244>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b58:	d201      	bcs.n	8008b5e <FindPage+0x1ae>
          {
            /* Return current receive page */
            return currentpage;
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	e03d      	b.n	8008bda <FindPage+0x22a>
          }
          else
          /* No more space in current receive page */
          {
            /* Check if following page is erasing state */
            if (followingpagestatus == STATE_PAGE_ERASING)
 8008b5e:	7dbb      	ldrb	r3, [r7, #22]
 8008b60:	2b04      	cmp	r3, #4
 8008b62:	d107      	bne.n	8008b74 <FindPage+0x1c4>
            {
              /* Force Cleanup, as not yet performed by user */
              if (EE_CleanUp() != EE_OK)
 8008b64:	f7ff fd64 	bl	8008630 <EE_CleanUp>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d002      	beq.n	8008b74 <FindPage+0x1c4>
              {
                return EE_NO_PAGE_FOUND;
 8008b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b72:	e032      	b.n	8008bda <FindPage+0x22a>
              }
            }

            /* Set current receive page in valid state */
            if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 8008b74:	2103      	movs	r1, #3
 8008b76:	6938      	ldr	r0, [r7, #16]
 8008b78:	f000 fb12 	bl	80091a0 <SetPageState>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d002      	beq.n	8008b88 <FindPage+0x1d8>
            {
              return EE_NO_PAGE_FOUND;
 8008b82:	f04f 33ff 	mov.w	r3, #4294967295
 8008b86:	e028      	b.n	8008bda <FindPage+0x22a>
            }

            /* Set following page as receive */
            if (SetPageState(followingpage, STATE_PAGE_RECEIVE) != EE_OK)
 8008b88:	2101      	movs	r1, #1
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	f000 fb08 	bl	80091a0 <SetPageState>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d002      	beq.n	8008b9c <FindPage+0x1ec>
            {
              return EE_NO_PAGE_FOUND;
 8008b96:	f04f 33ff 	mov.w	r3, #4294967295
 8008b9a:	e01e      	b.n	8008bda <FindPage+0x22a>
            }
            uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 8008b9c:	4b15      	ldr	r3, [pc, #84]	; (8008bf4 <FindPage+0x244>)
 8008b9e:	2220      	movs	r2, #32
 8008ba0:	601a      	str	r2, [r3, #0]
            return followingpage;         /* Following page is now active one */
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	e019      	b.n	8008bda <FindPage+0x22a>
          }
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 8008ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8008baa:	e016      	b.n	8008bda <FindPage+0x22a>
        }
      }

    case FIND_READ_PAGE:  /* ---- Read operation ---- */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 8008bac:	7dfb      	ldrb	r3, [r7, #23]
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d101      	bne.n	8008bb6 <FindPage+0x206>
      {
        return currentpage;
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	e011      	b.n	8008bda <FindPage+0x22a>
      }
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 8008bb6:	7dfb      	ldrb	r3, [r7, #23]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d101      	bne.n	8008bc0 <FindPage+0x210>
        {
          return previouspage;
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	e00c      	b.n	8008bda <FindPage+0x22a>
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 8008bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8008bc4:	e009      	b.n	8008bda <FindPage+0x22a>
        }
      }

    case FIND_ERASE_PAGE: /* ---- Return the erased page */
      if (followingpagestatus == STATE_PAGE_ERASED)
 8008bc6:	7dbb      	ldrb	r3, [r7, #22]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d101      	bne.n	8008bd0 <FindPage+0x220>
      {
        return followingpage;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	e004      	b.n	8008bda <FindPage+0x22a>
      }
      else
      {
        return EE_NO_PAGE_FOUND;  /* No erased Page */
 8008bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8008bd4:	e001      	b.n	8008bda <FindPage+0x22a>

    default:
      ;
  }

  return EE_NO_PAGE_FOUND;
 8008bd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3718      	adds	r7, #24
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	2000054a 	.word	0x2000054a
 8008be8:	1fff75e0 	.word	0x1fff75e0
 8008bec:	001ffc00 	.word	0x001ffc00
 8008bf0:	aaaaaaab 	.word	0xaaaaaaab
 8008bf4:	20000014 	.word	0x20000014

08008bf8 <PagesTransfer>:
#ifndef FLASH_LINES_128B
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE Data, EE_Transfer_type Type)
#else
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Transfer_type Type)
#endif
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b08a      	sub	sp, #40	; 0x28
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	4603      	mov	r3, r0
 8008c00:	6039      	str	r1, [r7, #0]
 8008c02:	80fb      	strh	r3, [r7, #6]
 8008c04:	4613      	mov	r3, r2
 8008c06:	717b      	strb	r3, [r7, #5]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 8008c08:	2305      	movs	r3, #5
 8008c0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t pageaddress = 0U;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	61bb      	str	r3, [r7, #24]
  uint32_t page = 0U;
 8008c12:	2300      	movs	r3, #0
 8008c14:	623b      	str	r3, [r7, #32]
  uint32_t varidx = 0U;
 8008c16:	2300      	movs	r3, #0
 8008c18:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8008c1a:	f04f 0200 	mov.w	r2, #0
 8008c1e:	f04f 0300 	mov.w	r3, #0
 8008c22:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  uint16_t nb_dummy_lines=0U;
#endif
  EE_Status status = EE_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	81fb      	strh	r3, [r7, #14]
  EE_DATA_TYPE DataValue = 0U;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	60bb      	str	r3, [r7, #8]

    
  /* Get receive Page for transfer operation */
  page = FindPage((Type == EE_TRANSFER_NORMAL?FIND_ERASE_PAGE:FIND_WRITE_PAGE));
 8008c2e:	797b      	ldrb	r3, [r7, #5]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d101      	bne.n	8008c38 <PagesTransfer+0x40>
 8008c34:	2302      	movs	r3, #2
 8008c36:	e000      	b.n	8008c3a <PagesTransfer+0x42>
 8008c38:	2301      	movs	r3, #1
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7ff feb8 	bl	80089b0 <FindPage>
 8008c40:	6238      	str	r0, [r7, #32]
  if (page == EE_NO_PAGE_FOUND)
 8008c42:	6a3b      	ldr	r3, [r7, #32]
 8008c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c48:	d101      	bne.n	8008c4e <PagesTransfer+0x56>
  {
    return EE_ERROR_NOERASE_PAGE;
 8008c4a:	2304      	movs	r3, #4
 8008c4c:	e20c      	b.n	8009068 <PagesTransfer+0x470>
  }

  /* Reinitialize number of data written in the pages, and current active page */
  uhNbWrittenElements = 0U;
 8008c4e:	4bae      	ldr	r3, [pc, #696]	; (8008f08 <PagesTransfer+0x310>)
 8008c50:	2200      	movs	r2, #0
 8008c52:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = page;
 8008c54:	6a3b      	ldr	r3, [r7, #32]
 8008c56:	b2da      	uxtb	r2, r3
 8008c58:	4bac      	ldr	r3, [pc, #688]	; (8008f0c <PagesTransfer+0x314>)
 8008c5a:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 8008c5c:	4bac      	ldr	r3, [pc, #688]	; (8008f10 <PagesTransfer+0x318>)
 8008c5e:	2220      	movs	r2, #32
 8008c60:	601a      	str	r2, [r3, #0]

  /* Mark the erased page at receive state in case of normal transfer */
  /* It is already the case in recover transfer case */
  /* If program operation was failed, a Flash error code is returned */
  if (Type == EE_TRANSFER_NORMAL)
 8008c62:	797b      	ldrb	r3, [r7, #5]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d108      	bne.n	8008c7a <PagesTransfer+0x82>
  {
    if (SetPageState(page, STATE_PAGE_RECEIVE) != EE_OK)
 8008c68:	2101      	movs	r1, #1
 8008c6a:	6a38      	ldr	r0, [r7, #32]
 8008c6c:	f000 fa98 	bl	80091a0 <SetPageState>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d001      	beq.n	8008c7a <PagesTransfer+0x82>
    {
      return EE_WRITE_ERROR;
 8008c76:	2302      	movs	r3, #2
 8008c78:	e1f6      	b.n	8009068 <PagesTransfer+0x470>
    }
  }

  /* Set the previous active page and all previous valid pages to erasing state */
  /* In case of recover transfer, some of these pages may already be marked erasing */
  page = PREVIOUS_PAGE(page);
 8008c7a:	4ba6      	ldr	r3, [pc, #664]	; (8008f14 <PagesTransfer+0x31c>)
 8008c7c:	881b      	ldrh	r3, [r3, #0]
 8008c7e:	029a      	lsls	r2, r3, #10
 8008c80:	4ba5      	ldr	r3, [pc, #660]	; (8008f18 <PagesTransfer+0x320>)
 8008c82:	4013      	ands	r3, r2
 8008c84:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008c88:	fbb2 f1f3 	udiv	r1, r2, r3
 8008c8c:	fb01 f303 	mul.w	r3, r1, r3
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	0b1b      	lsrs	r3, r3, #12
 8008c94:	6a3a      	ldr	r2, [r7, #32]
 8008c96:	1ad3      	subs	r3, r2, r3
 8008c98:	1d59      	adds	r1, r3, #5
 8008c9a:	4ba0      	ldr	r3, [pc, #640]	; (8008f1c <PagesTransfer+0x324>)
 8008c9c:	fba3 2301 	umull	r2, r3, r3, r1
 8008ca0:	089a      	lsrs	r2, r3, #2
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	005b      	lsls	r3, r3, #1
 8008ca6:	4413      	add	r3, r2
 8008ca8:	005b      	lsls	r3, r3, #1
 8008caa:	1aca      	subs	r2, r1, r3
 8008cac:	4b99      	ldr	r3, [pc, #612]	; (8008f14 <PagesTransfer+0x31c>)
 8008cae:	881b      	ldrh	r3, [r3, #0]
 8008cb0:	0299      	lsls	r1, r3, #10
 8008cb2:	4b99      	ldr	r3, [pc, #612]	; (8008f18 <PagesTransfer+0x320>)
 8008cb4:	400b      	ands	r3, r1
 8008cb6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008cba:	fbb1 f0f3 	udiv	r0, r1, r3
 8008cbe:	fb00 f303 	mul.w	r3, r0, r3
 8008cc2:	1acb      	subs	r3, r1, r3
 8008cc4:	0b1b      	lsrs	r3, r3, #12
 8008cc6:	4413      	add	r3, r2
 8008cc8:	623b      	str	r3, [r7, #32]
  pageaddress = PAGE_ADDRESS(page);
 8008cca:	6a3b      	ldr	r3, [r7, #32]
 8008ccc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008cd0:	031a      	lsls	r2, r3, #12
 8008cd2:	4b90      	ldr	r3, [pc, #576]	; (8008f14 <PagesTransfer+0x31c>)
 8008cd4:	881b      	ldrh	r3, [r3, #0]
 8008cd6:	0299      	lsls	r1, r3, #10
 8008cd8:	4b8f      	ldr	r3, [pc, #572]	; (8008f18 <PagesTransfer+0x320>)
 8008cda:	400b      	ands	r3, r1
 8008cdc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008ce0:	fbb1 f1f3 	udiv	r1, r1, r3
 8008ce4:	4b8b      	ldr	r3, [pc, #556]	; (8008f14 <PagesTransfer+0x31c>)
 8008ce6:	881b      	ldrh	r3, [r3, #0]
 8008ce8:	0298      	lsls	r0, r3, #10
 8008cea:	4b8b      	ldr	r3, [pc, #556]	; (8008f18 <PagesTransfer+0x320>)
 8008cec:	4003      	ands	r3, r0
 8008cee:	fb01 f303 	mul.w	r3, r1, r3
 8008cf2:	4413      	add	r3, r2
 8008cf4:	61bb      	str	r3, [r7, #24]
  pagestatus = GetPageState(pageaddress);
 8008cf6:	69b8      	ldr	r0, [r7, #24]
 8008cf8:	f000 fb24 	bl	8009344 <GetPageState>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 8008d02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d004      	beq.n	8008d14 <PagesTransfer+0x11c>
 8008d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d0e:	2b04      	cmp	r3, #4
 8008d10:	f040 80ac 	bne.w	8008e6c <PagesTransfer+0x274>
  {
    /* Set active page to erasing */
    if (pagestatus == STATE_PAGE_ACTIVE)
 8008d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d18:	2b02      	cmp	r3, #2
 8008d1a:	d108      	bne.n	8008d2e <PagesTransfer+0x136>
    {
      if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 8008d1c:	2104      	movs	r1, #4
 8008d1e:	6a38      	ldr	r0, [r7, #32]
 8008d20:	f000 fa3e 	bl	80091a0 <SetPageState>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d001      	beq.n	8008d2e <PagesTransfer+0x136>
      {
        return EE_WRITE_ERROR;
 8008d2a:	2302      	movs	r3, #2
 8008d2c:	e19c      	b.n	8009068 <PagesTransfer+0x470>
      }
    }

    /* Inspect the previous pages to set all valid pages to erasing state */
    /* In case of recover, some valid pages may be already erasing state */
    page = PREVIOUS_PAGE(page);
 8008d2e:	4b79      	ldr	r3, [pc, #484]	; (8008f14 <PagesTransfer+0x31c>)
 8008d30:	881b      	ldrh	r3, [r3, #0]
 8008d32:	029a      	lsls	r2, r3, #10
 8008d34:	4b78      	ldr	r3, [pc, #480]	; (8008f18 <PagesTransfer+0x320>)
 8008d36:	4013      	ands	r3, r2
 8008d38:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008d3c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008d40:	fb01 f303 	mul.w	r3, r1, r3
 8008d44:	1ad3      	subs	r3, r2, r3
 8008d46:	0b1b      	lsrs	r3, r3, #12
 8008d48:	6a3a      	ldr	r2, [r7, #32]
 8008d4a:	1ad3      	subs	r3, r2, r3
 8008d4c:	1d59      	adds	r1, r3, #5
 8008d4e:	4b73      	ldr	r3, [pc, #460]	; (8008f1c <PagesTransfer+0x324>)
 8008d50:	fba3 2301 	umull	r2, r3, r3, r1
 8008d54:	089a      	lsrs	r2, r3, #2
 8008d56:	4613      	mov	r3, r2
 8008d58:	005b      	lsls	r3, r3, #1
 8008d5a:	4413      	add	r3, r2
 8008d5c:	005b      	lsls	r3, r3, #1
 8008d5e:	1aca      	subs	r2, r1, r3
 8008d60:	4b6c      	ldr	r3, [pc, #432]	; (8008f14 <PagesTransfer+0x31c>)
 8008d62:	881b      	ldrh	r3, [r3, #0]
 8008d64:	0299      	lsls	r1, r3, #10
 8008d66:	4b6c      	ldr	r3, [pc, #432]	; (8008f18 <PagesTransfer+0x320>)
 8008d68:	400b      	ands	r3, r1
 8008d6a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008d6e:	fbb1 f0f3 	udiv	r0, r1, r3
 8008d72:	fb00 f303 	mul.w	r3, r0, r3
 8008d76:	1acb      	subs	r3, r1, r3
 8008d78:	0b1b      	lsrs	r3, r3, #12
 8008d7a:	4413      	add	r3, r2
 8008d7c:	623b      	str	r3, [r7, #32]
    pageaddress = PAGE_ADDRESS(page);
 8008d7e:	6a3b      	ldr	r3, [r7, #32]
 8008d80:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008d84:	031a      	lsls	r2, r3, #12
 8008d86:	4b63      	ldr	r3, [pc, #396]	; (8008f14 <PagesTransfer+0x31c>)
 8008d88:	881b      	ldrh	r3, [r3, #0]
 8008d8a:	0299      	lsls	r1, r3, #10
 8008d8c:	4b62      	ldr	r3, [pc, #392]	; (8008f18 <PagesTransfer+0x320>)
 8008d8e:	400b      	ands	r3, r1
 8008d90:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008d94:	fbb1 f1f3 	udiv	r1, r1, r3
 8008d98:	4b5e      	ldr	r3, [pc, #376]	; (8008f14 <PagesTransfer+0x31c>)
 8008d9a:	881b      	ldrh	r3, [r3, #0]
 8008d9c:	0298      	lsls	r0, r3, #10
 8008d9e:	4b5e      	ldr	r3, [pc, #376]	; (8008f18 <PagesTransfer+0x320>)
 8008da0:	4003      	ands	r3, r0
 8008da2:	fb01 f303 	mul.w	r3, r1, r3
 8008da6:	4413      	add	r3, r2
 8008da8:	61bb      	str	r3, [r7, #24]
    pagestatus = GetPageState(pageaddress);
 8008daa:	69b8      	ldr	r0, [r7, #24]
 8008dac:	f000 faca 	bl	8009344 <GetPageState>
 8008db0:	4603      	mov	r3, r0
 8008db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 8008db6:	e050      	b.n	8008e5a <PagesTransfer+0x262>
    {
      /* Set valid page to erasing */
      if (pagestatus == STATE_PAGE_VALID)
 8008db8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dbc:	2b03      	cmp	r3, #3
 8008dbe:	d108      	bne.n	8008dd2 <PagesTransfer+0x1da>
      {
        if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 8008dc0:	2104      	movs	r1, #4
 8008dc2:	6a38      	ldr	r0, [r7, #32]
 8008dc4:	f000 f9ec 	bl	80091a0 <SetPageState>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d001      	beq.n	8008dd2 <PagesTransfer+0x1da>
        {
          return EE_WRITE_ERROR;
 8008dce:	2302      	movs	r3, #2
 8008dd0:	e14a      	b.n	8009068 <PagesTransfer+0x470>
        }
      }

      /* decrement page index */
      page = PREVIOUS_PAGE(page);
 8008dd2:	4b50      	ldr	r3, [pc, #320]	; (8008f14 <PagesTransfer+0x31c>)
 8008dd4:	881b      	ldrh	r3, [r3, #0]
 8008dd6:	029a      	lsls	r2, r3, #10
 8008dd8:	4b4f      	ldr	r3, [pc, #316]	; (8008f18 <PagesTransfer+0x320>)
 8008dda:	4013      	ands	r3, r2
 8008ddc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008de0:	fbb2 f1f3 	udiv	r1, r2, r3
 8008de4:	fb01 f303 	mul.w	r3, r1, r3
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	0b1b      	lsrs	r3, r3, #12
 8008dec:	6a3a      	ldr	r2, [r7, #32]
 8008dee:	1ad3      	subs	r3, r2, r3
 8008df0:	1d59      	adds	r1, r3, #5
 8008df2:	4b4a      	ldr	r3, [pc, #296]	; (8008f1c <PagesTransfer+0x324>)
 8008df4:	fba3 2301 	umull	r2, r3, r3, r1
 8008df8:	089a      	lsrs	r2, r3, #2
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	005b      	lsls	r3, r3, #1
 8008dfe:	4413      	add	r3, r2
 8008e00:	005b      	lsls	r3, r3, #1
 8008e02:	1aca      	subs	r2, r1, r3
 8008e04:	4b43      	ldr	r3, [pc, #268]	; (8008f14 <PagesTransfer+0x31c>)
 8008e06:	881b      	ldrh	r3, [r3, #0]
 8008e08:	0299      	lsls	r1, r3, #10
 8008e0a:	4b43      	ldr	r3, [pc, #268]	; (8008f18 <PagesTransfer+0x320>)
 8008e0c:	400b      	ands	r3, r1
 8008e0e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008e12:	fbb1 f0f3 	udiv	r0, r1, r3
 8008e16:	fb00 f303 	mul.w	r3, r0, r3
 8008e1a:	1acb      	subs	r3, r1, r3
 8008e1c:	0b1b      	lsrs	r3, r3, #12
 8008e1e:	4413      	add	r3, r2
 8008e20:	623b      	str	r3, [r7, #32]
      pageaddress = PAGE_ADDRESS(page);
 8008e22:	6a3b      	ldr	r3, [r7, #32]
 8008e24:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008e28:	031a      	lsls	r2, r3, #12
 8008e2a:	4b3a      	ldr	r3, [pc, #232]	; (8008f14 <PagesTransfer+0x31c>)
 8008e2c:	881b      	ldrh	r3, [r3, #0]
 8008e2e:	0299      	lsls	r1, r3, #10
 8008e30:	4b39      	ldr	r3, [pc, #228]	; (8008f18 <PagesTransfer+0x320>)
 8008e32:	400b      	ands	r3, r1
 8008e34:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008e38:	fbb1 f1f3 	udiv	r1, r1, r3
 8008e3c:	4b35      	ldr	r3, [pc, #212]	; (8008f14 <PagesTransfer+0x31c>)
 8008e3e:	881b      	ldrh	r3, [r3, #0]
 8008e40:	0298      	lsls	r0, r3, #10
 8008e42:	4b35      	ldr	r3, [pc, #212]	; (8008f18 <PagesTransfer+0x320>)
 8008e44:	4003      	ands	r3, r0
 8008e46:	fb01 f303 	mul.w	r3, r1, r3
 8008e4a:	4413      	add	r3, r2
 8008e4c:	61bb      	str	r3, [r7, #24]
      pagestatus = GetPageState(pageaddress);
 8008e4e:	69b8      	ldr	r0, [r7, #24]
 8008e50:	f000 fa78 	bl	8009344 <GetPageState>
 8008e54:	4603      	mov	r3, r0
 8008e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 8008e5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e5e:	2b03      	cmp	r3, #3
 8008e60:	d0aa      	beq.n	8008db8 <PagesTransfer+0x1c0>
 8008e62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e66:	2b04      	cmp	r3, #4
 8008e68:	d0a6      	beq.n	8008db8 <PagesTransfer+0x1c0>
  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 8008e6a:	e008      	b.n	8008e7e <PagesTransfer+0x286>
    }
  }
  else
  {
    if ((Type == EE_TRANSFER_RECOVER) && (pagestatus == STATE_PAGE_VALID))
 8008e6c:	797b      	ldrb	r3, [r7, #5]
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d103      	bne.n	8008e7a <PagesTransfer+0x282>
 8008e72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e76:	2b03      	cmp	r3, #3
 8008e78:	d001      	beq.n	8008e7e <PagesTransfer+0x286>
      /* (valid state). Then erasing state marking was already completed */
    }
    else
    {
      /* Inconsistent previous page state */
      return EE_INVALID_PAGE_SEQUENCE;
 8008e7a:	230a      	movs	r3, #10
 8008e7c:	e0f4      	b.n	8009068 <PagesTransfer+0x470>
    }
  }

  /* In case of recover transfer, transfer must be resumed where it has been stopped */
  /* Update global variables to reflect current transfer status */
  if (Type == EE_TRANSFER_RECOVER)
 8008e7e:	797b      	ldrb	r3, [r7, #5]
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	f040 80a3 	bne.w	8008fcc <PagesTransfer+0x3d4>
  {
#ifdef FLASH_LINES_128B
    nb_dummy_lines=0;
#endif
    /* Count number of elements already transferred in current receive page */
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8008e86:	2320      	movs	r3, #32
 8008e88:	61fb      	str	r3, [r7, #28]
 8008e8a:	e031      	b.n	8008ef0 <PagesTransfer+0x2f8>
    {
      /* Get next element in receive page */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 8008e8c:	4b1f      	ldr	r3, [pc, #124]	; (8008f0c <PagesTransfer+0x314>)
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008e94:	031a      	lsls	r2, r3, #12
 8008e96:	4b1f      	ldr	r3, [pc, #124]	; (8008f14 <PagesTransfer+0x31c>)
 8008e98:	881b      	ldrh	r3, [r3, #0]
 8008e9a:	0299      	lsls	r1, r3, #10
 8008e9c:	4b1e      	ldr	r3, [pc, #120]	; (8008f18 <PagesTransfer+0x320>)
 8008e9e:	400b      	ands	r3, r1
 8008ea0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008ea4:	fbb1 f1f3 	udiv	r1, r1, r3
 8008ea8:	4b1a      	ldr	r3, [pc, #104]	; (8008f14 <PagesTransfer+0x31c>)
 8008eaa:	881b      	ldrh	r3, [r3, #0]
 8008eac:	0298      	lsls	r0, r3, #10
 8008eae:	4b1a      	ldr	r3, [pc, #104]	; (8008f18 <PagesTransfer+0x320>)
 8008eb0:	4003      	ands	r3, r0
 8008eb2:	fb01 f303 	mul.w	r3, r1, r3
 8008eb6:	441a      	add	r2, r3
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	4413      	add	r3, r2
 8008ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec0:	e9c7 2304 	strd	r2, r3, [r7, #16]
        uhNbWrittenElements++;
        uwAddressNextWrite += EE_ELEMENT_SIZE;
      }
      else if ((addressvalue != EE_PAGESTAT_ERASED) && (addressvalue2 != EE_PAGESTAT_ERASED)&&(addressvalue != 0x0000000000000000U)&& (addressvalue2 != 0x0000000000000000U))
#else
      if (addressvalue != EE_PAGESTAT_ERASED)
 8008ec4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ecc:	bf08      	it	eq
 8008ece:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8008ed2:	d012      	beq.n	8008efa <PagesTransfer+0x302>
#endif
      {
        /* Update global variables accordingly */
        uhNbWrittenElements++;
 8008ed4:	4b0c      	ldr	r3, [pc, #48]	; (8008f08 <PagesTransfer+0x310>)
 8008ed6:	881b      	ldrh	r3, [r3, #0]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	4b0a      	ldr	r3, [pc, #40]	; (8008f08 <PagesTransfer+0x310>)
 8008ede:	801a      	strh	r2, [r3, #0]
        uwAddressNextWrite += EE_ELEMENT_SIZE;
 8008ee0:	4b0b      	ldr	r3, [pc, #44]	; (8008f10 <PagesTransfer+0x318>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	3308      	adds	r3, #8
 8008ee6:	4a0a      	ldr	r2, [pc, #40]	; (8008f10 <PagesTransfer+0x318>)
 8008ee8:	6013      	str	r3, [r2, #0]
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	3308      	adds	r3, #8
 8008eee:	61fb      	str	r3, [r7, #28]
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ef6:	d3c9      	bcc.n	8008e8c <PagesTransfer+0x294>
 8008ef8:	e000      	b.n	8008efc <PagesTransfer+0x304>
      }
      else
      {
        break;
 8008efa:	bf00      	nop
      }
    }

    /* Count number of elements already transferred in previous valid pages */
    page = ubCurrentActivePage;
 8008efc:	4b03      	ldr	r3, [pc, #12]	; (8008f0c <PagesTransfer+0x314>)
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	623b      	str	r3, [r7, #32]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 8008f02:	2300      	movs	r3, #0
 8008f04:	61fb      	str	r3, [r7, #28]
 8008f06:	e05c      	b.n	8008fc2 <PagesTransfer+0x3ca>
 8008f08:	20000548 	.word	0x20000548
 8008f0c:	2000054a 	.word	0x2000054a
 8008f10:	20000014 	.word	0x20000014
 8008f14:	1fff75e0 	.word	0x1fff75e0
 8008f18:	001ffc00 	.word	0x001ffc00
 8008f1c:	aaaaaaab 	.word	0xaaaaaaab
    {
      /* Decrement page index among circular pages list */
      page = PREVIOUS_PAGE(page);
 8008f20:	4b53      	ldr	r3, [pc, #332]	; (8009070 <PagesTransfer+0x478>)
 8008f22:	881b      	ldrh	r3, [r3, #0]
 8008f24:	029a      	lsls	r2, r3, #10
 8008f26:	4b53      	ldr	r3, [pc, #332]	; (8009074 <PagesTransfer+0x47c>)
 8008f28:	4013      	ands	r3, r2
 8008f2a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008f2e:	fbb2 f1f3 	udiv	r1, r2, r3
 8008f32:	fb01 f303 	mul.w	r3, r1, r3
 8008f36:	1ad3      	subs	r3, r2, r3
 8008f38:	0b1b      	lsrs	r3, r3, #12
 8008f3a:	6a3a      	ldr	r2, [r7, #32]
 8008f3c:	1ad3      	subs	r3, r2, r3
 8008f3e:	1d59      	adds	r1, r3, #5
 8008f40:	4b4d      	ldr	r3, [pc, #308]	; (8009078 <PagesTransfer+0x480>)
 8008f42:	fba3 2301 	umull	r2, r3, r3, r1
 8008f46:	089a      	lsrs	r2, r3, #2
 8008f48:	4613      	mov	r3, r2
 8008f4a:	005b      	lsls	r3, r3, #1
 8008f4c:	4413      	add	r3, r2
 8008f4e:	005b      	lsls	r3, r3, #1
 8008f50:	1aca      	subs	r2, r1, r3
 8008f52:	4b47      	ldr	r3, [pc, #284]	; (8009070 <PagesTransfer+0x478>)
 8008f54:	881b      	ldrh	r3, [r3, #0]
 8008f56:	0299      	lsls	r1, r3, #10
 8008f58:	4b46      	ldr	r3, [pc, #280]	; (8009074 <PagesTransfer+0x47c>)
 8008f5a:	400b      	ands	r3, r1
 8008f5c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008f60:	fbb1 f0f3 	udiv	r0, r1, r3
 8008f64:	fb00 f303 	mul.w	r3, r0, r3
 8008f68:	1acb      	subs	r3, r1, r3
 8008f6a:	0b1b      	lsrs	r3, r3, #12
 8008f6c:	4413      	add	r3, r2
 8008f6e:	623b      	str	r3, [r7, #32]
      pagestatus = GetPageState(PAGE_ADDRESS(page));
 8008f70:	6a3b      	ldr	r3, [r7, #32]
 8008f72:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008f76:	031a      	lsls	r2, r3, #12
 8008f78:	4b3d      	ldr	r3, [pc, #244]	; (8009070 <PagesTransfer+0x478>)
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	0299      	lsls	r1, r3, #10
 8008f7e:	4b3d      	ldr	r3, [pc, #244]	; (8009074 <PagesTransfer+0x47c>)
 8008f80:	400b      	ands	r3, r1
 8008f82:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008f86:	fbb1 f1f3 	udiv	r1, r1, r3
 8008f8a:	4b39      	ldr	r3, [pc, #228]	; (8009070 <PagesTransfer+0x478>)
 8008f8c:	881b      	ldrh	r3, [r3, #0]
 8008f8e:	0298      	lsls	r0, r3, #10
 8008f90:	4b38      	ldr	r3, [pc, #224]	; (8009074 <PagesTransfer+0x47c>)
 8008f92:	4003      	ands	r3, r0
 8008f94:	fb01 f303 	mul.w	r3, r1, r3
 8008f98:	4413      	add	r3, r2
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f000 f9d2 	bl	8009344 <GetPageState>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

      /* Check if page is valid state */
      if (pagestatus == STATE_PAGE_VALID)
 8008fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008faa:	2b03      	cmp	r3, #3
 8008fac:	d10d      	bne.n	8008fca <PagesTransfer+0x3d2>
      {
        /* Update uhNbWrittenElements with number of elements in page */
        uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 8008fae:	4b33      	ldr	r3, [pc, #204]	; (800907c <PagesTransfer+0x484>)
 8008fb0:	881b      	ldrh	r3, [r3, #0]
 8008fb2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	4b30      	ldr	r3, [pc, #192]	; (800907c <PagesTransfer+0x484>)
 8008fba:	801a      	strh	r2, [r3, #0]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	61fb      	str	r3, [r7, #28]
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	2b05      	cmp	r3, #5
 8008fc6:	d9ab      	bls.n	8008f20 <PagesTransfer+0x328>
 8008fc8:	e000      	b.n	8008fcc <PagesTransfer+0x3d4>
        nb_dummy_lines=nb_dummy_lines+2;
#endif
      }
      else
      {
        break;
 8008fca:	bf00      	nop
      }
    }
  }

#if defined (DUALCORE_FLASH_SHARING) || defined (FLASH_LINES_128B)  
    if (VerifyPagesFullWriteVariable(VirtAddress, Data, EE_TRANSFER) != EE_OK)
 8008fcc:	88fb      	ldrh	r3, [r7, #6]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	6839      	ldr	r1, [r7, #0]
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f000 f856 	bl	8009084 <VerifyPagesFullWriteVariable>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d001      	beq.n	8008fe2 <PagesTransfer+0x3ea>
    {
      return EE_WRITE_ERROR;
 8008fde:	2302      	movs	r3, #2
 8008fe0:	e042      	b.n	8009068 <PagesTransfer+0x470>

#ifdef FLASH_LINES_128B
  varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U);
  for (varidx = (varidx >= nb_dummy_lines?(varidx-nb_dummy_lines):1U); varidx < NB_OF_VARIABLES+1; varidx++)
#else    
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 8008fe2:	4b26      	ldr	r3, [pc, #152]	; (800907c <PagesTransfer+0x484>)
 8008fe4:	881b      	ldrh	r3, [r3, #0]
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d903      	bls.n	8008ff2 <PagesTransfer+0x3fa>
 8008fea:	4b24      	ldr	r3, [pc, #144]	; (800907c <PagesTransfer+0x484>)
 8008fec:	881b      	ldrh	r3, [r3, #0]
 8008fee:	3b02      	subs	r3, #2
 8008ff0:	e000      	b.n	8008ff4 <PagesTransfer+0x3fc>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	61fb      	str	r3, [r7, #28]
 8008ff6:	e026      	b.n	8009046 <PagesTransfer+0x44e>
#endif
  {  
       /* Check each variable except the one passed as parameter */
    if (varidx != VirtAddress)
 8008ff8:	88fb      	ldrh	r3, [r7, #6]
 8008ffa:	69fa      	ldr	r2, [r7, #28]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d01f      	beq.n	8009040 <PagesTransfer+0x448>
    {
      /* Read the last variable updates */
      status = ReadVariable(varidx, &DataValue);
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	b29b      	uxth	r3, r3
 8009004:	f107 0208 	add.w	r2, r7, #8
 8009008:	4611      	mov	r1, r2
 800900a:	4618      	mov	r0, r3
 800900c:	f7ff fbac 	bl	8008768 <ReadVariable>
 8009010:	4603      	mov	r3, r0
 8009012:	81fb      	strh	r3, [r7, #14]
      if (status == EE_OK)
 8009014:	89fb      	ldrh	r3, [r7, #14]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d10d      	bne.n	8009036 <PagesTransfer+0x43e>
      {
        /* In case variable corresponding to the virtual address was found */
        /* Transfer the variable to the new active page */
        /* If program operation was failed, a Flash error code is returned */
    #if defined (DUALCORE_FLASH_SHARING)
            status = VerifyPagesFullWriteVariable(varidx, DataValue, EE_TRANSFER);
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	b29b      	uxth	r3, r3
 800901e:	68b9      	ldr	r1, [r7, #8]
 8009020:	2200      	movs	r2, #0
 8009022:	4618      	mov	r0, r3
 8009024:	f000 f82e 	bl	8009084 <VerifyPagesFullWriteVariable>
 8009028:	4603      	mov	r3, r0
 800902a:	81fb      	strh	r3, [r7, #14]
    #elif defined (FLASH_LINES_128B)
            status = VerifyPagesFullWriteVariable(varidx, &DataValue, EE_TRANSFER);
    #else
            status = VerifyPagesFullWriteVariable(varidx, DataValue);
    #endif
        if (status != EE_OK)
 800902c:	89fb      	ldrh	r3, [r7, #14]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d006      	beq.n	8009040 <PagesTransfer+0x448>
        {
          return status;
 8009032:	89fb      	ldrh	r3, [r7, #14]
 8009034:	e018      	b.n	8009068 <PagesTransfer+0x470>
        }
      }
      else
      {
        if (status != EE_NO_DATA)
 8009036:	89fb      	ldrh	r3, [r7, #14]
 8009038:	2b07      	cmp	r3, #7
 800903a:	d001      	beq.n	8009040 <PagesTransfer+0x448>
        {
          /* In case variable is not found , do nothing */
          /* Any other status is error code occurs during variable read */
          return status;
 800903c:	89fb      	ldrh	r3, [r7, #14]
 800903e:	e013      	b.n	8009068 <PagesTransfer+0x470>
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	3301      	adds	r3, #1
 8009044:	61fb      	str	r3, [r7, #28]
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800904c:	d9d4      	bls.n	8008ff8 <PagesTransfer+0x400>
      }
    }
  }

  /* Transfer is now done, mark the receive state page as active */
  if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 800904e:	4b0c      	ldr	r3, [pc, #48]	; (8009080 <PagesTransfer+0x488>)
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	2102      	movs	r1, #2
 8009054:	4618      	mov	r0, r3
 8009056:	f000 f8a3 	bl	80091a0 <SetPageState>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d001      	beq.n	8009064 <PagesTransfer+0x46c>
  {
    return EE_WRITE_ERROR;
 8009060:	2302      	movs	r3, #2
 8009062:	e001      	b.n	8009068 <PagesTransfer+0x470>
  }

  /* Return last operation flash status */
  return EE_CLEANUP_REQUIRED;
 8009064:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 8009068:	4618      	mov	r0, r3
 800906a:	3728      	adds	r7, #40	; 0x28
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	1fff75e0 	.word	0x1fff75e0
 8009074:	001ffc00 	.word	0x001ffc00
 8009078:	aaaaaaab 	.word	0xaaaaaaab
 800907c:	20000548 	.word	0x20000548
 8009080:	2000054a 	.word	0x2000054a

08009084 <VerifyPagesFullWriteVariable>:
#elif defined (FLASH_LINES_128B)
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Write_type Write_type)
#else
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#endif
{
 8009084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009088:	b08d      	sub	sp, #52	; 0x34
 800908a:	af02      	add	r7, sp, #8
 800908c:	4603      	mov	r3, r0
 800908e:	6139      	str	r1, [r7, #16]
 8009090:	82fb      	strh	r3, [r7, #22]
 8009092:	4613      	mov	r3, r2
 8009094:	757b      	strb	r3, [r7, #21]
#ifndef FLASH_LINES_128B
  uint32_t crc = 0U;
 8009096:	2300      	movs	r3, #0
 8009098:	627b      	str	r3, [r7, #36]	; 0x24
  uint64_t pData64[2] = {0,0};
  uint64_t crc = 0U;
#endif

  /* Check if pages are full, i.e. max number of written elements achieved */
  if (uhNbWrittenElements >= NB_MAX_WRITTEN_ELEMENTS)
 800909a:	4b3d      	ldr	r3, [pc, #244]	; (8009190 <VerifyPagesFullWriteVariable+0x10c>)
 800909c:	881b      	ldrh	r3, [r3, #0]
 800909e:	f240 52f3 	movw	r2, #1523	; 0x5f3
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d901      	bls.n	80090aa <VerifyPagesFullWriteVariable+0x26>
  {
    return EE_PAGE_FULL;
 80090a6:	2312      	movs	r3, #18
 80090a8:	e06c      	b.n	8009184 <VerifyPagesFullWriteVariable+0x100>
  }

  /* Get active Page for write operation */
  uint32_t activepage = FindPage(FIND_WRITE_PAGE);
 80090aa:	2001      	movs	r0, #1
 80090ac:	f7ff fc80 	bl	80089b0 <FindPage>
 80090b0:	6238      	str	r0, [r7, #32]
  uint32_t activepageaddress = 0U;
 80090b2:	2300      	movs	r3, #0
 80090b4:	61fb      	str	r3, [r7, #28]

  /* Check if there is no active page */
  if (activepage == EE_NO_PAGE_FOUND)
 80090b6:	6a3b      	ldr	r3, [r7, #32]
 80090b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090bc:	d101      	bne.n	80090c2 <VerifyPagesFullWriteVariable+0x3e>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 80090be:	2303      	movs	r3, #3
 80090c0:	e060      	b.n	8009184 <VerifyPagesFullWriteVariable+0x100>
  }

  activepageaddress = PAGE_ADDRESS(activepage);
 80090c2:	6a3b      	ldr	r3, [r7, #32]
 80090c4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80090c8:	0319      	lsls	r1, r3, #12
 80090ca:	4b32      	ldr	r3, [pc, #200]	; (8009194 <VerifyPagesFullWriteVariable+0x110>)
 80090cc:	881b      	ldrh	r3, [r3, #0]
 80090ce:	029a      	lsls	r2, r3, #10
 80090d0:	4b31      	ldr	r3, [pc, #196]	; (8009198 <VerifyPagesFullWriteVariable+0x114>)
 80090d2:	4013      	ands	r3, r2
 80090d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80090d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80090dc:	4b2d      	ldr	r3, [pc, #180]	; (8009194 <VerifyPagesFullWriteVariable+0x110>)
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	0298      	lsls	r0, r3, #10
 80090e2:	4b2d      	ldr	r3, [pc, #180]	; (8009198 <VerifyPagesFullWriteVariable+0x114>)
 80090e4:	4003      	ands	r3, r0
 80090e6:	fb02 f303 	mul.w	r3, r2, r3
 80090ea:	440b      	add	r3, r1
 80090ec:	61fb      	str	r3, [r7, #28]

  /* Force crc to 0 in case of Data/VirtAddress are 0*/
#ifndef FLASH_LINES_128B
  if ((Data == 0U) && (VirtAddress == 0U))
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d105      	bne.n	8009100 <VerifyPagesFullWriteVariable+0x7c>
 80090f4:	8afb      	ldrh	r3, [r7, #22]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d102      	bne.n	8009100 <VerifyPagesFullWriteVariable+0x7c>
#else
  if ((Data[0] == 0U) && (Data[1] == 0U) && (VirtAddress == 0U))

#endif
  {
    crc = 0U;
 80090fa:	2300      	movs	r3, #0
 80090fc:	627b      	str	r3, [r7, #36]	; 0x24
 80090fe:	e006      	b.n	800910e <VerifyPagesFullWriteVariable+0x8a>
  }
  else
  {
#ifndef FLASH_LINES_128B 
    /* Calculate crc of variable data and virtual address */
    crc = CalculateCrc(Data, VirtAddress);
 8009100:	8afb      	ldrh	r3, [r7, #22]
 8009102:	4619      	mov	r1, r3
 8009104:	6938      	ldr	r0, [r7, #16]
 8009106:	f000 f993 	bl	8009430 <CalculateCrc>
 800910a:	4603      	mov	r3, r0
 800910c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined (DUALCORE_FLASH_SHARING)
  /* Program variable data + virtual address + crc */
  /* If program operation was failed, a Flash error code or the information
      about the semaphore monitoring flash being taken is returned */
  EE_Status ee_status = FI_WriteDoubleWord(activepageaddress+uwAddressNextWrite, EE_ELEMENT_VALUE(VirtAddress,Data,crc), Write_type);
 800910e:	4b23      	ldr	r3, [pc, #140]	; (800919c <VerifyPagesFullWriteVariable+0x118>)
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	18d0      	adds	r0, r2, r3
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	2200      	movs	r2, #0
 800911a:	60bb      	str	r3, [r7, #8]
 800911c:	60fa      	str	r2, [r7, #12]
 800911e:	f04f 0200 	mov.w	r2, #0
 8009122:	f04f 0300 	mov.w	r3, #0
 8009126:	68b9      	ldr	r1, [r7, #8]
 8009128:	000b      	movs	r3, r1
 800912a:	2200      	movs	r2, #0
 800912c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800912e:	0409      	lsls	r1, r1, #16
 8009130:	2600      	movs	r6, #0
 8009132:	468a      	mov	sl, r1
 8009134:	46b3      	mov	fp, r6
 8009136:	ea42 040a 	orr.w	r4, r2, sl
 800913a:	ea43 050b 	orr.w	r5, r3, fp
 800913e:	8afb      	ldrh	r3, [r7, #22]
 8009140:	2200      	movs	r2, #0
 8009142:	4698      	mov	r8, r3
 8009144:	4691      	mov	r9, r2
 8009146:	ea44 0308 	orr.w	r3, r4, r8
 800914a:	603b      	str	r3, [r7, #0]
 800914c:	ea45 0309 	orr.w	r3, r5, r9
 8009150:	607b      	str	r3, [r7, #4]
 8009152:	7d7b      	ldrb	r3, [r7, #21]
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	e9d7 2300 	ldrd	r2, r3, [r7]
 800915a:	f000 f985 	bl	8009468 <FI_WriteDoubleWord>
 800915e:	4603      	mov	r3, r0
 8009160:	837b      	strh	r3, [r7, #26]
  if (ee_status != EE_OK) return ee_status;  
 8009162:	8b7b      	ldrh	r3, [r7, #26]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d001      	beq.n	800916c <VerifyPagesFullWriteVariable+0xe8>
 8009168:	8b7b      	ldrh	r3, [r7, #26]
 800916a:	e00b      	b.n	8009184 <VerifyPagesFullWriteVariable+0x100>
    return EE_WRITE_ERROR;
  }
#endif

  /* Increment global variables relative to write operation done*/
  uwAddressNextWrite += EE_ELEMENT_SIZE;
 800916c:	4b0b      	ldr	r3, [pc, #44]	; (800919c <VerifyPagesFullWriteVariable+0x118>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	3308      	adds	r3, #8
 8009172:	4a0a      	ldr	r2, [pc, #40]	; (800919c <VerifyPagesFullWriteVariable+0x118>)
 8009174:	6013      	str	r3, [r2, #0]
  uhNbWrittenElements++;
 8009176:	4b06      	ldr	r3, [pc, #24]	; (8009190 <VerifyPagesFullWriteVariable+0x10c>)
 8009178:	881b      	ldrh	r3, [r3, #0]
 800917a:	3301      	adds	r3, #1
 800917c:	b29a      	uxth	r2, r3
 800917e:	4b04      	ldr	r3, [pc, #16]	; (8009190 <VerifyPagesFullWriteVariable+0x10c>)
 8009180:	801a      	strh	r2, [r3, #0]

  return EE_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	372c      	adds	r7, #44	; 0x2c
 8009188:	46bd      	mov	sp, r7
 800918a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800918e:	bf00      	nop
 8009190:	20000548 	.word	0x20000548
 8009194:	1fff75e0 	.word	0x1fff75e0
 8009198:	001ffc00 	.word	0x001ffc00
 800919c:	20000014 	.word	0x20000014

080091a0 <SetPageState>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
static EE_Status SetPageState(uint32_t Page, EE_State_type State)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b08a      	sub	sp, #40	; 0x28
 80091a4:	af02      	add	r7, sp, #8
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	460b      	mov	r3, r1
 80091aa:	70fb      	strb	r3, [r7, #3]
  uint32_t header1 = 0U, header2 = 0U, header3 = 0U, header4 = 0U;
 80091ac:	2300      	movs	r3, #0
 80091ae:	61fb      	str	r3, [r7, #28]
 80091b0:	2300      	movs	r3, #0
 80091b2:	61bb      	str	r3, [r7, #24]
 80091b4:	2300      	movs	r3, #0
 80091b6:	617b      	str	r3, [r7, #20]
 80091b8:	2300      	movs	r3, #0
 80091ba:	613b      	str	r3, [r7, #16]

  header1 = PAGE_ADDRESS(Page);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80091c2:	031a      	lsls	r2, r3, #12
 80091c4:	4b5c      	ldr	r3, [pc, #368]	; (8009338 <SetPageState+0x198>)
 80091c6:	881b      	ldrh	r3, [r3, #0]
 80091c8:	0299      	lsls	r1, r3, #10
 80091ca:	4b5c      	ldr	r3, [pc, #368]	; (800933c <SetPageState+0x19c>)
 80091cc:	400b      	ands	r3, r1
 80091ce:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80091d2:	fbb1 f1f3 	udiv	r1, r1, r3
 80091d6:	4b58      	ldr	r3, [pc, #352]	; (8009338 <SetPageState+0x198>)
 80091d8:	881b      	ldrh	r3, [r3, #0]
 80091da:	0298      	lsls	r0, r3, #10
 80091dc:	4b57      	ldr	r3, [pc, #348]	; (800933c <SetPageState+0x19c>)
 80091de:	4003      	ands	r3, r0
 80091e0:	fb01 f303 	mul.w	r3, r1, r3
 80091e4:	4413      	add	r3, r2
 80091e6:	61fb      	str	r3, [r7, #28]
  header2 = PAGE_ADDRESS(Page) + EE_ELEMENT_SIZE;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80091ee:	031a      	lsls	r2, r3, #12
 80091f0:	4b51      	ldr	r3, [pc, #324]	; (8009338 <SetPageState+0x198>)
 80091f2:	881b      	ldrh	r3, [r3, #0]
 80091f4:	0299      	lsls	r1, r3, #10
 80091f6:	4b51      	ldr	r3, [pc, #324]	; (800933c <SetPageState+0x19c>)
 80091f8:	400b      	ands	r3, r1
 80091fa:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80091fe:	fbb1 f1f3 	udiv	r1, r1, r3
 8009202:	4b4d      	ldr	r3, [pc, #308]	; (8009338 <SetPageState+0x198>)
 8009204:	881b      	ldrh	r3, [r3, #0]
 8009206:	0298      	lsls	r0, r3, #10
 8009208:	4b4c      	ldr	r3, [pc, #304]	; (800933c <SetPageState+0x19c>)
 800920a:	4003      	ands	r3, r0
 800920c:	fb01 f303 	mul.w	r3, r1, r3
 8009210:	4413      	add	r3, r2
 8009212:	3308      	adds	r3, #8
 8009214:	61bb      	str	r3, [r7, #24]
  header3 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*2U);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800921c:	031a      	lsls	r2, r3, #12
 800921e:	4b46      	ldr	r3, [pc, #280]	; (8009338 <SetPageState+0x198>)
 8009220:	881b      	ldrh	r3, [r3, #0]
 8009222:	0299      	lsls	r1, r3, #10
 8009224:	4b45      	ldr	r3, [pc, #276]	; (800933c <SetPageState+0x19c>)
 8009226:	400b      	ands	r3, r1
 8009228:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800922c:	fbb1 f1f3 	udiv	r1, r1, r3
 8009230:	4b41      	ldr	r3, [pc, #260]	; (8009338 <SetPageState+0x198>)
 8009232:	881b      	ldrh	r3, [r3, #0]
 8009234:	0298      	lsls	r0, r3, #10
 8009236:	4b41      	ldr	r3, [pc, #260]	; (800933c <SetPageState+0x19c>)
 8009238:	4003      	ands	r3, r0
 800923a:	fb01 f303 	mul.w	r3, r1, r3
 800923e:	4413      	add	r3, r2
 8009240:	3310      	adds	r3, #16
 8009242:	617b      	str	r3, [r7, #20]
  header4 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*3U);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800924a:	031a      	lsls	r2, r3, #12
 800924c:	4b3a      	ldr	r3, [pc, #232]	; (8009338 <SetPageState+0x198>)
 800924e:	881b      	ldrh	r3, [r3, #0]
 8009250:	0299      	lsls	r1, r3, #10
 8009252:	4b3a      	ldr	r3, [pc, #232]	; (800933c <SetPageState+0x19c>)
 8009254:	400b      	ands	r3, r1
 8009256:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800925a:	fbb1 f1f3 	udiv	r1, r1, r3
 800925e:	4b36      	ldr	r3, [pc, #216]	; (8009338 <SetPageState+0x198>)
 8009260:	881b      	ldrh	r3, [r3, #0]
 8009262:	0298      	lsls	r0, r3, #10
 8009264:	4b35      	ldr	r3, [pc, #212]	; (800933c <SetPageState+0x19c>)
 8009266:	4003      	ands	r3, r0
 8009268:	fb01 f303 	mul.w	r3, r1, r3
 800926c:	4413      	add	r3, r2
 800926e:	3318      	adds	r3, #24
 8009270:	613b      	str	r3, [r7, #16]

#if defined (DUALCORE_FLASH_SHARING)
  EE_Status ee_status;
  switch(State)
 8009272:	78fb      	ldrb	r3, [r7, #3]
 8009274:	3b01      	subs	r3, #1
 8009276:	2b03      	cmp	r3, #3
 8009278:	d854      	bhi.n	8009324 <SetPageState+0x184>
 800927a:	a201      	add	r2, pc, #4	; (adr r2, 8009280 <SetPageState+0xe0>)
 800927c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009280:	08009291 	.word	0x08009291
 8009284:	080092bb 	.word	0x080092bb
 8009288:	080092e5 	.word	0x080092e5
 800928c:	08009305 	.word	0x08009305
  {
  case STATE_PAGE_RECEIVE:
    {
      /* Set new Page status to STATE_PAGE_RECEIVE status */
      ee_status = FI_WriteDoubleWord(header1, EE_PAGESTAT_RECEIVE, EE_SET_PAGE);
 8009290:	2302      	movs	r3, #2
 8009292:	9300      	str	r3, [sp, #0]
 8009294:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8009298:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 800929c:	69f8      	ldr	r0, [r7, #28]
 800929e:	f000 f8e3 	bl	8009468 <FI_WriteDoubleWord>
 80092a2:	4603      	mov	r3, r0
 80092a4:	81fb      	strh	r3, [r7, #14]
      if (ee_status != EE_OK) return ee_status;
 80092a6:	89fb      	ldrh	r3, [r7, #14]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d001      	beq.n	80092b0 <SetPageState+0x110>
 80092ac:	89fb      	ldrh	r3, [r7, #14]
 80092ae:	e03f      	b.n	8009330 <SetPageState+0x190>
      ubCurrentActivePage = Page;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	b2da      	uxtb	r2, r3
 80092b4:	4b22      	ldr	r3, [pc, #136]	; (8009340 <SetPageState+0x1a0>)
 80092b6:	701a      	strb	r2, [r3, #0]
    }
    break;
 80092b8:	e039      	b.n	800932e <SetPageState+0x18e>
  case STATE_PAGE_ACTIVE:
    {
      /* Set new Page status to STATE_PAGE_ACTIVE status */
      ee_status = FI_WriteDoubleWord(header2, EE_PAGESTAT_ACTIVE, EE_SET_PAGE);
 80092ba:	2302      	movs	r3, #2
 80092bc:	9300      	str	r3, [sp, #0]
 80092be:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80092c2:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 80092c6:	69b8      	ldr	r0, [r7, #24]
 80092c8:	f000 f8ce 	bl	8009468 <FI_WriteDoubleWord>
 80092cc:	4603      	mov	r3, r0
 80092ce:	81fb      	strh	r3, [r7, #14]
      if (ee_status != EE_OK) return ee_status;
 80092d0:	89fb      	ldrh	r3, [r7, #14]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d001      	beq.n	80092da <SetPageState+0x13a>
 80092d6:	89fb      	ldrh	r3, [r7, #14]
 80092d8:	e02a      	b.n	8009330 <SetPageState+0x190>
      ubCurrentActivePage = Page;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	b2da      	uxtb	r2, r3
 80092de:	4b18      	ldr	r3, [pc, #96]	; (8009340 <SetPageState+0x1a0>)
 80092e0:	701a      	strb	r2, [r3, #0]
    }
    break;
 80092e2:	e024      	b.n	800932e <SetPageState+0x18e>
  case STATE_PAGE_VALID:
    {
      /* Set new Page status to STATE_PAGE_VALID status */
      ee_status = FI_WriteDoubleWord(header3, EE_PAGESTAT_VALID, EE_SET_PAGE);
 80092e4:	2302      	movs	r3, #2
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80092ec:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 80092f0:	6978      	ldr	r0, [r7, #20]
 80092f2:	f000 f8b9 	bl	8009468 <FI_WriteDoubleWord>
 80092f6:	4603      	mov	r3, r0
 80092f8:	81fb      	strh	r3, [r7, #14]
      if (ee_status != EE_OK) return ee_status;
 80092fa:	89fb      	ldrh	r3, [r7, #14]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d013      	beq.n	8009328 <SetPageState+0x188>
 8009300:	89fb      	ldrh	r3, [r7, #14]
 8009302:	e015      	b.n	8009330 <SetPageState+0x190>
    }
    break;
  case STATE_PAGE_ERASING:
    {
      /* Set new Page status to STATE_PAGE_ERASING status */
      ee_status = FI_WriteDoubleWord(header4, EE_PAGESTAT_ERASING, EE_SET_PAGE);
 8009304:	2302      	movs	r3, #2
 8009306:	9300      	str	r3, [sp, #0]
 8009308:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800930c:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 8009310:	6938      	ldr	r0, [r7, #16]
 8009312:	f000 f8a9 	bl	8009468 <FI_WriteDoubleWord>
 8009316:	4603      	mov	r3, r0
 8009318:	81fb      	strh	r3, [r7, #14]
      if (ee_status != EE_OK) return ee_status;
 800931a:	89fb      	ldrh	r3, [r7, #14]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d005      	beq.n	800932c <SetPageState+0x18c>
 8009320:	89fb      	ldrh	r3, [r7, #14]
 8009322:	e005      	b.n	8009330 <SetPageState+0x190>
    }
    break;
  default:
    break;
 8009324:	bf00      	nop
 8009326:	e002      	b.n	800932e <SetPageState+0x18e>
    break;
 8009328:	bf00      	nop
 800932a:	e000      	b.n	800932e <SetPageState+0x18e>
    break;
 800932c:	bf00      	nop
    break;
  }
#endif

  /* Return last operation flash status */
  return EE_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3720      	adds	r7, #32
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	1fff75e0 	.word	0x1fff75e0
 800933c:	001ffc00 	.word	0x001ffc00
 8009340:	2000054a 	.word	0x2000054a

08009344 <GetPageState>:
  * @param  Address Address of the FLASH Memory page
  * @retval State State of the page
  */
#ifndef FLASH_LINES_128B
static EE_State_type GetPageState(uint32_t Address)
{
 8009344:	b480      	push	{r7}
 8009346:	b08b      	sub	sp, #44	; 0x2c
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  EE_ELEMENT_TYPE status1 = 0U, status2 = 0U, status3 = 0U, status4 = 0U;
 800934c:	f04f 0200 	mov.w	r2, #0
 8009350:	f04f 0300 	mov.w	r3, #0
 8009354:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8009358:	f04f 0200 	mov.w	r2, #0
 800935c:	f04f 0300 	mov.w	r3, #0
 8009360:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8009364:	f04f 0200 	mov.w	r2, #0
 8009368:	f04f 0300 	mov.w	r3, #0
 800936c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8009370:	f04f 0200 	mov.w	r2, #0
 8009374:	f04f 0300 	mov.w	r3, #0
 8009378:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Get page state information from page header (3 first elements) */
  status1 = (*(__IO EE_ELEMENT_TYPE*)Address);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009382:	e9c7 2308 	strd	r2, r3, [r7, #32]
  status2 = (*(__IO EE_ELEMENT_TYPE*)(Address + EE_ELEMENT_SIZE));
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	3308      	adds	r3, #8
 800938a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938e:	e9c7 2306 	strd	r2, r3, [r7, #24]
  status3 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*2U)));
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	3310      	adds	r3, #16
 8009396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  status4 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*3U)));
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	3318      	adds	r3, #24
 80093a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a6:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Return erasing status, if element4 is not EE_PAGESTAT_ERASED value */
  if (status4 != EE_PAGESTAT_ERASED)
 80093aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80093ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093b2:	bf08      	it	eq
 80093b4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80093b8:	d001      	beq.n	80093be <GetPageState+0x7a>
  {
    return STATE_PAGE_ERASING;
 80093ba:	2304      	movs	r3, #4
 80093bc:	e01e      	b.n	80093fc <GetPageState+0xb8>
  }

  /* Return valid status, if element3 is not EE_PAGESTAT_ERASED value */
  if (status3 != EE_PAGESTAT_ERASED)
 80093be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80093c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093c6:	bf08      	it	eq
 80093c8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80093cc:	d001      	beq.n	80093d2 <GetPageState+0x8e>
  {
    return STATE_PAGE_VALID;
 80093ce:	2303      	movs	r3, #3
 80093d0:	e014      	b.n	80093fc <GetPageState+0xb8>
  }

  /* Return active status, if element2 is not EE_PAGESTAT_ERASED value */
  if (status2 != EE_PAGESTAT_ERASED)
 80093d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093da:	bf08      	it	eq
 80093dc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80093e0:	d001      	beq.n	80093e6 <GetPageState+0xa2>
  {
    return STATE_PAGE_ACTIVE;
 80093e2:	2302      	movs	r3, #2
 80093e4:	e00a      	b.n	80093fc <GetPageState+0xb8>
  }

  /* Return receive status, if element1 is not EE_PAGESTAT_ERASED value */
  if (status1 != EE_PAGESTAT_ERASED)
 80093e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80093ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ee:	bf08      	it	eq
 80093f0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80093f4:	d001      	beq.n	80093fa <GetPageState+0xb6>
  {
    return STATE_PAGE_RECEIVE;
 80093f6:	2301      	movs	r3, #1
 80093f8:	e000      	b.n	80093fc <GetPageState+0xb8>
  }

  /* Return erased status, if 4 first elements are EE_PAGESTAT_ERASED value */
  return STATE_PAGE_ERASED;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	372c      	adds	r7, #44	; 0x2c
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <ConfigureCrc>:
  *         commented examples - setting is default configuration from reset.
  * @param  None
  * @retval None
  */
void ConfigureCrc(void)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	af00      	add	r7, sp, #0
  /* (1) Enable peripheral clock for CRC */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 800940c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009410:	f7fe fa80 	bl	8007914 <LL_AHB1_GRP1_EnableClock>

  /* (2) Configure CRC functional parameters */

  /* Configure CRC calculation unit with user defined polynomial */
  LL_CRC_SetPolynomialCoef(CRC, CRC_POLYNOMIAL_VALUE);
 8009414:	f248 0105 	movw	r1, #32773	; 0x8005
 8009418:	4804      	ldr	r0, [pc, #16]	; (800942c <ConfigureCrc+0x24>)
 800941a:	f7fe fab7 	bl	800798c <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, CRC_POLYNOMIAL_LENGTH);
 800941e:	2108      	movs	r1, #8
 8009420:	4802      	ldr	r0, [pc, #8]	; (800942c <ConfigureCrc+0x24>)
 8009422:	f7fe faa0 	bl	8007966 <LL_CRC_SetPolynomialSize>
  /* LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE); */

  /* Set output data inversion mode : No inversion */
  /* Reset value is LL_CRC_OUTDATA_REVERSE_NONE */
  /* LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE); */
}
 8009426:	bf00      	nop
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	40023000 	.word	0x40023000

08009430 <CalculateCrc>:
#ifndef FLASH_LINES_128B
uint16_t CalculateCrc(EE_DATA_TYPE Data, uint16_t VirtAddress)
#else
uint16_t CalculateCrc(EE_DATA_TYPE Data1, EE_DATA_TYPE Data2)
#endif
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b082      	sub	sp, #8
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	460b      	mov	r3, r1
 800943a:	807b      	strh	r3, [r7, #2]
  /* Reset CRC calculation unit */
  LL_CRC_ResetCRCCalculationUnit(CRC);
 800943c:	4809      	ldr	r0, [pc, #36]	; (8009464 <CalculateCrc+0x34>)
 800943e:	f7fe fa82 	bl	8007946 <LL_CRC_ResetCRCCalculationUnit>

  /* Feed Data and Virtual Address */
#ifndef FLASH_LINES_128B
  LL_CRC_FeedData32(CRC, Data);
 8009442:	6879      	ldr	r1, [r7, #4]
 8009444:	4807      	ldr	r0, [pc, #28]	; (8009464 <CalculateCrc+0x34>)
 8009446:	f7fe faaf 	bl	80079a8 <LL_CRC_FeedData32>
  LL_CRC_FeedData16(CRC, VirtAddress);
 800944a:	887b      	ldrh	r3, [r7, #2]
 800944c:	4619      	mov	r1, r3
 800944e:	4805      	ldr	r0, [pc, #20]	; (8009464 <CalculateCrc+0x34>)
 8009450:	f7fe fab8 	bl	80079c4 <LL_CRC_FeedData16>
  LL_CRC_FeedData16(CRC, ((uint16_t)Data2));
   
#endif

  /* Return computed CRC value */
  return(LL_CRC_ReadData16(CRC));
 8009454:	4803      	ldr	r0, [pc, #12]	; (8009464 <CalculateCrc+0x34>)
 8009456:	f7fe fac6 	bl	80079e6 <LL_CRC_ReadData16>
 800945a:	4603      	mov	r3, r0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	40023000 	.word	0x40023000

08009468 <FI_WriteDoubleWord>:
  *           - EE_OK: on success
  *           - EE_WRITE_ERROR: if an error occurs
  *           - EE_FLASH_USED: flash currently used by CPU2
  */
EE_Status FI_WriteDoubleWord(uint32_t Address, uint64_t Data, EE_Write_type Write_type)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b088      	sub	sp, #32
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	e9c7 2300 	strd	r2, r3, [r7]
  EE_Status ee_status = EE_OK;
 8009474:	2300      	movs	r3, #0
 8009476:	83fb      	strh	r3, [r7, #30]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009478:	f3ef 8310 	mrs	r3, PRIMASK
 800947c:	617b      	str	r3, [r7, #20]
  return(result);
 800947e:	697b      	ldr	r3, [r7, #20]
  
  /* We enter a critical section */
  UTILS_ENTER_CRITICAL_SECTION();
 8009480:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8009482:	b672      	cpsid	i
}
 8009484:	bf00      	nop
  
  /* When the ongoing writing operation is a direct one (no transfer is required,
      we are not in init process, and we do not write the state of a page) */
  if(Write_type == EE_SIMPLE_WRITE)
 8009486:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800948a:	2b01      	cmp	r3, #1
 800948c:	d131      	bne.n	80094f2 <FI_WriteDoubleWord+0x8a>
  {
    /* Wait for the semaphore to be free */
    while( HAL_HSEM_IsSemTaken(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID) );
 800948e:	bf00      	nop
 8009490:	2007      	movs	r0, #7
 8009492:	f7fa fe73 	bl	800417c <HAL_HSEM_IsSemTaken>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d1f9      	bne.n	8009490 <FI_WriteDoubleWord+0x28>
    
    /*  Take the HW 7 semaphore */    
    if(HAL_HSEM_Take(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID, HSEM_PROCESS_1) == HAL_OK)
 800949c:	210c      	movs	r1, #12
 800949e:	2007      	movs	r0, #7
 80094a0:	f7fa fe48 	bl	8004134 <HAL_HSEM_Take>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d115      	bne.n	80094d6 <FI_WriteDoubleWord+0x6e>
    {  
      if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data) != HAL_OK)
 80094aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094ae:	68f9      	ldr	r1, [r7, #12]
 80094b0:	2001      	movs	r0, #1
 80094b2:	f7fa fb6d 	bl	8003b90 <HAL_FLASH_Program>
 80094b6:	4603      	mov	r3, r0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d005      	beq.n	80094c8 <FI_WriteDoubleWord+0x60>
      {
        HAL_HSEM_Release(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID, HSEM_PROCESS_1);
 80094bc:	210c      	movs	r1, #12
 80094be:	2007      	movs	r0, #7
 80094c0:	f7fa fe72 	bl	80041a8 <HAL_HSEM_Release>
        ee_status = EE_WRITE_ERROR;
 80094c4:	2302      	movs	r3, #2
 80094c6:	83fb      	strh	r3, [r7, #30]
      }    
      /* Release the HW Semaphore */  
      HAL_HSEM_Release(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID, HSEM_PROCESS_1);
 80094c8:	210c      	movs	r1, #12
 80094ca:	2007      	movs	r0, #7
 80094cc:	f7fa fe6c 	bl	80041a8 <HAL_HSEM_Release>
      ee_status =  EE_OK;
 80094d0:	2300      	movs	r3, #0
 80094d2:	83fb      	strh	r3, [r7, #30]
 80094d4:	e029      	b.n	800952a <FI_WriteDoubleWord+0xc2>
    }
    else
    {    
      /* If flash is used by CPU2, the semaphore release interrupt is activated so as to raise a notification when
          the semaphore will be unlocked (user can do other operations while waiting) */
      HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID));
 80094d6:	2080      	movs	r0, #128	; 0x80
 80094d8:	f7fa fe7a 	bl	80041d0 <HAL_HSEM_ActivateNotification>
      ee_status =  EE_FLASH_USED;
 80094dc:	f240 1301 	movw	r3, #257	; 0x101
 80094e0:	83fb      	strh	r3, [r7, #30]
 80094e2:	e022      	b.n	800952a <FI_WriteDoubleWord+0xc2>
  else 
  {    
    /* Wait for the semaphore 7 to be free and take it when it is */
    while(HAL_HSEM_Take(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID, HSEM_PROCESS_1) != HAL_OK)
    {
      while( HAL_HSEM_IsSemTaken(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID) ) ;
 80094e4:	bf00      	nop
 80094e6:	2007      	movs	r0, #7
 80094e8:	f7fa fe48 	bl	800417c <HAL_HSEM_IsSemTaken>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1f9      	bne.n	80094e6 <FI_WriteDoubleWord+0x7e>
    while(HAL_HSEM_Take(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID, HSEM_PROCESS_1) != HAL_OK)
 80094f2:	210c      	movs	r1, #12
 80094f4:	2007      	movs	r0, #7
 80094f6:	f7fa fe1d 	bl	8004134 <HAL_HSEM_Take>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1f1      	bne.n	80094e4 <FI_WriteDoubleWord+0x7c>
    }

    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data) != HAL_OK)
 8009500:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009504:	68f9      	ldr	r1, [r7, #12]
 8009506:	2001      	movs	r0, #1
 8009508:	f7fa fb42 	bl	8003b90 <HAL_FLASH_Program>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d005      	beq.n	800951e <FI_WriteDoubleWord+0xb6>
    {
      HAL_HSEM_Release(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID, HSEM_PROCESS_1);
 8009512:	210c      	movs	r1, #12
 8009514:	2007      	movs	r0, #7
 8009516:	f7fa fe47 	bl	80041a8 <HAL_HSEM_Release>
      ee_status = EE_WRITE_ERROR;
 800951a:	2302      	movs	r3, #2
 800951c:	83fb      	strh	r3, [r7, #30]
    }    
    /* Release the HW Semaphore */  
    HAL_HSEM_Release(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID, HSEM_PROCESS_1);
 800951e:	210c      	movs	r1, #12
 8009520:	2007      	movs	r0, #7
 8009522:	f7fa fe41 	bl	80041a8 <HAL_HSEM_Release>
    ee_status =  EE_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	83fb      	strh	r3, [r7, #30]
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	f383 8810 	msr	PRIMASK, r3
}
 8009534:	bf00      	nop
  }
  
  /* We exit the critical section */
  UTILS_EXIT_CRITICAL_SECTION();
  return ee_status;
 8009536:	8bfb      	ldrh	r3, [r7, #30]
}
 8009538:	4618      	mov	r0, r3
 800953a:	3720      	adds	r7, #32
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <FI_PageErase>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_PageErase(uint32_t Page, uint16_t NbPages)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b088      	sub	sp, #32
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	460b      	mov	r3, r1
 800954a:	807b      	strh	r3, [r7, #2]
  EE_Status status = EE_OK;
 800954c:	2300      	movs	r3, #0
 800954e:	837b      	strh	r3, [r7, #26]
  
#ifdef DUALCORE_FLASH_SHARING
    
  /* Wait for last operation to be completed */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) ;
 8009550:	bf00      	nop
 8009552:	4b44      	ldr	r3, [pc, #272]	; (8009664 <FI_PageErase+0x124>)
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800955a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800955e:	d0f8      	beq.n	8009552 <FI_PageErase+0x12>
  
  /* Because we want to share flash between CPU1 and 2, we erase each page individually
  * and we take then release the associated semaphore for each page erasings.
  * By doing this, we allow CPU2 to do urgent works between page erasings. */
  for (uint32_t index = Page; index < (Page + NbPages); index++)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	61fb      	str	r3, [r7, #28]
 8009564:	e02d      	b.n	80095c2 <FI_PageErase+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009566:	f3ef 8310 	mrs	r3, PRIMASK
 800956a:	613b      	str	r3, [r7, #16]
  return(result);
 800956c:	693b      	ldr	r3, [r7, #16]
  {
    /* We enter a critical section */
    UTILS_ENTER_CRITICAL_SECTION();
 800956e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009570:	b672      	cpsid	i
}
 8009572:	bf00      	nop
    
    /* Wait for the semaphore 7 to be free and take it when it is */
    while(HAL_HSEM_Take(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID, HSEM_PROCESS_1) != HAL_OK)
 8009574:	e006      	b.n	8009584 <FI_PageErase+0x44>
    {
      while( HAL_HSEM_IsSemTaken(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID) ) ;
 8009576:	bf00      	nop
 8009578:	2007      	movs	r0, #7
 800957a:	f7fa fdff 	bl	800417c <HAL_HSEM_IsSemTaken>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1f9      	bne.n	8009578 <FI_PageErase+0x38>
    while(HAL_HSEM_Take(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID, HSEM_PROCESS_1) != HAL_OK)
 8009584:	210c      	movs	r1, #12
 8009586:	2007      	movs	r0, #7
 8009588:	f7fa fdd4 	bl	8004134 <HAL_HSEM_Take>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1f1      	bne.n	8009576 <FI_PageErase+0x36>
    }
   
    /* Start erase page */
    FLASH_PageErase(index);
 8009592:	69f8      	ldr	r0, [r7, #28]
 8009594:	f7fa fc12 	bl	8003dbc <FLASH_PageErase>
    /* Release the HW Semaphore */  
    HAL_HSEM_Release(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID, HSEM_PROCESS_1); 
 8009598:	210c      	movs	r1, #12
 800959a:	2007      	movs	r0, #7
 800959c:	f7fa fe04 	bl	80041a8 <HAL_HSEM_Release>
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f383 8810 	msr	PRIMASK, r3
}
 80095aa:	bf00      	nop
    /* We exit the critical section */
    UTILS_EXIT_CRITICAL_SECTION();
    
    /* Wait for last operation to be completed */
    while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) ;
 80095ac:	bf00      	nop
 80095ae:	4b2d      	ldr	r3, [pc, #180]	; (8009664 <FI_PageErase+0x124>)
 80095b0:	691b      	ldr	r3, [r3, #16]
 80095b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095ba:	d0f8      	beq.n	80095ae <FI_PageErase+0x6e>
  for (uint32_t index = Page; index < (Page + NbPages); index++)
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	3301      	adds	r3, #1
 80095c0:	61fb      	str	r3, [r7, #28]
 80095c2:	887a      	ldrh	r2, [r7, #2]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4413      	add	r3, r2
 80095c8:	69fa      	ldr	r2, [r7, #28]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d3cb      	bcc.n	8009566 <FI_PageErase+0x26>
  }
    
  /* If operation is completed or interrupted, disable the Page Erase Bit */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80095ce:	4b25      	ldr	r3, [pc, #148]	; (8009664 <FI_PageErase+0x124>)
 80095d0:	695b      	ldr	r3, [r3, #20]
 80095d2:	4a24      	ldr	r2, [pc, #144]	; (8009664 <FI_PageErase+0x124>)
 80095d4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80095d8:	f023 0302 	bic.w	r3, r3, #2
 80095dc:	6153      	str	r3, [r2, #20]
  
  /* Flush the caches to be sure of the data consistency */
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 80095de:	4b21      	ldr	r3, [pc, #132]	; (8009664 <FI_PageErase+0x124>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095ea:	d117      	bne.n	800961c <FI_PageErase+0xdc>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80095ec:	4b1d      	ldr	r3, [pc, #116]	; (8009664 <FI_PageErase+0x124>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a1c      	ldr	r2, [pc, #112]	; (8009664 <FI_PageErase+0x124>)
 80095f2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095f6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80095f8:	4b1a      	ldr	r3, [pc, #104]	; (8009664 <FI_PageErase+0x124>)
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a19      	ldr	r2, [pc, #100]	; (8009664 <FI_PageErase+0x124>)
 80095fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009602:	6013      	str	r3, [r2, #0]
 8009604:	4b17      	ldr	r3, [pc, #92]	; (8009664 <FI_PageErase+0x124>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a16      	ldr	r2, [pc, #88]	; (8009664 <FI_PageErase+0x124>)
 800960a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800960e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009610:	4b14      	ldr	r3, [pc, #80]	; (8009664 <FI_PageErase+0x124>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a13      	ldr	r2, [pc, #76]	; (8009664 <FI_PageErase+0x124>)
 8009616:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800961a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 800961c:	4b11      	ldr	r3, [pc, #68]	; (8009664 <FI_PageErase+0x124>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009628:	d117      	bne.n	800965a <FI_PageErase+0x11a>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800962a:	4b0e      	ldr	r3, [pc, #56]	; (8009664 <FI_PageErase+0x124>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a0d      	ldr	r2, [pc, #52]	; (8009664 <FI_PageErase+0x124>)
 8009630:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009634:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8009636:	4b0b      	ldr	r3, [pc, #44]	; (8009664 <FI_PageErase+0x124>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a0a      	ldr	r2, [pc, #40]	; (8009664 <FI_PageErase+0x124>)
 800963c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009640:	6013      	str	r3, [r2, #0]
 8009642:	4b08      	ldr	r3, [pc, #32]	; (8009664 <FI_PageErase+0x124>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a07      	ldr	r2, [pc, #28]	; (8009664 <FI_PageErase+0x124>)
 8009648:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800964c:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800964e:	4b05      	ldr	r3, [pc, #20]	; (8009664 <FI_PageErase+0x124>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a04      	ldr	r2, [pc, #16]	; (8009664 <FI_PageErase+0x124>)
 8009654:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009658:	6013      	str	r3, [r2, #0]
  if (HAL_FLASHEx_Erase(&s_eraseinit, &page_error) != HAL_OK)
  {
    status = EE_ERASE_ERROR;
  }
#endif
  return status;
 800965a:	8b7b      	ldrh	r3, [r7, #26]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3720      	adds	r7, #32
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	58004000 	.word	0x58004000

08009668 <FI_CacheFlush>:

/**
  * @brief  Flush the caches if needed to keep coherency when the flash content is modified
  */
void FI_CacheFlush()
{
 8009668:	b480      	push	{r7}
 800966a:	af00      	add	r7, sp, #0
  /* To keep its coherency, flush the D-Cache: its content is not updated after a flash erase. */
  __HAL_FLASH_DATA_CACHE_DISABLE();
 800966c:	4b0e      	ldr	r3, [pc, #56]	; (80096a8 <FI_CacheFlush+0x40>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a0d      	ldr	r2, [pc, #52]	; (80096a8 <FI_CacheFlush+0x40>)
 8009672:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009676:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_RESET();
 8009678:	4b0b      	ldr	r3, [pc, #44]	; (80096a8 <FI_CacheFlush+0x40>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a0a      	ldr	r2, [pc, #40]	; (80096a8 <FI_CacheFlush+0x40>)
 800967e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009682:	6013      	str	r3, [r2, #0]
 8009684:	4b08      	ldr	r3, [pc, #32]	; (80096a8 <FI_CacheFlush+0x40>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a07      	ldr	r2, [pc, #28]	; (80096a8 <FI_CacheFlush+0x40>)
 800968a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800968e:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009690:	4b05      	ldr	r3, [pc, #20]	; (80096a8 <FI_CacheFlush+0x40>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a04      	ldr	r2, [pc, #16]	; (80096a8 <FI_CacheFlush+0x40>)
 8009696:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800969a:	6013      	str	r3, [r2, #0]
}
 800969c:	bf00      	nop
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop
 80096a8:	58004000 	.word	0x58004000

080096ac <FI_CheckBankConfig>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_CheckBankConfig(void)
{
 80096ac:	b480      	push	{r7}
 80096ae:	af00      	add	r7, sp, #0
  }

  return status;
#else
  /* No feature 128-bits single bank, so always 64-bits dual bank */
  return EE_OK;
 80096b0:	2300      	movs	r3, #0
#endif
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b088      	sub	sp, #32
 80096c0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80096c2:	2300      	movs	r3, #0
 80096c4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80096c6:	f107 0308 	add.w	r3, r7, #8
 80096ca:	2218      	movs	r2, #24
 80096cc:	2100      	movs	r1, #0
 80096ce:	4618      	mov	r0, r3
 80096d0:	f001 f8d8 	bl	800a884 <Osal_MemSet>
  rq.ogf = 0x3f;
 80096d4:	233f      	movs	r3, #63	; 0x3f
 80096d6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80096d8:	2381      	movs	r3, #129	; 0x81
 80096da:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80096dc:	1dfb      	adds	r3, r7, #7
 80096de:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80096e0:	2301      	movs	r3, #1
 80096e2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80096e4:	f107 0308 	add.w	r3, r7, #8
 80096e8:	2100      	movs	r1, #0
 80096ea:	4618      	mov	r0, r3
 80096ec:	f001 fb86 	bl	800adfc <hci_send_req>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	da01      	bge.n	80096fa <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80096f6:	23ff      	movs	r3, #255	; 0xff
 80096f8:	e000      	b.n	80096fc <aci_gap_set_non_discoverable+0x40>
  return status;
 80096fa:	79fb      	ldrb	r3, [r7, #7]
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3720      	adds	r7, #32
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8009704:	b5b0      	push	{r4, r5, r7, lr}
 8009706:	b0ce      	sub	sp, #312	; 0x138
 8009708:	af00      	add	r7, sp, #0
 800970a:	4605      	mov	r5, r0
 800970c:	460c      	mov	r4, r1
 800970e:	4610      	mov	r0, r2
 8009710:	4619      	mov	r1, r3
 8009712:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009716:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800971a:	462a      	mov	r2, r5
 800971c:	701a      	strb	r2, [r3, #0]
 800971e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009722:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009726:	4622      	mov	r2, r4
 8009728:	801a      	strh	r2, [r3, #0]
 800972a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800972e:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8009732:	4602      	mov	r2, r0
 8009734:	801a      	strh	r2, [r3, #0]
 8009736:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800973a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800973e:	460a      	mov	r2, r1
 8009740:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8009742:	f107 0310 	add.w	r3, r7, #16
 8009746:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800974a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800974e:	3308      	adds	r3, #8
 8009750:	f107 0210 	add.w	r2, r7, #16
 8009754:	4413      	add	r3, r2
 8009756:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800975a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800975e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8009762:	4413      	add	r3, r2
 8009764:	3309      	adds	r3, #9
 8009766:	f107 0210 	add.w	r2, r7, #16
 800976a:	4413      	add	r3, r2
 800976c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009770:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009774:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009778:	2200      	movs	r2, #0
 800977a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800977c:	2300      	movs	r3, #0
 800977e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8009782:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009786:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800978a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800978e:	7812      	ldrb	r2, [r2, #0]
 8009790:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009792:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009796:	3301      	adds	r3, #1
 8009798:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800979c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80097a0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80097a4:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80097a8:	8812      	ldrh	r2, [r2, #0]
 80097aa:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80097ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097b2:	3302      	adds	r3, #2
 80097b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80097b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80097bc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80097c0:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80097c4:	8812      	ldrh	r2, [r2, #0]
 80097c6:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80097ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097ce:	3302      	adds	r3, #2
 80097d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80097d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80097d8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80097dc:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80097e0:	7812      	ldrb	r2, [r2, #0]
 80097e2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80097e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097e8:	3301      	adds	r3, #1
 80097ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80097ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80097f2:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80097f6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80097f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097fc:	3301      	adds	r3, #1
 80097fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8009802:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009806:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800980a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800980c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009810:	3301      	adds	r3, #1
 8009812:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8009816:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800981a:	3308      	adds	r3, #8
 800981c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009820:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8009824:	4618      	mov	r0, r3
 8009826:	f001 f81d 	bl	800a864 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800982a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800982e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009832:	4413      	add	r3, r2
 8009834:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8009838:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800983c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009840:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009842:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009846:	3301      	adds	r3, #1
 8009848:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800984c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009850:	3301      	adds	r3, #1
 8009852:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009856:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800985a:	4618      	mov	r0, r3
 800985c:	f001 f802 	bl	800a864 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8009860:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8009864:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009868:	4413      	add	r3, r2
 800986a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800986e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009872:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8009876:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009878:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800987c:	3302      	adds	r3, #2
 800987e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8009882:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009886:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800988a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800988c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009890:	3302      	adds	r3, #2
 8009892:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009896:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800989a:	2218      	movs	r2, #24
 800989c:	2100      	movs	r1, #0
 800989e:	4618      	mov	r0, r3
 80098a0:	f000 fff0 	bl	800a884 <Osal_MemSet>
  rq.ogf = 0x3f;
 80098a4:	233f      	movs	r3, #63	; 0x3f
 80098a6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 80098aa:	2383      	movs	r3, #131	; 0x83
 80098ac:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80098b0:	f107 0310 	add.w	r3, r7, #16
 80098b4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80098b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80098c0:	f107 030f 	add.w	r3, r7, #15
 80098c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80098c8:	2301      	movs	r3, #1
 80098ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80098ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80098d2:	2100      	movs	r1, #0
 80098d4:	4618      	mov	r0, r3
 80098d6:	f001 fa91 	bl	800adfc <hci_send_req>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	da01      	bge.n	80098e4 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80098e0:	23ff      	movs	r3, #255	; 0xff
 80098e2:	e004      	b.n	80098ee <aci_gap_set_discoverable+0x1ea>
  return status;
 80098e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80098e8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80098ec:	781b      	ldrb	r3, [r3, #0]
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bdb0      	pop	{r4, r5, r7, pc}

080098f8 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b0cc      	sub	sp, #304	; 0x130
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	4602      	mov	r2, r0
 8009900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009904:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009908:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800990a:	f107 0310 	add.w	r3, r7, #16
 800990e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009916:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800991a:	2200      	movs	r2, #0
 800991c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800991e:	2300      	movs	r3, #0
 8009920:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8009924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009928:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800992c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009930:	7812      	ldrb	r2, [r2, #0]
 8009932:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009934:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009938:	3301      	adds	r3, #1
 800993a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800993e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009942:	2218      	movs	r2, #24
 8009944:	2100      	movs	r1, #0
 8009946:	4618      	mov	r0, r3
 8009948:	f000 ff9c 	bl	800a884 <Osal_MemSet>
  rq.ogf = 0x3f;
 800994c:	233f      	movs	r3, #63	; 0x3f
 800994e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8009952:	2385      	movs	r3, #133	; 0x85
 8009954:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009958:	f107 0310 	add.w	r3, r7, #16
 800995c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009960:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009964:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009968:	f107 030f 	add.w	r3, r7, #15
 800996c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009970:	2301      	movs	r3, #1
 8009972:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009976:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800997a:	2100      	movs	r1, #0
 800997c:	4618      	mov	r0, r3
 800997e:	f001 fa3d 	bl	800adfc <hci_send_req>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	da01      	bge.n	800998c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8009988:	23ff      	movs	r3, #255	; 0xff
 800998a:	e004      	b.n	8009996 <aci_gap_set_io_capability+0x9e>
  return status;
 800998c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009990:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009994:	781b      	ldrb	r3, [r3, #0]
}
 8009996:	4618      	mov	r0, r3
 8009998:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80099a0:	b5b0      	push	{r4, r5, r7, lr}
 80099a2:	b0cc      	sub	sp, #304	; 0x130
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	4605      	mov	r5, r0
 80099a8:	460c      	mov	r4, r1
 80099aa:	4610      	mov	r0, r2
 80099ac:	4619      	mov	r1, r3
 80099ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099b2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80099b6:	462a      	mov	r2, r5
 80099b8:	701a      	strb	r2, [r3, #0]
 80099ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099be:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80099c2:	4622      	mov	r2, r4
 80099c4:	701a      	strb	r2, [r3, #0]
 80099c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099ca:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80099ce:	4602      	mov	r2, r0
 80099d0:	701a      	strb	r2, [r3, #0]
 80099d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80099da:	460a      	mov	r2, r1
 80099dc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80099de:	f107 0310 	add.w	r3, r7, #16
 80099e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80099e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099ea:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80099ee:	2200      	movs	r2, #0
 80099f0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80099f2:	2300      	movs	r3, #0
 80099f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80099f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a00:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009a04:	7812      	ldrb	r2, [r2, #0]
 8009a06:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009a08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8009a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a16:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a1a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009a1e:	7812      	ldrb	r2, [r2, #0]
 8009a20:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009a22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a26:	3301      	adds	r3, #1
 8009a28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8009a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a30:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a34:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009a38:	7812      	ldrb	r2, [r2, #0]
 8009a3a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009a3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a40:	3301      	adds	r3, #1
 8009a42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8009a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a4a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a4e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009a52:	7812      	ldrb	r2, [r2, #0]
 8009a54:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8009a56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8009a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a64:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8009a68:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009a6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a6e:	3301      	adds	r3, #1
 8009a70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8009a74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a78:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8009a7c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009a7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a82:	3301      	adds	r3, #1
 8009a84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8009a88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a8c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8009a90:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009a92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a96:	3301      	adds	r3, #1
 8009a98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8009a9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aa0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8009aa4:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8009aa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009aac:	3304      	adds	r3, #4
 8009aae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8009ab2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ab6:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009aba:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8009abc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ac6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009aca:	2218      	movs	r2, #24
 8009acc:	2100      	movs	r1, #0
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f000 fed8 	bl	800a884 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009ad4:	233f      	movs	r3, #63	; 0x3f
 8009ad6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8009ada:	2386      	movs	r3, #134	; 0x86
 8009adc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009ae0:	f107 0310 	add.w	r3, r7, #16
 8009ae4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009ae8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009aec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009af0:	f107 030f 	add.w	r3, r7, #15
 8009af4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009af8:	2301      	movs	r3, #1
 8009afa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009afe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009b02:	2100      	movs	r1, #0
 8009b04:	4618      	mov	r0, r3
 8009b06:	f001 f979 	bl	800adfc <hci_send_req>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	da01      	bge.n	8009b14 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8009b10:	23ff      	movs	r3, #255	; 0xff
 8009b12:	e004      	b.n	8009b1e <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8009b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b18:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009b1c:	781b      	ldrb	r3, [r3, #0]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bdb0      	pop	{r4, r5, r7, pc}

08009b28 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b0cc      	sub	sp, #304	; 0x130
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	4602      	mov	r2, r0
 8009b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b38:	6019      	str	r1, [r3, #0]
 8009b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b3e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009b42:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8009b44:	f107 0310 	add.w	r3, r7, #16
 8009b48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b50:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009b54:	2200      	movs	r2, #0
 8009b56:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b62:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009b66:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009b6a:	8812      	ldrh	r2, [r2, #0]
 8009b6c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009b6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b72:	3302      	adds	r3, #2
 8009b74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8009b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b7c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009b80:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8009b84:	6812      	ldr	r2, [r2, #0]
 8009b86:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8009b8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b8e:	3304      	adds	r3, #4
 8009b90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009b94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009b98:	2218      	movs	r2, #24
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f000 fe71 	bl	800a884 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009ba2:	233f      	movs	r3, #63	; 0x3f
 8009ba4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8009ba8:	2388      	movs	r3, #136	; 0x88
 8009baa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009bae:	f107 0310 	add.w	r3, r7, #16
 8009bb2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009bb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009bba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009bbe:	f107 030f 	add.w	r3, r7, #15
 8009bc2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009bcc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f001 f912 	bl	800adfc <hci_send_req>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	da01      	bge.n	8009be2 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8009bde:	23ff      	movs	r3, #255	; 0xff
 8009be0:	e004      	b.n	8009bec <aci_gap_pass_key_resp+0xc4>
  return status;
 8009be2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009be6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009bea:	781b      	ldrb	r3, [r3, #0]
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8009bf6:	b590      	push	{r4, r7, lr}
 8009bf8:	b0cd      	sub	sp, #308	; 0x134
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	4604      	mov	r4, r0
 8009bfe:	4608      	mov	r0, r1
 8009c00:	4611      	mov	r1, r2
 8009c02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009c06:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8009c0a:	6013      	str	r3, [r2, #0]
 8009c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c10:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009c14:	4622      	mov	r2, r4
 8009c16:	701a      	strb	r2, [r3, #0]
 8009c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c1c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009c20:	4602      	mov	r2, r0
 8009c22:	701a      	strb	r2, [r3, #0]
 8009c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c28:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009c2c:	460a      	mov	r2, r1
 8009c2e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8009c30:	f107 0310 	add.w	r3, r7, #16
 8009c34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009c38:	f107 0308 	add.w	r3, r7, #8
 8009c3c:	2207      	movs	r2, #7
 8009c3e:	2100      	movs	r1, #0
 8009c40:	4618      	mov	r0, r3
 8009c42:	f000 fe1f 	bl	800a884 <Osal_MemSet>
  int index_input = 0;
 8009c46:	2300      	movs	r3, #0
 8009c48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8009c4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c50:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009c54:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009c58:	7812      	ldrb	r2, [r2, #0]
 8009c5a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009c5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c60:	3301      	adds	r3, #1
 8009c62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8009c66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c6a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009c6e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009c72:	7812      	ldrb	r2, [r2, #0]
 8009c74:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009c76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8009c80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c84:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009c88:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009c8c:	7812      	ldrb	r2, [r2, #0]
 8009c8e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009c90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c94:	3301      	adds	r3, #1
 8009c96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009c9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009c9e:	2218      	movs	r2, #24
 8009ca0:	2100      	movs	r1, #0
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f000 fdee 	bl	800a884 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009ca8:	233f      	movs	r3, #63	; 0x3f
 8009caa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8009cae:	238a      	movs	r3, #138	; 0x8a
 8009cb0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009cb4:	f107 0310 	add.w	r3, r7, #16
 8009cb8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009cbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cc0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8009cc4:	f107 0308 	add.w	r3, r7, #8
 8009cc8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8009ccc:	2307      	movs	r3, #7
 8009cce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009cd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009cd6:	2100      	movs	r1, #0
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f001 f88f 	bl	800adfc <hci_send_req>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	da01      	bge.n	8009ce8 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8009ce4:	23ff      	movs	r3, #255	; 0xff
 8009ce6:	e02e      	b.n	8009d46 <aci_gap_init+0x150>
  if ( resp.Status )
 8009ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cec:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d005      	beq.n	8009d02 <aci_gap_init+0x10c>
    return resp.Status;
 8009cf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cfa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	e021      	b.n	8009d46 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8009d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009d0a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009d0e:	b29a      	uxth	r2, r3
 8009d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8009d1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d20:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009d24:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009d28:	b29a      	uxth	r2, r3
 8009d2a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009d2e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8009d30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d34:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009d38:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009d3c:	b29a      	uxth	r2, r3
 8009d3e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009d42:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd90      	pop	{r4, r7, pc}

08009d50 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b0cc      	sub	sp, #304	; 0x130
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	4602      	mov	r2, r0
 8009d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009d60:	6019      	str	r1, [r3, #0]
 8009d62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d66:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009d6a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8009d6c:	f107 0310 	add.w	r3, r7, #16
 8009d70:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d78:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009d80:	2300      	movs	r3, #0
 8009d82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8009d86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d8a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009d8e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009d92:	7812      	ldrb	r2, [r2, #0]
 8009d94:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009d96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8009da0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009da4:	1c58      	adds	r0, r3, #1
 8009da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009daa:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009dae:	781a      	ldrb	r2, [r3, #0]
 8009db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009db4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009db8:	6819      	ldr	r1, [r3, #0]
 8009dba:	f000 fd53 	bl	800a864 <Osal_MemCpy>
  index_input += AdvDataLen;
 8009dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dc2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009dcc:	4413      	add	r3, r2
 8009dce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009dd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009dd6:	2218      	movs	r2, #24
 8009dd8:	2100      	movs	r1, #0
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f000 fd52 	bl	800a884 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009de0:	233f      	movs	r3, #63	; 0x3f
 8009de2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8009de6:	238e      	movs	r3, #142	; 0x8e
 8009de8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009dec:	f107 0310 	add.w	r3, r7, #16
 8009df0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009df4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009df8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009dfc:	f107 030f 	add.w	r3, r7, #15
 8009e00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009e04:	2301      	movs	r3, #1
 8009e06:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009e0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009e0e:	2100      	movs	r1, #0
 8009e10:	4618      	mov	r0, r3
 8009e12:	f000 fff3 	bl	800adfc <hci_send_req>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	da01      	bge.n	8009e20 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8009e1c:	23ff      	movs	r3, #255	; 0xff
 8009e1e:	e004      	b.n	8009e2a <aci_gap_update_adv_data+0xda>
  return status;
 8009e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e24:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009e28:	781b      	ldrb	r3, [r3, #0]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b088      	sub	sp, #32
 8009e38:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009e3e:	f107 0308 	add.w	r3, r7, #8
 8009e42:	2218      	movs	r2, #24
 8009e44:	2100      	movs	r1, #0
 8009e46:	4618      	mov	r0, r3
 8009e48:	f000 fd1c 	bl	800a884 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009e4c:	233f      	movs	r3, #63	; 0x3f
 8009e4e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8009e50:	2392      	movs	r3, #146	; 0x92
 8009e52:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009e54:	1dfb      	adds	r3, r7, #7
 8009e56:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009e5c:	f107 0308 	add.w	r3, r7, #8
 8009e60:	2100      	movs	r1, #0
 8009e62:	4618      	mov	r0, r3
 8009e64:	f000 ffca 	bl	800adfc <hci_send_req>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	da01      	bge.n	8009e72 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009e6e:	23ff      	movs	r3, #255	; 0xff
 8009e70:	e000      	b.n	8009e74 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8009e72:	79fb      	ldrb	r3, [r7, #7]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3720      	adds	r7, #32
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b0cc      	sub	sp, #304	; 0x130
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	4602      	mov	r2, r0
 8009e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e88:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009e8c:	801a      	strh	r2, [r3, #0]
 8009e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e92:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009e96:	460a      	mov	r2, r1
 8009e98:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8009e9a:	f107 0310 	add.w	r3, r7, #16
 8009e9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ea6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009eaa:	2200      	movs	r2, #0
 8009eac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009eb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009eb8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ebc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009ec0:	8812      	ldrh	r2, [r2, #0]
 8009ec2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009ec4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ec8:	3302      	adds	r3, #2
 8009eca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8009ece:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ed2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ed6:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009eda:	7812      	ldrb	r2, [r2, #0]
 8009edc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009ede:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ee8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009eec:	2218      	movs	r2, #24
 8009eee:	2100      	movs	r1, #0
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f000 fcc7 	bl	800a884 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009ef6:	233f      	movs	r3, #63	; 0x3f
 8009ef8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8009efc:	23a5      	movs	r3, #165	; 0xa5
 8009efe:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009f02:	f107 0310 	add.w	r3, r7, #16
 8009f06:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009f0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f0e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009f12:	f107 030f 	add.w	r3, r7, #15
 8009f16:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009f20:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009f24:	2100      	movs	r1, #0
 8009f26:	4618      	mov	r0, r3
 8009f28:	f000 ff68 	bl	800adfc <hci_send_req>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	da01      	bge.n	8009f36 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8009f32:	23ff      	movs	r3, #255	; 0xff
 8009f34:	e004      	b.n	8009f40 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8009f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f3a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009f3e:	781b      	ldrb	r3, [r3, #0]
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}

08009f4a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8009f4a:	b580      	push	{r7, lr}
 8009f4c:	b088      	sub	sp, #32
 8009f4e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009f50:	2300      	movs	r3, #0
 8009f52:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009f54:	f107 0308 	add.w	r3, r7, #8
 8009f58:	2218      	movs	r2, #24
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f000 fc91 	bl	800a884 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009f62:	233f      	movs	r3, #63	; 0x3f
 8009f64:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009f66:	f240 1301 	movw	r3, #257	; 0x101
 8009f6a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009f6c:	1dfb      	adds	r3, r7, #7
 8009f6e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009f70:	2301      	movs	r3, #1
 8009f72:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009f74:	f107 0308 	add.w	r3, r7, #8
 8009f78:	2100      	movs	r1, #0
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f000 ff3e 	bl	800adfc <hci_send_req>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	da01      	bge.n	8009f8a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8009f86:	23ff      	movs	r3, #255	; 0xff
 8009f88:	e000      	b.n	8009f8c <aci_gatt_init+0x42>
  return status;
 8009f8a:	79fb      	ldrb	r3, [r7, #7]
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3720      	adds	r7, #32
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8009f94:	b590      	push	{r4, r7, lr}
 8009f96:	b0cf      	sub	sp, #316	; 0x13c
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8009fa0:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8009fa4:	6001      	str	r1, [r0, #0]
 8009fa6:	4610      	mov	r0, r2
 8009fa8:	4619      	mov	r1, r3
 8009faa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009fae:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009fb2:	4622      	mov	r2, r4
 8009fb4:	701a      	strb	r2, [r3, #0]
 8009fb6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009fba:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	701a      	strb	r2, [r3, #0]
 8009fc2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009fc6:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009fca:	460a      	mov	r2, r1
 8009fcc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8009fce:	f107 0310 	add.w	r3, r7, #16
 8009fd2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8009fd6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009fda:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009fde:	781b      	ldrb	r3, [r3, #0]
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d00a      	beq.n	8009ffa <aci_gatt_add_service+0x66>
 8009fe4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009fe8:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	d101      	bne.n	8009ff6 <aci_gatt_add_service+0x62>
 8009ff2:	2311      	movs	r3, #17
 8009ff4:	e002      	b.n	8009ffc <aci_gatt_add_service+0x68>
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e000      	b.n	8009ffc <aci_gatt_add_service+0x68>
 8009ffa:	2303      	movs	r3, #3
 8009ffc:	f107 0210 	add.w	r2, r7, #16
 800a000:	4413      	add	r3, r2
 800a002:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a006:	f107 030c 	add.w	r3, r7, #12
 800a00a:	2203      	movs	r2, #3
 800a00c:	2100      	movs	r1, #0
 800a00e:	4618      	mov	r0, r3
 800a010:	f000 fc38 	bl	800a884 <Osal_MemSet>
  int index_input = 0;
 800a014:	2300      	movs	r3, #0
 800a016:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800a01a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a01e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a022:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800a026:	7812      	ldrb	r2, [r2, #0]
 800a028:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a02a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a02e:	3301      	adds	r3, #1
 800a030:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800a034:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a038:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d002      	beq.n	800a048 <aci_gatt_add_service+0xb4>
 800a042:	2b02      	cmp	r3, #2
 800a044:	d004      	beq.n	800a050 <aci_gatt_add_service+0xbc>
 800a046:	e007      	b.n	800a058 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800a048:	2302      	movs	r3, #2
 800a04a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800a04e:	e005      	b.n	800a05c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800a050:	2310      	movs	r3, #16
 800a052:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800a056:	e001      	b.n	800a05c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800a058:	2397      	movs	r3, #151	; 0x97
 800a05a:	e06c      	b.n	800a136 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800a05c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a060:	1c58      	adds	r0, r3, #1
 800a062:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800a066:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a06a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a06e:	6819      	ldr	r1, [r3, #0]
 800a070:	f000 fbf8 	bl	800a864 <Osal_MemCpy>
    index_input += size;
 800a074:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800a078:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a07c:	4413      	add	r3, r2
 800a07e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800a082:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a086:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a08a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800a08e:	7812      	ldrb	r2, [r2, #0]
 800a090:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800a092:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a096:	3301      	adds	r3, #1
 800a098:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800a09c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0a0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a0a4:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800a0a8:	7812      	ldrb	r2, [r2, #0]
 800a0aa:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800a0ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a0b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a0ba:	2218      	movs	r2, #24
 800a0bc:	2100      	movs	r1, #0
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f000 fbe0 	bl	800a884 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a0c4:	233f      	movs	r3, #63	; 0x3f
 800a0c6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800a0ca:	f44f 7381 	mov.w	r3, #258	; 0x102
 800a0ce:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a0d2:	f107 0310 	add.w	r3, r7, #16
 800a0d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a0da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a0de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800a0e2:	f107 030c 	add.w	r3, r7, #12
 800a0e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800a0ea:	2303      	movs	r3, #3
 800a0ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a0f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f000 fe80 	bl	800adfc <hci_send_req>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	da01      	bge.n	800a106 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800a102:	23ff      	movs	r3, #255	; 0xff
 800a104:	e017      	b.n	800a136 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800a106:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a10a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d005      	beq.n	800a120 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800a114:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a118:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	e00a      	b.n	800a136 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800a120:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a124:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a128:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a12c:	b29a      	uxth	r2, r3
 800a12e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a132:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd90      	pop	{r4, r7, pc}

0800a140 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800a140:	b590      	push	{r4, r7, lr}
 800a142:	b0d1      	sub	sp, #324	; 0x144
 800a144:	af00      	add	r7, sp, #0
 800a146:	4604      	mov	r4, r0
 800a148:	4608      	mov	r0, r1
 800a14a:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800a14e:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800a152:	600a      	str	r2, [r1, #0]
 800a154:	4619      	mov	r1, r3
 800a156:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a15a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800a15e:	4622      	mov	r2, r4
 800a160:	801a      	strh	r2, [r3, #0]
 800a162:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a166:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800a16a:	4602      	mov	r2, r0
 800a16c:	701a      	strb	r2, [r3, #0]
 800a16e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a172:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800a176:	460a      	mov	r2, r1
 800a178:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800a17a:	f107 0318 	add.w	r3, r7, #24
 800a17e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800a182:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a186:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d00a      	beq.n	800a1a6 <aci_gatt_add_char+0x66>
 800a190:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a194:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	2b02      	cmp	r3, #2
 800a19c:	d101      	bne.n	800a1a2 <aci_gatt_add_char+0x62>
 800a19e:	2313      	movs	r3, #19
 800a1a0:	e002      	b.n	800a1a8 <aci_gatt_add_char+0x68>
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	e000      	b.n	800a1a8 <aci_gatt_add_char+0x68>
 800a1a6:	2305      	movs	r3, #5
 800a1a8:	f107 0218 	add.w	r2, r7, #24
 800a1ac:	4413      	add	r3, r2
 800a1ae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a1b2:	f107 0314 	add.w	r3, r7, #20
 800a1b6:	2203      	movs	r2, #3
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f000 fb62 	bl	800a884 <Osal_MemSet>
  int index_input = 0;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800a1c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a1ca:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a1ce:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800a1d2:	8812      	ldrh	r2, [r2, #0]
 800a1d4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a1d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a1da:	3302      	adds	r3, #2
 800a1dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800a1e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a1e4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a1e8:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800a1ec:	7812      	ldrb	r2, [r2, #0]
 800a1ee:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a1f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800a1fa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a1fe:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	2b01      	cmp	r3, #1
 800a206:	d002      	beq.n	800a20e <aci_gatt_add_char+0xce>
 800a208:	2b02      	cmp	r3, #2
 800a20a:	d004      	beq.n	800a216 <aci_gatt_add_char+0xd6>
 800a20c:	e007      	b.n	800a21e <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800a20e:	2302      	movs	r3, #2
 800a210:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800a214:	e005      	b.n	800a222 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800a216:	2310      	movs	r3, #16
 800a218:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800a21c:	e001      	b.n	800a222 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800a21e:	2397      	movs	r3, #151	; 0x97
 800a220:	e091      	b.n	800a346 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800a222:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a226:	1cd8      	adds	r0, r3, #3
 800a228:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800a22c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a230:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a234:	6819      	ldr	r1, [r3, #0]
 800a236:	f000 fb15 	bl	800a864 <Osal_MemCpy>
    index_input += size;
 800a23a:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800a23e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800a242:	4413      	add	r3, r2
 800a244:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800a248:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a24c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a250:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800a254:	8812      	ldrh	r2, [r2, #0]
 800a256:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800a258:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a25c:	3302      	adds	r3, #2
 800a25e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800a262:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a266:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800a26a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800a26c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a270:	3301      	adds	r3, #1
 800a272:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800a276:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a27a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800a27e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800a280:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a284:	3301      	adds	r3, #1
 800a286:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800a28a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a28e:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800a292:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800a294:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a298:	3301      	adds	r3, #1
 800a29a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800a29e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a2a2:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800a2a6:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800a2a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800a2b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a2b6:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800a2ba:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800a2bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a2c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a2ca:	2218      	movs	r2, #24
 800a2cc:	2100      	movs	r1, #0
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f000 fad8 	bl	800a884 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a2d4:	233f      	movs	r3, #63	; 0x3f
 800a2d6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800a2da:	f44f 7382 	mov.w	r3, #260	; 0x104
 800a2de:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800a2e2:	f107 0318 	add.w	r3, r7, #24
 800a2e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800a2ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a2ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800a2f2:	f107 0314 	add.w	r3, r7, #20
 800a2f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800a2fa:	2303      	movs	r3, #3
 800a2fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a300:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a304:	2100      	movs	r1, #0
 800a306:	4618      	mov	r0, r3
 800a308:	f000 fd78 	bl	800adfc <hci_send_req>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	da01      	bge.n	800a316 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800a312:	23ff      	movs	r3, #255	; 0xff
 800a314:	e017      	b.n	800a346 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800a316:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a31a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d005      	beq.n	800a330 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800a324:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a328:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	e00a      	b.n	800a346 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800a330:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a334:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a338:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a33c:	b29a      	uxth	r2, r3
 800a33e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800a342:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd90      	pop	{r4, r7, pc}

0800a350 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800a350:	b5b0      	push	{r4, r5, r7, lr}
 800a352:	b0cc      	sub	sp, #304	; 0x130
 800a354:	af00      	add	r7, sp, #0
 800a356:	4605      	mov	r5, r0
 800a358:	460c      	mov	r4, r1
 800a35a:	4610      	mov	r0, r2
 800a35c:	4619      	mov	r1, r3
 800a35e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a362:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a366:	462a      	mov	r2, r5
 800a368:	801a      	strh	r2, [r3, #0]
 800a36a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a36e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a372:	4622      	mov	r2, r4
 800a374:	801a      	strh	r2, [r3, #0]
 800a376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a37a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800a37e:	4602      	mov	r2, r0
 800a380:	701a      	strb	r2, [r3, #0]
 800a382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a386:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800a38a:	460a      	mov	r2, r1
 800a38c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800a38e:	f107 0310 	add.w	r3, r7, #16
 800a392:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a39a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a39e:	2200      	movs	r2, #0
 800a3a0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800a3a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3ac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a3b0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a3b4:	8812      	ldrh	r2, [r2, #0]
 800a3b6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a3b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a3bc:	3302      	adds	r3, #2
 800a3be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800a3c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a3ca:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a3ce:	8812      	ldrh	r2, [r2, #0]
 800a3d0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a3d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a3d6:	3302      	adds	r3, #2
 800a3d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800a3dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a3e4:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800a3e8:	7812      	ldrb	r2, [r2, #0]
 800a3ea:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a3ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800a3f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a3fe:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800a402:	7812      	ldrb	r2, [r2, #0]
 800a404:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a406:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a40a:	3301      	adds	r3, #1
 800a40c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800a410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a414:	1d98      	adds	r0, r3, #6
 800a416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a41a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	461a      	mov	r2, r3
 800a422:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800a426:	f000 fa1d 	bl	800a864 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800a42a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a42e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a438:	4413      	add	r3, r2
 800a43a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a43e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a442:	2218      	movs	r2, #24
 800a444:	2100      	movs	r1, #0
 800a446:	4618      	mov	r0, r3
 800a448:	f000 fa1c 	bl	800a884 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a44c:	233f      	movs	r3, #63	; 0x3f
 800a44e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800a452:	f44f 7383 	mov.w	r3, #262	; 0x106
 800a456:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a45a:	f107 0310 	add.w	r3, r7, #16
 800a45e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a462:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a466:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a46a:	f107 030f 	add.w	r3, r7, #15
 800a46e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a472:	2301      	movs	r3, #1
 800a474:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a478:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a47c:	2100      	movs	r1, #0
 800a47e:	4618      	mov	r0, r3
 800a480:	f000 fcbc 	bl	800adfc <hci_send_req>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	da01      	bge.n	800a48e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800a48a:	23ff      	movs	r3, #255	; 0xff
 800a48c:	e004      	b.n	800a498 <aci_gatt_update_char_value+0x148>
  return status;
 800a48e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a492:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a496:	781b      	ldrb	r3, [r3, #0]
}
 800a498:	4618      	mov	r0, r3
 800a49a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bdb0      	pop	{r4, r5, r7, pc}

0800a4a2 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800a4a2:	b580      	push	{r7, lr}
 800a4a4:	b0cc      	sub	sp, #304	; 0x130
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4b0:	601a      	str	r2, [r3, #0]
 800a4b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4b6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	701a      	strb	r2, [r3, #0]
 800a4be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4c2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a4c6:	460a      	mov	r2, r1
 800a4c8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800a4ca:	f107 0310 	add.w	r3, r7, #16
 800a4ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a4d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4d6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a4da:	2200      	movs	r2, #0
 800a4dc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800a4e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a4ec:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a4f0:	7812      	ldrb	r2, [r2, #0]
 800a4f2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a4f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800a4fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a502:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a506:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a50a:	7812      	ldrb	r2, [r2, #0]
 800a50c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a50e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a512:	3301      	adds	r3, #1
 800a514:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800a518:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a51c:	1c98      	adds	r0, r3, #2
 800a51e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a522:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a526:	781a      	ldrb	r2, [r3, #0]
 800a528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a52c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a530:	6819      	ldr	r1, [r3, #0]
 800a532:	f000 f997 	bl	800a864 <Osal_MemCpy>
  index_input += Length;
 800a536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a53a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a544:	4413      	add	r3, r2
 800a546:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a54a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a54e:	2218      	movs	r2, #24
 800a550:	2100      	movs	r1, #0
 800a552:	4618      	mov	r0, r3
 800a554:	f000 f996 	bl	800a884 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a558:	233f      	movs	r3, #63	; 0x3f
 800a55a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800a55e:	230c      	movs	r3, #12
 800a560:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a564:	f107 0310 	add.w	r3, r7, #16
 800a568:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a56c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a570:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a574:	f107 030f 	add.w	r3, r7, #15
 800a578:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a57c:	2301      	movs	r3, #1
 800a57e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a582:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a586:	2100      	movs	r1, #0
 800a588:	4618      	mov	r0, r3
 800a58a:	f000 fc37 	bl	800adfc <hci_send_req>
 800a58e:	4603      	mov	r3, r0
 800a590:	2b00      	cmp	r3, #0
 800a592:	da01      	bge.n	800a598 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800a594:	23ff      	movs	r3, #255	; 0xff
 800a596:	e004      	b.n	800a5a2 <aci_hal_write_config_data+0x100>
  return status;
 800a598:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a59c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a5a0:	781b      	ldrb	r3, [r3, #0]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b0cc      	sub	sp, #304	; 0x130
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5b8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a5bc:	701a      	strb	r2, [r3, #0]
 800a5be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5c2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a5c6:	460a      	mov	r2, r1
 800a5c8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800a5ca:	f107 0310 	add.w	r3, r7, #16
 800a5ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a5d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5d6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a5da:	2200      	movs	r2, #0
 800a5dc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800a5e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a5ec:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a5f0:	7812      	ldrb	r2, [r2, #0]
 800a5f2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a5f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800a5fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a602:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a606:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a60a:	7812      	ldrb	r2, [r2, #0]
 800a60c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a60e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a612:	3301      	adds	r3, #1
 800a614:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a618:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a61c:	2218      	movs	r2, #24
 800a61e:	2100      	movs	r1, #0
 800a620:	4618      	mov	r0, r3
 800a622:	f000 f92f 	bl	800a884 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a626:	233f      	movs	r3, #63	; 0x3f
 800a628:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800a62c:	230f      	movs	r3, #15
 800a62e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a632:	f107 0310 	add.w	r3, r7, #16
 800a636:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a63a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a63e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a642:	f107 030f 	add.w	r3, r7, #15
 800a646:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a64a:	2301      	movs	r3, #1
 800a64c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a650:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a654:	2100      	movs	r1, #0
 800a656:	4618      	mov	r0, r3
 800a658:	f000 fbd0 	bl	800adfc <hci_send_req>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	da01      	bge.n	800a666 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800a662:	23ff      	movs	r3, #255	; 0xff
 800a664:	e004      	b.n	800a670 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800a666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a66a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a66e:	781b      	ldrb	r3, [r3, #0]
}
 800a670:	4618      	mov	r0, r3
 800a672:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800a67a:	b580      	push	{r7, lr}
 800a67c:	b0cc      	sub	sp, #304	; 0x130
 800a67e:	af00      	add	r7, sp, #0
 800a680:	4602      	mov	r2, r0
 800a682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a686:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a68a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800a68c:	f107 0310 	add.w	r3, r7, #16
 800a690:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a698:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a69c:	2200      	movs	r2, #0
 800a69e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800a6a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a6ae:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a6b2:	8812      	ldrh	r2, [r2, #0]
 800a6b4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a6b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a6ba:	3302      	adds	r3, #2
 800a6bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a6c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a6c4:	2218      	movs	r2, #24
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f000 f8db 	bl	800a884 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a6ce:	233f      	movs	r3, #63	; 0x3f
 800a6d0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800a6d4:	2318      	movs	r3, #24
 800a6d6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a6da:	f107 0310 	add.w	r3, r7, #16
 800a6de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a6e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a6e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a6ea:	f107 030f 	add.w	r3, r7, #15
 800a6ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a6f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	4618      	mov	r0, r3
 800a700:	f000 fb7c 	bl	800adfc <hci_send_req>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	da01      	bge.n	800a70e <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800a70a:	23ff      	movs	r3, #255	; 0xff
 800a70c:	e004      	b.n	800a718 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800a70e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a712:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a716:	781b      	ldrb	r3, [r3, #0]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800a722:	b580      	push	{r7, lr}
 800a724:	b088      	sub	sp, #32
 800a726:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a728:	2300      	movs	r3, #0
 800a72a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a72c:	f107 0308 	add.w	r3, r7, #8
 800a730:	2218      	movs	r2, #24
 800a732:	2100      	movs	r1, #0
 800a734:	4618      	mov	r0, r3
 800a736:	f000 f8a5 	bl	800a884 <Osal_MemSet>
  rq.ogf = 0x03;
 800a73a:	2303      	movs	r3, #3
 800a73c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800a73e:	2303      	movs	r3, #3
 800a740:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a742:	1dfb      	adds	r3, r7, #7
 800a744:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a746:	2301      	movs	r3, #1
 800a748:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a74a:	f107 0308 	add.w	r3, r7, #8
 800a74e:	2100      	movs	r1, #0
 800a750:	4618      	mov	r0, r3
 800a752:	f000 fb53 	bl	800adfc <hci_send_req>
 800a756:	4603      	mov	r3, r0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	da01      	bge.n	800a760 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a75c:	23ff      	movs	r3, #255	; 0xff
 800a75e:	e000      	b.n	800a762 <hci_reset+0x40>
  return status;
 800a760:	79fb      	ldrb	r3, [r7, #7]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3720      	adds	r7, #32
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800a76a:	b590      	push	{r4, r7, lr}
 800a76c:	b0cd      	sub	sp, #308	; 0x134
 800a76e:	af00      	add	r7, sp, #0
 800a770:	4604      	mov	r4, r0
 800a772:	4608      	mov	r0, r1
 800a774:	4611      	mov	r1, r2
 800a776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a77a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a77e:	4622      	mov	r2, r4
 800a780:	701a      	strb	r2, [r3, #0]
 800a782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a786:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a78a:	4602      	mov	r2, r0
 800a78c:	701a      	strb	r2, [r3, #0]
 800a78e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a792:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800a796:	460a      	mov	r2, r1
 800a798:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800a79a:	f107 0310 	add.w	r3, r7, #16
 800a79e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a7a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7a6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800a7b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a7bc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a7c0:	7812      	ldrb	r2, [r2, #0]
 800a7c2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a7c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800a7ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a7d6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a7da:	7812      	ldrb	r2, [r2, #0]
 800a7dc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a7de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800a7e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7ec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a7f0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800a7f4:	7812      	ldrb	r2, [r2, #0]
 800a7f6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a7f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a7fc:	3301      	adds	r3, #1
 800a7fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a802:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a806:	2218      	movs	r2, #24
 800a808:	2100      	movs	r1, #0
 800a80a:	4618      	mov	r0, r3
 800a80c:	f000 f83a 	bl	800a884 <Osal_MemSet>
  rq.ogf = 0x08;
 800a810:	2308      	movs	r3, #8
 800a812:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800a816:	2331      	movs	r3, #49	; 0x31
 800a818:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a81c:	f107 0310 	add.w	r3, r7, #16
 800a820:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a824:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a828:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a82c:	f107 030f 	add.w	r3, r7, #15
 800a830:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a834:	2301      	movs	r3, #1
 800a836:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a83a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a83e:	2100      	movs	r1, #0
 800a840:	4618      	mov	r0, r3
 800a842:	f000 fadb 	bl	800adfc <hci_send_req>
 800a846:	4603      	mov	r3, r0
 800a848:	2b00      	cmp	r3, #0
 800a84a:	da01      	bge.n	800a850 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800a84c:	23ff      	movs	r3, #255	; 0xff
 800a84e:	e004      	b.n	800a85a <hci_le_set_default_phy+0xf0>
  return status;
 800a850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a854:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a858:	781b      	ldrb	r3, [r3, #0]
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800a860:	46bd      	mov	sp, r7
 800a862:	bd90      	pop	{r4, r7, pc}

0800a864 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	60f8      	str	r0, [r7, #12]
 800a86c:	60b9      	str	r1, [r7, #8]
 800a86e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	68b9      	ldr	r1, [r7, #8]
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	f003 fd64 	bl	800e342 <memcpy>
 800a87a:	4603      	mov	r3, r0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	60b9      	str	r1, [r7, #8]
 800a88e:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	68b9      	ldr	r1, [r7, #8]
 800a894:	68f8      	ldr	r0, [r7, #12]
 800a896:	f003 fcc1 	bl	800e21c <memset>
 800a89a:	4603      	mov	r3, r0
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3710      	adds	r7, #16
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	af00      	add	r7, sp, #0
  return;
 800a8a8:	bf00      	nop
}
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr

0800a8b2 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800a8b2:	b480      	push	{r7}
 800a8b4:	af00      	add	r7, sp, #0
  return;
 800a8b6:	bf00      	nop
}
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	af00      	add	r7, sp, #0
  return;
 800a8c4:	bf00      	nop
}
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr

0800a8ce <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800a8ce:	b480      	push	{r7}
 800a8d0:	af00      	add	r7, sp, #0
  return;
 800a8d2:	bf00      	nop
}
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800a8dc:	b480      	push	{r7}
 800a8de:	af00      	add	r7, sp, #0
  return;
 800a8e0:	bf00      	nop
}
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr

0800a8ea <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800a8ea:	b480      	push	{r7}
 800a8ec:	af00      	add	r7, sp, #0
  return;
 800a8ee:	bf00      	nop
}
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	af00      	add	r7, sp, #0
  return;
 800a8fc:	bf00      	nop
}
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr

0800a906 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800a906:	b480      	push	{r7}
 800a908:	af00      	add	r7, sp, #0
  return;
 800a90a:	bf00      	nop
}
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800a914:	b480      	push	{r7}
 800a916:	af00      	add	r7, sp, #0
  return;
 800a918:	bf00      	nop
}
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr

0800a922 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800a922:	b480      	push	{r7}
 800a924:	af00      	add	r7, sp, #0
  return;
 800a926:	bf00      	nop
}
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800a930:	b480      	push	{r7}
 800a932:	af00      	add	r7, sp, #0
  return;
 800a934:	bf00      	nop
}
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr

0800a93e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800a93e:	b480      	push	{r7}
 800a940:	af00      	add	r7, sp, #0
  return;
 800a942:	bf00      	nop
}
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800a94c:	b480      	push	{r7}
 800a94e:	af00      	add	r7, sp, #0
  return;
 800a950:	bf00      	nop
}
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr

0800a95a <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800a95a:	b480      	push	{r7}
 800a95c:	af00      	add	r7, sp, #0
  return;
 800a95e:	bf00      	nop
}
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800a968:	b480      	push	{r7}
 800a96a:	af00      	add	r7, sp, #0
  return;
 800a96c:	bf00      	nop
}
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr

0800a976 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800a976:	b480      	push	{r7}
 800a978:	af00      	add	r7, sp, #0
  return;
 800a97a:	bf00      	nop
}
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800a984:	b480      	push	{r7}
 800a986:	af00      	add	r7, sp, #0
  return;
 800a988:	bf00      	nop
}
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr
	...

0800a994 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800a994:	b580      	push	{r7, lr}
 800a996:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800a998:	4b04      	ldr	r3, [pc, #16]	; (800a9ac <SVCCTL_Init+0x18>)
 800a99a:	2200      	movs	r2, #0
 800a99c:	711a      	strb	r2, [r3, #4]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800a99e:	4b04      	ldr	r3, [pc, #16]	; (800a9b0 <SVCCTL_Init+0x1c>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800a9a4:	f000 f806 	bl	800a9b4 <SVCCTL_SvcInit>

  return;
 800a9a8:	bf00      	nop
}
 800a9aa:	bd80      	pop	{r7, pc}
 800a9ac:	20000118 	.word	0x20000118
 800a9b0:	20000120 	.word	0x20000120

0800a9b4 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	af00      	add	r7, sp, #0
  BAS_Init();
 800a9b8:	f7ff ff74 	bl	800a8a4 <BAS_Init>

  BLS_Init();
 800a9bc:	f7ff ff79 	bl	800a8b2 <BLS_Init>

  CRS_STM_Init();
 800a9c0:	f7ff ff7e 	bl	800a8c0 <CRS_STM_Init>

  DIS_Init();
 800a9c4:	f7ff ff83 	bl	800a8ce <DIS_Init>

  EDS_STM_Init();
 800a9c8:	f7ff ff88 	bl	800a8dc <EDS_STM_Init>

  HIDS_Init();
 800a9cc:	f7ff ff8d 	bl	800a8ea <HIDS_Init>

  HRS_Init();
 800a9d0:	f7ff ff92 	bl	800a8f8 <HRS_Init>

  HTS_Init();
 800a9d4:	f7ff ff97 	bl	800a906 <HTS_Init>

  IAS_Init();
 800a9d8:	f7ff ff9c 	bl	800a914 <IAS_Init>

  LLS_Init();
 800a9dc:	f7ff ffa1 	bl	800a922 <LLS_Init>

  TPS_Init();
 800a9e0:	f7ff ffa6 	bl	800a930 <TPS_Init>

  MOTENV_STM_Init();
 800a9e4:	f7ff ffab 	bl	800a93e <MOTENV_STM_Init>

  P2PS_STM_Init();
 800a9e8:	f7ff ffb0 	bl	800a94c <P2PS_STM_Init>

  ZDD_STM_Init();
 800a9ec:	f7ff ffb5 	bl	800a95a <ZDD_STM_Init>

  OTAS_STM_Init();
 800a9f0:	f7ff ffba 	bl	800a968 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800a9f4:	f7ff ffc6 	bl	800a984 <BVOPUS_STM_Init>

  MESH_Init();
 800a9f8:	f7ff ffbd 	bl	800a976 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800a9fc:	f002 fc72 	bl	800d2e4 <SVCCTL_InitCustomSvc>
  
  return;
 800aa00:	bf00      	nop
}
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800aa0c:	4b09      	ldr	r3, [pc, #36]	; (800aa34 <SVCCTL_RegisterSvcHandler+0x30>)
 800aa0e:	791b      	ldrb	r3, [r3, #4]
 800aa10:	4619      	mov	r1, r3
 800aa12:	4a08      	ldr	r2, [pc, #32]	; (800aa34 <SVCCTL_RegisterSvcHandler+0x30>)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800aa1a:	4b06      	ldr	r3, [pc, #24]	; (800aa34 <SVCCTL_RegisterSvcHandler+0x30>)
 800aa1c:	791b      	ldrb	r3, [r3, #4]
 800aa1e:	3301      	adds	r3, #1
 800aa20:	b2da      	uxtb	r2, r3
 800aa22:	4b04      	ldr	r3, [pc, #16]	; (800aa34 <SVCCTL_RegisterSvcHandler+0x30>)
 800aa24:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800aa26:	bf00      	nop
}
 800aa28:	370c      	adds	r7, #12
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop
 800aa34:	20000118 	.word	0x20000118

0800aa38 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b086      	sub	sp, #24
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	3301      	adds	r3, #1
 800aa44:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800aa46:	2300      	movs	r3, #0
 800aa48:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	2bff      	cmp	r3, #255	; 0xff
 800aa50:	d125      	bne.n	800aa9e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	3302      	adds	r3, #2
 800aa56:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	881b      	ldrh	r3, [r3, #0]
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aa62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa66:	d118      	bne.n	800aa9a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800aa68:	2300      	movs	r3, #0
 800aa6a:	757b      	strb	r3, [r7, #21]
 800aa6c:	e00d      	b.n	800aa8a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800aa6e:	7d7b      	ldrb	r3, [r7, #21]
 800aa70:	4a1a      	ldr	r2, [pc, #104]	; (800aadc <SVCCTL_UserEvtRx+0xa4>)
 800aa72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	4798      	blx	r3
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800aa7e:	7dfb      	ldrb	r3, [r7, #23]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d108      	bne.n	800aa96 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800aa84:	7d7b      	ldrb	r3, [r7, #21]
 800aa86:	3301      	adds	r3, #1
 800aa88:	757b      	strb	r3, [r7, #21]
 800aa8a:	4b14      	ldr	r3, [pc, #80]	; (800aadc <SVCCTL_UserEvtRx+0xa4>)
 800aa8c:	791b      	ldrb	r3, [r3, #4]
 800aa8e:	7d7a      	ldrb	r2, [r7, #21]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d3ec      	bcc.n	800aa6e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800aa94:	e002      	b.n	800aa9c <SVCCTL_UserEvtRx+0x64>
              break;
 800aa96:	bf00      	nop
          break;
 800aa98:	e000      	b.n	800aa9c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800aa9a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800aa9c:	e000      	b.n	800aaa0 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800aa9e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800aaa0:	7dfb      	ldrb	r3, [r7, #23]
 800aaa2:	2b02      	cmp	r3, #2
 800aaa4:	d00f      	beq.n	800aac6 <SVCCTL_UserEvtRx+0x8e>
 800aaa6:	2b02      	cmp	r3, #2
 800aaa8:	dc10      	bgt.n	800aacc <SVCCTL_UserEvtRx+0x94>
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d002      	beq.n	800aab4 <SVCCTL_UserEvtRx+0x7c>
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d006      	beq.n	800aac0 <SVCCTL_UserEvtRx+0x88>
 800aab2:	e00b      	b.n	800aacc <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f001 fd0b 	bl	800c4d0 <SVCCTL_App_Notification>
 800aaba:	4603      	mov	r3, r0
 800aabc:	75bb      	strb	r3, [r7, #22]
      break;
 800aabe:	e008      	b.n	800aad2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800aac0:	2301      	movs	r3, #1
 800aac2:	75bb      	strb	r3, [r7, #22]
      break;
 800aac4:	e005      	b.n	800aad2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800aac6:	2300      	movs	r3, #0
 800aac8:	75bb      	strb	r3, [r7, #22]
      break;
 800aaca:	e002      	b.n	800aad2 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800aacc:	2301      	movs	r3, #1
 800aace:	75bb      	strb	r3, [r7, #22]
      break;
 800aad0:	bf00      	nop
  }

  return (return_status);
 800aad2:	7dbb      	ldrb	r3, [r7, #22]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3718      	adds	r7, #24
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	20000118 	.word	0x20000118

0800aae0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b088      	sub	sp, #32
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800aae8:	f107 030c 	add.w	r3, r7, #12
 800aaec:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	212e      	movs	r1, #46	; 0x2e
 800aaf8:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800aafc:	f000 fb1a 	bl	800b134 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ab00:	69fb      	ldr	r3, [r7, #28]
 800ab02:	330b      	adds	r3, #11
 800ab04:	78db      	ldrb	r3, [r3, #3]
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3720      	adds	r7, #32
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}

0800ab0e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800ab0e:	b580      	push	{r7, lr}
 800ab10:	b088      	sub	sp, #32
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ab16:	f107 030c 	add.w	r3, r7, #12
 800ab1a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	210f      	movs	r1, #15
 800ab26:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800ab2a:	f000 fb03 	bl	800b134 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ab2e:	69fb      	ldr	r3, [r7, #28]
 800ab30:	330b      	adds	r3, #11
 800ab32:	78db      	ldrb	r3, [r3, #3]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3720      	adds	r7, #32
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <SHCI_C2_FLASH_EraseActivity>:

SHCI_CmdStatus_t SHCI_C2_FLASH_EraseActivity( SHCI_EraseActivity_t erase_activity )
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b088      	sub	sp, #32
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	4603      	mov	r3, r0
 800ab44:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ab46:	f107 030c 	add.w	r3, r7, #12
 800ab4a:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = erase_activity;
 800ab4c:	79fb      	ldrb	r3, [r7, #7]
 800ab4e:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_ERASE_ACTIVITY,
 800ab50:	f107 020c 	add.w	r2, r7, #12
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	2101      	movs	r1, #1
 800ab58:	f64f 4069 	movw	r0, #64617	; 0xfc69
 800ab5c:	f000 faea 	bl	800b134 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	330b      	adds	r3, #11
 800ab64:	78db      	ldrb	r3, [r3, #3]
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3720      	adds	r7, #32
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}

0800ab6e <SHCI_C2_SetFlashActivityControl>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_SetFlashActivityControl(SHCI_C2_SET_FLASH_ACTIVITY_CONTROL_Source_t Source)
{
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	b088      	sub	sp, #32
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	4603      	mov	r3, r0
 800ab76:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ab78:	f107 030c 	add.w	r3, r7, #12
 800ab7c:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = (uint8_t)Source;
 800ab7e:	79fb      	ldrb	r3, [r7, #7]
 800ab80:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_SET_FLASH_ACTIVITY_CONTROL,
 800ab82:	f107 020c 	add.w	r2, r7, #12
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	2101      	movs	r1, #1
 800ab8a:	f64f 4073 	movw	r0, #64627	; 0xfc73
 800ab8e:	f000 fad1 	bl	800b134 <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ab92:	69fb      	ldr	r3, [r7, #28]
 800ab94:	330b      	adds	r3, #11
 800ab96:	78db      	ldrb	r3, [r3, #3]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3720      	adds	r7, #32
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <SHCI_C2_Config>:

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b088      	sub	sp, #32
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800aba8:	f107 030c 	add.w	r3, r7, #12
 800abac:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800abae:	69fb      	ldr	r3, [r7, #28]
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	2110      	movs	r1, #16
 800abb4:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800abb8:	f000 fabc 	bl	800b134 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	330b      	adds	r3, #11
 800abc0:	78db      	ldrb	r3, [r3, #3]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3720      	adds	r7, #32
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
	...

0800abcc <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800abcc:	b480      	push	{r7}
 800abce:	b08b      	sub	sp, #44	; 0x2c
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800abd4:	2300      	movs	r3, #0
 800abd6:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800abd8:	2300      	movs	r3, #0
 800abda:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800abdc:	2300      	movs	r3, #0
 800abde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800abe0:	2300      	movs	r3, #0
 800abe2:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800abe4:	2300      	movs	r3, #0
 800abe6:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800abe8:	2300      	movs	r3, #0
 800abea:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800abec:	2300      	movs	r3, #0
 800abee:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800abf0:	2300      	movs	r3, #0
 800abf2:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800abf4:	4b4a      	ldr	r3, [pc, #296]	; (800ad20 <SHCI_GetWirelessFwInfo+0x154>)
 800abf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abf8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800abfc:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ac06:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4a44      	ldr	r2, [pc, #272]	; (800ad24 <SHCI_GetWirelessFwInfo+0x158>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d10f      	bne.n	800ac38 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	695b      	ldr	r3, [r3, #20]
 800ac1c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	699b      	ldr	r3, [r3, #24]
 800ac22:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	69db      	ldr	r3, [r3, #28]
 800ac28:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	691b      	ldr	r3, [r3, #16]
 800ac34:	617b      	str	r3, [r7, #20]
 800ac36:	e01a      	b.n	800ac6e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800ac40:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800ac44:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	691b      	ldr	r3, [r3, #16]
 800ac4c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	695b      	ldr	r3, [r3, #20]
 800ac54:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	699b      	ldr	r3, [r3, #24]
 800ac5c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800ac6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac70:	0e1b      	lsrs	r3, r3, #24
 800ac72:	b2da      	uxtb	r2, r3
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800ac78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7a:	0c1b      	lsrs	r3, r3, #16
 800ac7c:	b2da      	uxtb	r2, r3
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800ac82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac84:	0a1b      	lsrs	r3, r3, #8
 800ac86:	b2da      	uxtb	r2, r3
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8e:	091b      	lsrs	r3, r3, #4
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	f003 030f 	and.w	r3, r3, #15
 800ac96:	b2da      	uxtb	r2, r3
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800ac9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	f003 030f 	and.w	r3, r3, #15
 800aca4:	b2da      	uxtb	r2, r3
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800acaa:	6a3b      	ldr	r3, [r7, #32]
 800acac:	0e1b      	lsrs	r3, r3, #24
 800acae:	b2da      	uxtb	r2, r3
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800acb4:	6a3b      	ldr	r3, [r7, #32]
 800acb6:	0c1b      	lsrs	r3, r3, #16
 800acb8:	b2da      	uxtb	r2, r3
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800acbe:	6a3b      	ldr	r3, [r7, #32]
 800acc0:	0a1b      	lsrs	r3, r3, #8
 800acc2:	b2da      	uxtb	r2, r3
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800acc8:	6a3b      	ldr	r3, [r7, #32]
 800acca:	b2da      	uxtb	r2, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800acd0:	69fb      	ldr	r3, [r7, #28]
 800acd2:	b2da      	uxtb	r2, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	0e1b      	lsrs	r3, r3, #24
 800acdc:	b2da      	uxtb	r2, r3
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800ace2:	69bb      	ldr	r3, [r7, #24]
 800ace4:	0c1b      	lsrs	r3, r3, #16
 800ace6:	b2da      	uxtb	r2, r3
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800acec:	69bb      	ldr	r3, [r7, #24]
 800acee:	0a1b      	lsrs	r3, r3, #8
 800acf0:	b2da      	uxtb	r2, r3
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	0e1b      	lsrs	r3, r3, #24
 800acfa:	b2da      	uxtb	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	0c1b      	lsrs	r3, r3, #16
 800ad04:	b2da      	uxtb	r2, r3
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	b2da      	uxtb	r2, r3
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800ad12:	2300      	movs	r3, #0
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	372c      	adds	r7, #44	; 0x2c
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr
 800ad20:	58004000 	.word	0x58004000
 800ad24:	a94656b9 	.word	0xa94656b9

0800ad28 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	4a08      	ldr	r2, [pc, #32]	; (800ad58 <hci_init+0x30>)
 800ad38:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800ad3a:	4a08      	ldr	r2, [pc, #32]	; (800ad5c <hci_init+0x34>)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800ad40:	4806      	ldr	r0, [pc, #24]	; (800ad5c <hci_init+0x34>)
 800ad42:	f000 f979 	bl	800b038 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f000 f8da 	bl	800af04 <TlInit>

  return;
 800ad50:	bf00      	nop
}
 800ad52:	3708      	adds	r7, #8
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	2000057c 	.word	0x2000057c
 800ad5c:	20000554 	.word	0x20000554

0800ad60 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800ad66:	4822      	ldr	r0, [pc, #136]	; (800adf0 <hci_user_evt_proc+0x90>)
 800ad68:	f000 fe10 	bl	800b98c <LST_is_empty>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d12b      	bne.n	800adca <hci_user_evt_proc+0x6a>
 800ad72:	4b20      	ldr	r3, [pc, #128]	; (800adf4 <hci_user_evt_proc+0x94>)
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d027      	beq.n	800adca <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800ad7a:	f107 030c 	add.w	r3, r7, #12
 800ad7e:	4619      	mov	r1, r3
 800ad80:	481b      	ldr	r0, [pc, #108]	; (800adf0 <hci_user_evt_proc+0x90>)
 800ad82:	f000 fe92 	bl	800baaa <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800ad86:	4b1c      	ldr	r3, [pc, #112]	; (800adf8 <hci_user_evt_proc+0x98>)
 800ad88:	69db      	ldr	r3, [r3, #28]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d00c      	beq.n	800ada8 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800ad92:	2301      	movs	r3, #1
 800ad94:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800ad96:	4b18      	ldr	r3, [pc, #96]	; (800adf8 <hci_user_evt_proc+0x98>)
 800ad98:	69db      	ldr	r3, [r3, #28]
 800ad9a:	1d3a      	adds	r2, r7, #4
 800ad9c:	4610      	mov	r0, r2
 800ad9e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800ada0:	793a      	ldrb	r2, [r7, #4]
 800ada2:	4b14      	ldr	r3, [pc, #80]	; (800adf4 <hci_user_evt_proc+0x94>)
 800ada4:	701a      	strb	r2, [r3, #0]
 800ada6:	e002      	b.n	800adae <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800ada8:	4b12      	ldr	r3, [pc, #72]	; (800adf4 <hci_user_evt_proc+0x94>)
 800adaa:	2201      	movs	r2, #1
 800adac:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800adae:	4b11      	ldr	r3, [pc, #68]	; (800adf4 <hci_user_evt_proc+0x94>)
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d004      	beq.n	800adc0 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	4618      	mov	r0, r3
 800adba:	f000 fc0d 	bl	800b5d8 <TL_MM_EvtDone>
 800adbe:	e004      	b.n	800adca <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	4619      	mov	r1, r3
 800adc4:	480a      	ldr	r0, [pc, #40]	; (800adf0 <hci_user_evt_proc+0x90>)
 800adc6:	f000 fe03 	bl	800b9d0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800adca:	4809      	ldr	r0, [pc, #36]	; (800adf0 <hci_user_evt_proc+0x90>)
 800adcc:	f000 fdde 	bl	800b98c <LST_is_empty>
 800add0:	4603      	mov	r3, r0
 800add2:	2b00      	cmp	r3, #0
 800add4:	d107      	bne.n	800ade6 <hci_user_evt_proc+0x86>
 800add6:	4b07      	ldr	r3, [pc, #28]	; (800adf4 <hci_user_evt_proc+0x94>)
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d003      	beq.n	800ade6 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800adde:	4804      	ldr	r0, [pc, #16]	; (800adf0 <hci_user_evt_proc+0x90>)
 800ade0:	f002 f9da 	bl	800d198 <hci_notify_asynch_evt>
  }


  return;
 800ade4:	bf00      	nop
 800ade6:	bf00      	nop
}
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	20000128 	.word	0x20000128
 800adf4:	20000134 	.word	0x20000134
 800adf8:	20000554 	.word	0x20000554

0800adfc <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b088      	sub	sp, #32
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	460b      	mov	r3, r1
 800ae06:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800ae08:	2000      	movs	r0, #0
 800ae0a:	f000 f8d1 	bl	800afb0 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	885b      	ldrh	r3, [r3, #2]
 800ae16:	b21b      	sxth	r3, r3
 800ae18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae1c:	b21a      	sxth	r2, r3
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	881b      	ldrh	r3, [r3, #0]
 800ae22:	029b      	lsls	r3, r3, #10
 800ae24:	b21b      	sxth	r3, r3
 800ae26:	4313      	orrs	r3, r2
 800ae28:	b21b      	sxth	r3, r3
 800ae2a:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800ae2c:	4b33      	ldr	r3, [pc, #204]	; (800aefc <hci_send_req+0x100>)
 800ae2e:	2201      	movs	r2, #1
 800ae30:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	b2d9      	uxtb	r1, r3
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	689a      	ldr	r2, [r3, #8]
 800ae3c:	8bbb      	ldrh	r3, [r7, #28]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f000 f890 	bl	800af64 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800ae44:	e04e      	b.n	800aee4 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800ae46:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800ae4a:	f002 f9bc 	bl	800d1c6 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800ae4e:	e043      	b.n	800aed8 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800ae50:	f107 030c 	add.w	r3, r7, #12
 800ae54:	4619      	mov	r1, r3
 800ae56:	482a      	ldr	r0, [pc, #168]	; (800af00 <hci_send_req+0x104>)
 800ae58:	f000 fe27 	bl	800baaa <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	7a5b      	ldrb	r3, [r3, #9]
 800ae60:	2b0f      	cmp	r3, #15
 800ae62:	d114      	bne.n	800ae8e <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	330b      	adds	r3, #11
 800ae68:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	885b      	ldrh	r3, [r3, #2]
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	8bba      	ldrh	r2, [r7, #28]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d104      	bne.n	800ae80 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	691b      	ldr	r3, [r3, #16]
 800ae7a:	693a      	ldr	r2, [r7, #16]
 800ae7c:	7812      	ldrb	r2, [r2, #0]
 800ae7e:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	785b      	ldrb	r3, [r3, #1]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d027      	beq.n	800aed8 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800ae88:	2301      	movs	r3, #1
 800ae8a:	77fb      	strb	r3, [r7, #31]
 800ae8c:	e024      	b.n	800aed8 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	330b      	adds	r3, #11
 800ae92:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	8bba      	ldrh	r2, [r7, #28]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d114      	bne.n	800aecc <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	7a9b      	ldrb	r3, [r3, #10]
 800aea6:	3b03      	subs	r3, #3
 800aea8:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	695a      	ldr	r2, [r3, #20]
 800aeae:	7dfb      	ldrb	r3, [r7, #23]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	bfa8      	it	ge
 800aeb4:	461a      	movge	r2, r3
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6918      	ldr	r0, [r3, #16]
 800aebe:	69bb      	ldr	r3, [r7, #24]
 800aec0:	1cd9      	adds	r1, r3, #3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	695b      	ldr	r3, [r3, #20]
 800aec6:	461a      	mov	r2, r3
 800aec8:	f003 fa3b 	bl	800e342 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d001      	beq.n	800aed8 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800aed4:	2301      	movs	r3, #1
 800aed6:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800aed8:	4809      	ldr	r0, [pc, #36]	; (800af00 <hci_send_req+0x104>)
 800aeda:	f000 fd57 	bl	800b98c <LST_is_empty>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d0b5      	beq.n	800ae50 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800aee4:	7ffb      	ldrb	r3, [r7, #31]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d0ad      	beq.n	800ae46 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800aeea:	2001      	movs	r0, #1
 800aeec:	f000 f860 	bl	800afb0 <NotifyCmdStatus>

  return 0;
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3720      	adds	r7, #32
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	20000580 	.word	0x20000580
 800af00:	20000574 	.word	0x20000574

0800af04 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b086      	sub	sp, #24
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800af0c:	480f      	ldr	r0, [pc, #60]	; (800af4c <TlInit+0x48>)
 800af0e:	f000 fd2d 	bl	800b96c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800af12:	4a0f      	ldr	r2, [pc, #60]	; (800af50 <TlInit+0x4c>)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800af18:	480e      	ldr	r0, [pc, #56]	; (800af54 <TlInit+0x50>)
 800af1a:	f000 fd27 	bl	800b96c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800af1e:	4b0e      	ldr	r3, [pc, #56]	; (800af58 <TlInit+0x54>)
 800af20:	2201      	movs	r2, #1
 800af22:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800af24:	4b0d      	ldr	r3, [pc, #52]	; (800af5c <TlInit+0x58>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00a      	beq.n	800af42 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800af30:	4b0b      	ldr	r3, [pc, #44]	; (800af60 <TlInit+0x5c>)
 800af32:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800af34:	4b09      	ldr	r3, [pc, #36]	; (800af5c <TlInit+0x58>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f107 0208 	add.w	r2, r7, #8
 800af3c:	4610      	mov	r0, r2
 800af3e:	4798      	blx	r3
  }

  return;
 800af40:	bf00      	nop
 800af42:	bf00      	nop
}
 800af44:	3718      	adds	r7, #24
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	20000574 	.word	0x20000574
 800af50:	20000130 	.word	0x20000130
 800af54:	20000128 	.word	0x20000128
 800af58:	20000134 	.word	0x20000134
 800af5c:	20000554 	.word	0x20000554
 800af60:	0800aff1 	.word	0x0800aff1

0800af64 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	4603      	mov	r3, r0
 800af6c:	603a      	str	r2, [r7, #0]
 800af6e:	80fb      	strh	r3, [r7, #6]
 800af70:	460b      	mov	r3, r1
 800af72:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800af74:	4b0c      	ldr	r3, [pc, #48]	; (800afa8 <SendCmd+0x44>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	88fa      	ldrh	r2, [r7, #6]
 800af7a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800af7e:	4b0a      	ldr	r3, [pc, #40]	; (800afa8 <SendCmd+0x44>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	797a      	ldrb	r2, [r7, #5]
 800af84:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800af86:	4b08      	ldr	r3, [pc, #32]	; (800afa8 <SendCmd+0x44>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	330c      	adds	r3, #12
 800af8c:	797a      	ldrb	r2, [r7, #5]
 800af8e:	6839      	ldr	r1, [r7, #0]
 800af90:	4618      	mov	r0, r3
 800af92:	f003 f9d6 	bl	800e342 <memcpy>

  hciContext.io.Send(0,0);
 800af96:	4b05      	ldr	r3, [pc, #20]	; (800afac <SendCmd+0x48>)
 800af98:	691b      	ldr	r3, [r3, #16]
 800af9a:	2100      	movs	r1, #0
 800af9c:	2000      	movs	r0, #0
 800af9e:	4798      	blx	r3

  return;
 800afa0:	bf00      	nop
}
 800afa2:	3708      	adds	r7, #8
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}
 800afa8:	20000130 	.word	0x20000130
 800afac:	20000554 	.word	0x20000554

0800afb0 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	4603      	mov	r3, r0
 800afb8:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800afba:	79fb      	ldrb	r3, [r7, #7]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d108      	bne.n	800afd2 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800afc0:	4b0a      	ldr	r3, [pc, #40]	; (800afec <NotifyCmdStatus+0x3c>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d00d      	beq.n	800afe4 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800afc8:	4b08      	ldr	r3, [pc, #32]	; (800afec <NotifyCmdStatus+0x3c>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	2000      	movs	r0, #0
 800afce:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800afd0:	e008      	b.n	800afe4 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800afd2:	4b06      	ldr	r3, [pc, #24]	; (800afec <NotifyCmdStatus+0x3c>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d004      	beq.n	800afe4 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800afda:	4b04      	ldr	r3, [pc, #16]	; (800afec <NotifyCmdStatus+0x3c>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2001      	movs	r0, #1
 800afe0:	4798      	blx	r3
  return;
 800afe2:	bf00      	nop
 800afe4:	bf00      	nop
}
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	2000057c 	.word	0x2000057c

0800aff0 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	7a5b      	ldrb	r3, [r3, #9]
 800affc:	2b0f      	cmp	r3, #15
 800affe:	d003      	beq.n	800b008 <TlEvtReceived+0x18>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	7a5b      	ldrb	r3, [r3, #9]
 800b004:	2b0e      	cmp	r3, #14
 800b006:	d107      	bne.n	800b018 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800b008:	6879      	ldr	r1, [r7, #4]
 800b00a:	4809      	ldr	r0, [pc, #36]	; (800b030 <TlEvtReceived+0x40>)
 800b00c:	f000 fd06 	bl	800ba1c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800b010:	2000      	movs	r0, #0
 800b012:	f002 f8cd 	bl	800d1b0 <hci_cmd_resp_release>
 800b016:	e006      	b.n	800b026 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800b018:	6879      	ldr	r1, [r7, #4]
 800b01a:	4806      	ldr	r0, [pc, #24]	; (800b034 <TlEvtReceived+0x44>)
 800b01c:	f000 fcfe 	bl	800ba1c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b020:	4804      	ldr	r0, [pc, #16]	; (800b034 <TlEvtReceived+0x44>)
 800b022:	f002 f8b9 	bl	800d198 <hci_notify_asynch_evt>
  }

  return;
 800b026:	bf00      	nop
}
 800b028:	3708      	adds	r7, #8
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	20000574 	.word	0x20000574
 800b034:	20000128 	.word	0x20000128

0800b038 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800b038:	b480      	push	{r7}
 800b03a:	b083      	sub	sp, #12
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	4a05      	ldr	r2, [pc, #20]	; (800b058 <hci_register_io_bus+0x20>)
 800b044:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	4a04      	ldr	r2, [pc, #16]	; (800b05c <hci_register_io_bus+0x24>)
 800b04a:	611a      	str	r2, [r3, #16]

  return;
 800b04c:	bf00      	nop
}
 800b04e:	370c      	adds	r7, #12
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr
 800b058:	0800b351 	.word	0x0800b351
 800b05c:	0800b3b9 	.word	0x0800b3b9

0800b060 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b082      	sub	sp, #8
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	4a08      	ldr	r2, [pc, #32]	; (800b090 <shci_init+0x30>)
 800b070:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800b072:	4a08      	ldr	r2, [pc, #32]	; (800b094 <shci_init+0x34>)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800b078:	4806      	ldr	r0, [pc, #24]	; (800b094 <shci_init+0x34>)
 800b07a:	f000 f915 	bl	800b2a8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4618      	mov	r0, r3
 800b084:	f000 f898 	bl	800b1b8 <TlInit>

  return;
 800b088:	bf00      	nop
}
 800b08a:	3708      	adds	r7, #8
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	200005a4 	.word	0x200005a4
 800b094:	20000584 	.word	0x20000584

0800b098 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b09e:	4822      	ldr	r0, [pc, #136]	; (800b128 <shci_user_evt_proc+0x90>)
 800b0a0:	f000 fc74 	bl	800b98c <LST_is_empty>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d12b      	bne.n	800b102 <shci_user_evt_proc+0x6a>
 800b0aa:	4b20      	ldr	r3, [pc, #128]	; (800b12c <shci_user_evt_proc+0x94>)
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d027      	beq.n	800b102 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b0b2:	f107 030c 	add.w	r3, r7, #12
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	481b      	ldr	r0, [pc, #108]	; (800b128 <shci_user_evt_proc+0x90>)
 800b0ba:	f000 fcf6 	bl	800baaa <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800b0be:	4b1c      	ldr	r3, [pc, #112]	; (800b130 <shci_user_evt_proc+0x98>)
 800b0c0:	69db      	ldr	r3, [r3, #28]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00c      	beq.n	800b0e0 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b0ce:	4b18      	ldr	r3, [pc, #96]	; (800b130 <shci_user_evt_proc+0x98>)
 800b0d0:	69db      	ldr	r3, [r3, #28]
 800b0d2:	1d3a      	adds	r2, r7, #4
 800b0d4:	4610      	mov	r0, r2
 800b0d6:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800b0d8:	793a      	ldrb	r2, [r7, #4]
 800b0da:	4b14      	ldr	r3, [pc, #80]	; (800b12c <shci_user_evt_proc+0x94>)
 800b0dc:	701a      	strb	r2, [r3, #0]
 800b0de:	e002      	b.n	800b0e6 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b0e0:	4b12      	ldr	r3, [pc, #72]	; (800b12c <shci_user_evt_proc+0x94>)
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800b0e6:	4b11      	ldr	r3, [pc, #68]	; (800b12c <shci_user_evt_proc+0x94>)
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d004      	beq.n	800b0f8 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f000 fa71 	bl	800b5d8 <TL_MM_EvtDone>
 800b0f6:	e004      	b.n	800b102 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	480a      	ldr	r0, [pc, #40]	; (800b128 <shci_user_evt_proc+0x90>)
 800b0fe:	f000 fc67 	bl	800b9d0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b102:	4809      	ldr	r0, [pc, #36]	; (800b128 <shci_user_evt_proc+0x90>)
 800b104:	f000 fc42 	bl	800b98c <LST_is_empty>
 800b108:	4603      	mov	r3, r0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d107      	bne.n	800b11e <shci_user_evt_proc+0x86>
 800b10e:	4b07      	ldr	r3, [pc, #28]	; (800b12c <shci_user_evt_proc+0x94>)
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d003      	beq.n	800b11e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800b116:	4804      	ldr	r0, [pc, #16]	; (800b128 <shci_user_evt_proc+0x90>)
 800b118:	f7f6 f9a2 	bl	8001460 <shci_notify_asynch_evt>
  }


  return;
 800b11c:	bf00      	nop
 800b11e:	bf00      	nop
}
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	20000138 	.word	0x20000138
 800b12c:	20000148 	.word	0x20000148
 800b130:	20000584 	.word	0x20000584

0800b134 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60ba      	str	r2, [r7, #8]
 800b13c:	607b      	str	r3, [r7, #4]
 800b13e:	4603      	mov	r3, r0
 800b140:	81fb      	strh	r3, [r7, #14]
 800b142:	460b      	mov	r3, r1
 800b144:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800b146:	2000      	movs	r0, #0
 800b148:	f000 f868 	bl	800b21c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800b14c:	4b17      	ldr	r3, [pc, #92]	; (800b1ac <shci_send+0x78>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	89fa      	ldrh	r2, [r7, #14]
 800b152:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800b156:	4b15      	ldr	r3, [pc, #84]	; (800b1ac <shci_send+0x78>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	7b7a      	ldrb	r2, [r7, #13]
 800b15c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800b15e:	4b13      	ldr	r3, [pc, #76]	; (800b1ac <shci_send+0x78>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	330c      	adds	r3, #12
 800b164:	7b7a      	ldrb	r2, [r7, #13]
 800b166:	68b9      	ldr	r1, [r7, #8]
 800b168:	4618      	mov	r0, r3
 800b16a:	f003 f8ea 	bl	800e342 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800b16e:	4b10      	ldr	r3, [pc, #64]	; (800b1b0 <shci_send+0x7c>)
 800b170:	2201      	movs	r2, #1
 800b172:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800b174:	4b0f      	ldr	r3, [pc, #60]	; (800b1b4 <shci_send+0x80>)
 800b176:	691b      	ldr	r3, [r3, #16]
 800b178:	2100      	movs	r1, #0
 800b17a:	2000      	movs	r0, #0
 800b17c:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800b17e:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800b182:	f7f6 f984 	bl	800148e <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f103 0008 	add.w	r0, r3, #8
 800b18c:	4b07      	ldr	r3, [pc, #28]	; (800b1ac <shci_send+0x78>)
 800b18e:	6819      	ldr	r1, [r3, #0]
 800b190:	4b06      	ldr	r3, [pc, #24]	; (800b1ac <shci_send+0x78>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	789b      	ldrb	r3, [r3, #2]
 800b196:	3303      	adds	r3, #3
 800b198:	461a      	mov	r2, r3
 800b19a:	f003 f8d2 	bl	800e342 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b19e:	2001      	movs	r0, #1
 800b1a0:	f000 f83c 	bl	800b21c <Cmd_SetStatus>

  return;
 800b1a4:	bf00      	nop
}
 800b1a6:	3710      	adds	r7, #16
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}
 800b1ac:	20000144 	.word	0x20000144
 800b1b0:	200005a8 	.word	0x200005a8
 800b1b4:	20000584 	.word	0x20000584

0800b1b8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b086      	sub	sp, #24
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800b1c0:	4a10      	ldr	r2, [pc, #64]	; (800b204 <TlInit+0x4c>)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800b1c6:	4810      	ldr	r0, [pc, #64]	; (800b208 <TlInit+0x50>)
 800b1c8:	f000 fbd0 	bl	800b96c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b1cc:	2001      	movs	r0, #1
 800b1ce:	f000 f825 	bl	800b21c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b1d2:	4b0e      	ldr	r3, [pc, #56]	; (800b20c <TlInit+0x54>)
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800b1d8:	4b0d      	ldr	r3, [pc, #52]	; (800b210 <TlInit+0x58>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d00c      	beq.n	800b1fa <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800b1e4:	4b0b      	ldr	r3, [pc, #44]	; (800b214 <TlInit+0x5c>)
 800b1e6:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800b1e8:	4b0b      	ldr	r3, [pc, #44]	; (800b218 <TlInit+0x60>)
 800b1ea:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800b1ec:	4b08      	ldr	r3, [pc, #32]	; (800b210 <TlInit+0x58>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f107 020c 	add.w	r2, r7, #12
 800b1f4:	4610      	mov	r0, r2
 800b1f6:	4798      	blx	r3
  }

  return;
 800b1f8:	bf00      	nop
 800b1fa:	bf00      	nop
}
 800b1fc:	3718      	adds	r7, #24
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	20000144 	.word	0x20000144
 800b208:	20000138 	.word	0x20000138
 800b20c:	20000148 	.word	0x20000148
 800b210:	20000584 	.word	0x20000584
 800b214:	0800b26d 	.word	0x0800b26d
 800b218:	0800b285 	.word	0x0800b285

0800b21c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	4603      	mov	r3, r0
 800b224:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800b226:	79fb      	ldrb	r3, [r7, #7]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d10b      	bne.n	800b244 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800b22c:	4b0d      	ldr	r3, [pc, #52]	; (800b264 <Cmd_SetStatus+0x48>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d003      	beq.n	800b23c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800b234:	4b0b      	ldr	r3, [pc, #44]	; (800b264 <Cmd_SetStatus+0x48>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2000      	movs	r0, #0
 800b23a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800b23c:	4b0a      	ldr	r3, [pc, #40]	; (800b268 <Cmd_SetStatus+0x4c>)
 800b23e:	2200      	movs	r2, #0
 800b240:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800b242:	e00b      	b.n	800b25c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800b244:	4b08      	ldr	r3, [pc, #32]	; (800b268 <Cmd_SetStatus+0x4c>)
 800b246:	2201      	movs	r2, #1
 800b248:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800b24a:	4b06      	ldr	r3, [pc, #24]	; (800b264 <Cmd_SetStatus+0x48>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d004      	beq.n	800b25c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800b252:	4b04      	ldr	r3, [pc, #16]	; (800b264 <Cmd_SetStatus+0x48>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	2001      	movs	r0, #1
 800b258:	4798      	blx	r3
  return;
 800b25a:	bf00      	nop
 800b25c:	bf00      	nop
}
 800b25e:	3708      	adds	r7, #8
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}
 800b264:	200005a4 	.word	0x200005a4
 800b268:	20000140 	.word	0x20000140

0800b26c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800b274:	2000      	movs	r0, #0
 800b276:	f7f6 f8ff 	bl	8001478 <shci_cmd_resp_release>

  return;
 800b27a:	bf00      	nop
}
 800b27c:	3708      	adds	r7, #8
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
	...

0800b284 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800b28c:	6879      	ldr	r1, [r7, #4]
 800b28e:	4805      	ldr	r0, [pc, #20]	; (800b2a4 <TlUserEvtReceived+0x20>)
 800b290:	f000 fbc4 	bl	800ba1c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b294:	4803      	ldr	r0, [pc, #12]	; (800b2a4 <TlUserEvtReceived+0x20>)
 800b296:	f7f6 f8e3 	bl	8001460 <shci_notify_asynch_evt>

  return;
 800b29a:	bf00      	nop
}
 800b29c:	3708      	adds	r7, #8
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	20000138 	.word	0x20000138

0800b2a8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	4a05      	ldr	r2, [pc, #20]	; (800b2c8 <shci_register_io_bus+0x20>)
 800b2b4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4a04      	ldr	r2, [pc, #16]	; (800b2cc <shci_register_io_bus+0x24>)
 800b2ba:	611a      	str	r2, [r3, #16]

  return;
 800b2bc:	bf00      	nop
}
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr
 800b2c8:	0800b465 	.word	0x0800b465
 800b2cc:	0800b4b9 	.word	0x0800b4b9

0800b2d0 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800b2d4:	f002 fa40 	bl	800d758 <HW_IPCC_Enable>

  return;
 800b2d8:	bf00      	nop
}
 800b2da:	bd80      	pop	{r7, pc}

0800b2dc <TL_Init>:


void TL_Init( void )
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800b2e0:	4b10      	ldr	r3, [pc, #64]	; (800b324 <TL_Init+0x48>)
 800b2e2:	4a11      	ldr	r2, [pc, #68]	; (800b328 <TL_Init+0x4c>)
 800b2e4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800b2e6:	4b0f      	ldr	r3, [pc, #60]	; (800b324 <TL_Init+0x48>)
 800b2e8:	4a10      	ldr	r2, [pc, #64]	; (800b32c <TL_Init+0x50>)
 800b2ea:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800b2ec:	4b0d      	ldr	r3, [pc, #52]	; (800b324 <TL_Init+0x48>)
 800b2ee:	4a10      	ldr	r2, [pc, #64]	; (800b330 <TL_Init+0x54>)
 800b2f0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800b2f2:	4b0c      	ldr	r3, [pc, #48]	; (800b324 <TL_Init+0x48>)
 800b2f4:	4a0f      	ldr	r2, [pc, #60]	; (800b334 <TL_Init+0x58>)
 800b2f6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800b2f8:	4b0a      	ldr	r3, [pc, #40]	; (800b324 <TL_Init+0x48>)
 800b2fa:	4a0f      	ldr	r2, [pc, #60]	; (800b338 <TL_Init+0x5c>)
 800b2fc:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800b2fe:	4b09      	ldr	r3, [pc, #36]	; (800b324 <TL_Init+0x48>)
 800b300:	4a0e      	ldr	r2, [pc, #56]	; (800b33c <TL_Init+0x60>)
 800b302:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800b304:	4b07      	ldr	r3, [pc, #28]	; (800b324 <TL_Init+0x48>)
 800b306:	4a0e      	ldr	r2, [pc, #56]	; (800b340 <TL_Init+0x64>)
 800b308:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800b30a:	4b06      	ldr	r3, [pc, #24]	; (800b324 <TL_Init+0x48>)
 800b30c:	4a0d      	ldr	r2, [pc, #52]	; (800b344 <TL_Init+0x68>)
 800b30e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800b310:	4b04      	ldr	r3, [pc, #16]	; (800b324 <TL_Init+0x48>)
 800b312:	4a0d      	ldr	r2, [pc, #52]	; (800b348 <TL_Init+0x6c>)
 800b314:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800b316:	4b03      	ldr	r3, [pc, #12]	; (800b324 <TL_Init+0x48>)
 800b318:	4a0c      	ldr	r2, [pc, #48]	; (800b34c <TL_Init+0x70>)
 800b31a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800b31c:	f002 fa30 	bl	800d780 <HW_IPCC_Init>

  return;
 800b320:	bf00      	nop
}
 800b322:	bd80      	pop	{r7, pc}
 800b324:	20030000 	.word	0x20030000
 800b328:	20030028 	.word	0x20030028
 800b32c:	20030048 	.word	0x20030048
 800b330:	20030058 	.word	0x20030058
 800b334:	20030068 	.word	0x20030068
 800b338:	20030070 	.word	0x20030070
 800b33c:	20030078 	.word	0x20030078
 800b340:	20030080 	.word	0x20030080
 800b344:	2003009c 	.word	0x2003009c
 800b348:	200300a0 	.word	0x200300a0
 800b34c:	200300ac 	.word	0x200300ac

0800b350 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800b35c:	4811      	ldr	r0, [pc, #68]	; (800b3a4 <TL_BLE_Init+0x54>)
 800b35e:	f000 fb05 	bl	800b96c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800b362:	4b11      	ldr	r3, [pc, #68]	; (800b3a8 <TL_BLE_Init+0x58>)
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	689a      	ldr	r2, [r3, #8]
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	68da      	ldr	r2, [r3, #12]
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	4a0c      	ldr	r2, [pc, #48]	; (800b3ac <TL_BLE_Init+0x5c>)
 800b37c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	4a08      	ldr	r2, [pc, #32]	; (800b3a4 <TL_BLE_Init+0x54>)
 800b382:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800b384:	f002 fa12 	bl	800d7ac <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a08      	ldr	r2, [pc, #32]	; (800b3b0 <TL_BLE_Init+0x60>)
 800b38e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	4a07      	ldr	r2, [pc, #28]	; (800b3b4 <TL_BLE_Init+0x64>)
 800b396:	6013      	str	r3, [r2, #0]

  return 0;
 800b398:	2300      	movs	r3, #0
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	200300c8 	.word	0x200300c8
 800b3a8:	20030000 	.word	0x20030000
 800b3ac:	20031244 	.word	0x20031244
 800b3b0:	200005b4 	.word	0x200005b4
 800b3b4:	200005b8 	.word	0x200005b8

0800b3b8 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b082      	sub	sp, #8
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800b3c4:	4b09      	ldr	r3, [pc, #36]	; (800b3ec <TL_BLE_SendCmd+0x34>)
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800b3ce:	4b07      	ldr	r3, [pc, #28]	; (800b3ec <TL_BLE_SendCmd+0x34>)
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	2001      	movs	r0, #1
 800b3d8:	f000 f96c 	bl	800b6b4 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800b3dc:	f002 f9f0 	bl	800d7c0 <HW_IPCC_BLE_SendCmd>

  return 0;
 800b3e0:	2300      	movs	r3, #0
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3708      	adds	r7, #8
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	20030000 	.word	0x20030000

0800b3f0 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800b3f6:	e01c      	b.n	800b432 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800b3f8:	1d3b      	adds	r3, r7, #4
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	4812      	ldr	r0, [pc, #72]	; (800b448 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b3fe:	f000 fb54 	bl	800baaa <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	7a5b      	ldrb	r3, [r3, #9]
 800b406:	2b0f      	cmp	r3, #15
 800b408:	d003      	beq.n	800b412 <HW_IPCC_BLE_RxEvtNot+0x22>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	7a5b      	ldrb	r3, [r3, #9]
 800b40e:	2b0e      	cmp	r3, #14
 800b410:	d105      	bne.n	800b41e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	4619      	mov	r1, r3
 800b416:	2002      	movs	r0, #2
 800b418:	f000 f94c 	bl	800b6b4 <OutputDbgTrace>
 800b41c:	e004      	b.n	800b428 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	4619      	mov	r1, r3
 800b422:	2003      	movs	r0, #3
 800b424:	f000 f946 	bl	800b6b4 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800b428:	4b08      	ldr	r3, [pc, #32]	; (800b44c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	4610      	mov	r0, r2
 800b430:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800b432:	4805      	ldr	r0, [pc, #20]	; (800b448 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b434:	f000 faaa 	bl	800b98c <LST_is_empty>
 800b438:	4603      	mov	r3, r0
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d0dc      	beq.n	800b3f8 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800b43e:	bf00      	nop
}
 800b440:	3708      	adds	r7, #8
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	200300c8 	.word	0x200300c8
 800b44c:	200005b4 	.word	0x200005b4

0800b450 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800b454:	4b02      	ldr	r3, [pc, #8]	; (800b460 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4798      	blx	r3

  return;
 800b45a:	bf00      	nop
}
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	200005b8 	.word	0x200005b8

0800b464 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800b470:	480d      	ldr	r0, [pc, #52]	; (800b4a8 <TL_SYS_Init+0x44>)
 800b472:	f000 fa7b 	bl	800b96c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800b476:	4b0d      	ldr	r3, [pc, #52]	; (800b4ac <TL_SYS_Init+0x48>)
 800b478:	68db      	ldr	r3, [r3, #12]
 800b47a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	689a      	ldr	r2, [r3, #8]
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	4a08      	ldr	r2, [pc, #32]	; (800b4a8 <TL_SYS_Init+0x44>)
 800b488:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800b48a:	f002 f9bb 	bl	800d804 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a07      	ldr	r2, [pc, #28]	; (800b4b0 <TL_SYS_Init+0x4c>)
 800b494:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	4a06      	ldr	r2, [pc, #24]	; (800b4b4 <TL_SYS_Init+0x50>)
 800b49c:	6013      	str	r3, [r2, #0]

  return 0;
 800b49e:	2300      	movs	r3, #0
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3710      	adds	r7, #16
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}
 800b4a8:	200300d0 	.word	0x200300d0
 800b4ac:	20030000 	.word	0x20030000
 800b4b0:	200005bc 	.word	0x200005bc
 800b4b4:	200005c0 	.word	0x200005c0

0800b4b8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800b4c4:	4b09      	ldr	r3, [pc, #36]	; (800b4ec <TL_SYS_SendCmd+0x34>)
 800b4c6:	68db      	ldr	r3, [r3, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2210      	movs	r2, #16
 800b4cc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800b4ce:	4b07      	ldr	r3, [pc, #28]	; (800b4ec <TL_SYS_SendCmd+0x34>)
 800b4d0:	68db      	ldr	r3, [r3, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	2004      	movs	r0, #4
 800b4d8:	f000 f8ec 	bl	800b6b4 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800b4dc:	f002 f99c 	bl	800d818 <HW_IPCC_SYS_SendCmd>

  return 0;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3708      	adds	r7, #8
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	20030000 	.word	0x20030000

0800b4f0 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b4f4:	4b07      	ldr	r3, [pc, #28]	; (800b514 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	2005      	movs	r0, #5
 800b4fe:	f000 f8d9 	bl	800b6b4 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b502:	4b05      	ldr	r3, [pc, #20]	; (800b518 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a03      	ldr	r2, [pc, #12]	; (800b514 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b508:	68d2      	ldr	r2, [r2, #12]
 800b50a:	6812      	ldr	r2, [r2, #0]
 800b50c:	4610      	mov	r0, r2
 800b50e:	4798      	blx	r3

  return;
 800b510:	bf00      	nop
}
 800b512:	bd80      	pop	{r7, pc}
 800b514:	20030000 	.word	0x20030000
 800b518:	200005bc 	.word	0x200005bc

0800b51c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b522:	e00e      	b.n	800b542 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800b524:	1d3b      	adds	r3, r7, #4
 800b526:	4619      	mov	r1, r3
 800b528:	480b      	ldr	r0, [pc, #44]	; (800b558 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b52a:	f000 fabe 	bl	800baaa <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4619      	mov	r1, r3
 800b532:	2006      	movs	r0, #6
 800b534:	f000 f8be 	bl	800b6b4 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800b538:	4b08      	ldr	r3, [pc, #32]	; (800b55c <HW_IPCC_SYS_EvtNot+0x40>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	687a      	ldr	r2, [r7, #4]
 800b53e:	4610      	mov	r0, r2
 800b540:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b542:	4805      	ldr	r0, [pc, #20]	; (800b558 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b544:	f000 fa22 	bl	800b98c <LST_is_empty>
 800b548:	4603      	mov	r3, r0
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d0ea      	beq.n	800b524 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800b54e:	bf00      	nop
}
 800b550:	3708      	adds	r7, #8
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	200300d0 	.word	0x200300d0
 800b55c:	200005c0 	.word	0x200005c0

0800b560 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800b568:	4817      	ldr	r0, [pc, #92]	; (800b5c8 <TL_MM_Init+0x68>)
 800b56a:	f000 f9ff 	bl	800b96c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800b56e:	4817      	ldr	r0, [pc, #92]	; (800b5cc <TL_MM_Init+0x6c>)
 800b570:	f000 f9fc 	bl	800b96c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800b574:	4b16      	ldr	r3, [pc, #88]	; (800b5d0 <TL_MM_Init+0x70>)
 800b576:	691b      	ldr	r3, [r3, #16]
 800b578:	4a16      	ldr	r2, [pc, #88]	; (800b5d4 <TL_MM_Init+0x74>)
 800b57a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800b57c:	4b15      	ldr	r3, [pc, #84]	; (800b5d4 <TL_MM_Init+0x74>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	6892      	ldr	r2, [r2, #8]
 800b584:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800b586:	4b13      	ldr	r3, [pc, #76]	; (800b5d4 <TL_MM_Init+0x74>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	68d2      	ldr	r2, [r2, #12]
 800b58e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800b590:	4b10      	ldr	r3, [pc, #64]	; (800b5d4 <TL_MM_Init+0x74>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a0c      	ldr	r2, [pc, #48]	; (800b5c8 <TL_MM_Init+0x68>)
 800b596:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800b598:	4b0e      	ldr	r3, [pc, #56]	; (800b5d4 <TL_MM_Init+0x74>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	687a      	ldr	r2, [r7, #4]
 800b59e:	6812      	ldr	r2, [r2, #0]
 800b5a0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800b5a2:	4b0c      	ldr	r3, [pc, #48]	; (800b5d4 <TL_MM_Init+0x74>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	6852      	ldr	r2, [r2, #4]
 800b5aa:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800b5ac:	4b09      	ldr	r3, [pc, #36]	; (800b5d4 <TL_MM_Init+0x74>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	6912      	ldr	r2, [r2, #16]
 800b5b4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800b5b6:	4b07      	ldr	r3, [pc, #28]	; (800b5d4 <TL_MM_Init+0x74>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	687a      	ldr	r2, [r7, #4]
 800b5bc:	6952      	ldr	r2, [r2, #20]
 800b5be:	619a      	str	r2, [r3, #24]

  return;
 800b5c0:	bf00      	nop
}
 800b5c2:	3708      	adds	r7, #8
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	200300b8 	.word	0x200300b8
 800b5cc:	200005ac 	.word	0x200005ac
 800b5d0:	20030000 	.word	0x20030000
 800b5d4:	200005c4 	.word	0x200005c4

0800b5d8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800b5e0:	6879      	ldr	r1, [r7, #4]
 800b5e2:	4807      	ldr	r0, [pc, #28]	; (800b600 <TL_MM_EvtDone+0x28>)
 800b5e4:	f000 fa1a 	bl	800ba1c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800b5e8:	6879      	ldr	r1, [r7, #4]
 800b5ea:	2000      	movs	r0, #0
 800b5ec:	f000 f862 	bl	800b6b4 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800b5f0:	4804      	ldr	r0, [pc, #16]	; (800b604 <TL_MM_EvtDone+0x2c>)
 800b5f2:	f002 f937 	bl	800d864 <HW_IPCC_MM_SendFreeBuf>

  return;
 800b5f6:	bf00      	nop
}
 800b5f8:	3708      	adds	r7, #8
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	200005ac 	.word	0x200005ac
 800b604:	0800b609 	.word	0x0800b609

0800b608 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b60e:	e00c      	b.n	800b62a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800b610:	1d3b      	adds	r3, r7, #4
 800b612:	4619      	mov	r1, r3
 800b614:	480a      	ldr	r0, [pc, #40]	; (800b640 <SendFreeBuf+0x38>)
 800b616:	f000 fa48 	bl	800baaa <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800b61a:	4b0a      	ldr	r3, [pc, #40]	; (800b644 <SendFreeBuf+0x3c>)
 800b61c:	691b      	ldr	r3, [r3, #16]
 800b61e:	691b      	ldr	r3, [r3, #16]
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	4611      	mov	r1, r2
 800b624:	4618      	mov	r0, r3
 800b626:	f000 f9f9 	bl	800ba1c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b62a:	4805      	ldr	r0, [pc, #20]	; (800b640 <SendFreeBuf+0x38>)
 800b62c:	f000 f9ae 	bl	800b98c <LST_is_empty>
 800b630:	4603      	mov	r3, r0
 800b632:	2b00      	cmp	r3, #0
 800b634:	d0ec      	beq.n	800b610 <SendFreeBuf+0x8>
  }

  return;
 800b636:	bf00      	nop
}
 800b638:	3708      	adds	r7, #8
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	200005ac 	.word	0x200005ac
 800b644:	20030000 	.word	0x20030000

0800b648 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800b64c:	4805      	ldr	r0, [pc, #20]	; (800b664 <TL_TRACES_Init+0x1c>)
 800b64e:	f000 f98d 	bl	800b96c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800b652:	4b05      	ldr	r3, [pc, #20]	; (800b668 <TL_TRACES_Init+0x20>)
 800b654:	695b      	ldr	r3, [r3, #20]
 800b656:	4a03      	ldr	r2, [pc, #12]	; (800b664 <TL_TRACES_Init+0x1c>)
 800b658:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800b65a:	f002 f939 	bl	800d8d0 <HW_IPCC_TRACES_Init>

  return;
 800b65e:	bf00      	nop
}
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	200300c0 	.word	0x200300c0
 800b668:	20030000 	.word	0x20030000

0800b66c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b672:	e008      	b.n	800b686 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800b674:	1d3b      	adds	r3, r7, #4
 800b676:	4619      	mov	r1, r3
 800b678:	4808      	ldr	r0, [pc, #32]	; (800b69c <HW_IPCC_TRACES_EvtNot+0x30>)
 800b67a:	f000 fa16 	bl	800baaa <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	4618      	mov	r0, r3
 800b682:	f000 f80d 	bl	800b6a0 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b686:	4805      	ldr	r0, [pc, #20]	; (800b69c <HW_IPCC_TRACES_EvtNot+0x30>)
 800b688:	f000 f980 	bl	800b98c <LST_is_empty>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d0f0      	beq.n	800b674 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800b692:	bf00      	nop
}
 800b694:	3708      	adds	r7, #8
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
 800b69a:	bf00      	nop
 800b69c:	200300c0 	.word	0x200300c0

0800b6a0 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800b6a8:	bf00      	nop
 800b6aa:	370c      	adds	r7, #12
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b085      	sub	sp, #20
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	6039      	str	r1, [r7, #0]
 800b6be:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800b6c0:	79fb      	ldrb	r3, [r7, #7]
 800b6c2:	2b06      	cmp	r3, #6
 800b6c4:	d845      	bhi.n	800b752 <OutputDbgTrace+0x9e>
 800b6c6:	a201      	add	r2, pc, #4	; (adr r2, 800b6cc <OutputDbgTrace+0x18>)
 800b6c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6cc:	0800b6e9 	.word	0x0800b6e9
 800b6d0:	0800b70d 	.word	0x0800b70d
 800b6d4:	0800b713 	.word	0x0800b713
 800b6d8:	0800b727 	.word	0x0800b727
 800b6dc:	0800b733 	.word	0x0800b733
 800b6e0:	0800b739 	.word	0x0800b739
 800b6e4:	0800b747 	.word	0x0800b747
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	7a5b      	ldrb	r3, [r3, #9]
 800b6f0:	2bff      	cmp	r3, #255	; 0xff
 800b6f2:	d005      	beq.n	800b700 <OutputDbgTrace+0x4c>
 800b6f4:	2bff      	cmp	r3, #255	; 0xff
 800b6f6:	dc05      	bgt.n	800b704 <OutputDbgTrace+0x50>
 800b6f8:	2b0e      	cmp	r3, #14
 800b6fa:	d005      	beq.n	800b708 <OutputDbgTrace+0x54>
 800b6fc:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800b6fe:	e001      	b.n	800b704 <OutputDbgTrace+0x50>
          break;
 800b700:	bf00      	nop
 800b702:	e027      	b.n	800b754 <OutputDbgTrace+0xa0>
          break;
 800b704:	bf00      	nop
 800b706:	e025      	b.n	800b754 <OutputDbgTrace+0xa0>
          break;
 800b708:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800b70a:	e023      	b.n	800b754 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b710:	e020      	b.n	800b754 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	7a5b      	ldrb	r3, [r3, #9]
 800b71a:	2b0e      	cmp	r3, #14
 800b71c:	d001      	beq.n	800b722 <OutputDbgTrace+0x6e>
 800b71e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b720:	e000      	b.n	800b724 <OutputDbgTrace+0x70>
          break;
 800b722:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b724:	e016      	b.n	800b754 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	7a5b      	ldrb	r3, [r3, #9]
 800b72e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b730:	e010      	b.n	800b754 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b736:	e00d      	b.n	800b754 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	7a5b      	ldrb	r3, [r3, #9]
 800b740:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b742:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b744:	e006      	b.n	800b754 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	7a5b      	ldrb	r3, [r3, #9]
 800b74e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b750:	e000      	b.n	800b754 <OutputDbgTrace+0xa0>

    default:
      break;
 800b752:	bf00      	nop
  }

  return;
 800b754:	bf00      	nop
}
 800b756:	3714      	adds	r7, #20
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 800b76c:	215c      	movs	r1, #92	; 0x5c
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f002 fd5c 	bl	800e22c <strrchr>
 800b774:	4603      	mov	r3, r0
 800b776:	2b00      	cmp	r3, #0
 800b778:	d007      	beq.n	800b78a <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800b77a:	215c      	movs	r1, #92	; 0x5c
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f002 fd55 	bl	800e22c <strrchr>
 800b782:	4603      	mov	r3, r0
 800b784:	3301      	adds	r3, #1
 800b786:	60fb      	str	r3, [r7, #12]
 800b788:	e00d      	b.n	800b7a6 <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800b78a:	212f      	movs	r1, #47	; 0x2f
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f002 fd4d 	bl	800e22c <strrchr>
 800b792:	4603      	mov	r3, r0
 800b794:	2b00      	cmp	r3, #0
 800b796:	d006      	beq.n	800b7a6 <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800b798:	212f      	movs	r1, #47	; 0x2f
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f002 fd46 	bl	800e22c <strrchr>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3710      	adds	r7, #16
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b086      	sub	sp, #24
 800b7b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7b6:	f3ef 8310 	mrs	r3, PRIMASK
 800b7ba:	60fb      	str	r3, [r7, #12]
  return(result);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800b7be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b7c0:	b672      	cpsid	i
}
 800b7c2:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800b7c4:	1cbb      	adds	r3, r7, #2
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	4812      	ldr	r0, [pc, #72]	; (800b814 <DbgTrace_TxCpltCallback+0x64>)
 800b7ca:	f000 fbe6 	bl	800bf9a <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800b7ce:	1cbb      	adds	r3, r7, #2
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	4810      	ldr	r0, [pc, #64]	; (800b814 <DbgTrace_TxCpltCallback+0x64>)
 800b7d4:	f000 fcd2 	bl	800c17c <CircularQueue_Sense>
 800b7d8:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d00c      	beq.n	800b7fa <DbgTrace_TxCpltCallback+0x4a>
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	f383 8810 	msr	PRIMASK, r3
}
 800b7ea:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800b7ec:	887b      	ldrh	r3, [r7, #2]
 800b7ee:	4a0a      	ldr	r2, [pc, #40]	; (800b818 <DbgTrace_TxCpltCallback+0x68>)
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	6938      	ldr	r0, [r7, #16]
 800b7f4:	f7f5 faa7 	bl	8000d46 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800b7f8:	e008      	b.n	800b80c <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800b7fa:	4b08      	ldr	r3, [pc, #32]	; (800b81c <DbgTrace_TxCpltCallback+0x6c>)
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	701a      	strb	r2, [r3, #0]
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f383 8810 	msr	PRIMASK, r3
}
 800b80a:	bf00      	nop
}
 800b80c:	bf00      	nop
 800b80e:	3718      	adds	r7, #24
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	200005c8 	.word	0x200005c8
 800b818:	0800b7b1 	.word	0x0800b7b1
 800b81c:	20000018 	.word	0x20000018

0800b820 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800b826:	f7f5 fa88 	bl	8000d3a <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800b82a:	2302      	movs	r3, #2
 800b82c:	9300      	str	r3, [sp, #0]
 800b82e:	2300      	movs	r3, #0
 800b830:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b834:	4903      	ldr	r1, [pc, #12]	; (800b844 <DbgTraceInit+0x24>)
 800b836:	4804      	ldr	r0, [pc, #16]	; (800b848 <DbgTraceInit+0x28>)
 800b838:	f000 f956 	bl	800bae8 <CircularQueue_Init>
#endif 
#endif
  return;
 800b83c:	bf00      	nop
}
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	200005e8 	.word	0x200005e8
 800b848:	200005c8 	.word	0x200005c8

0800b84c <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b084      	sub	sp, #16
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	68b9      	ldr	r1, [r7, #8]
 800b85c:	68f8      	ldr	r0, [r7, #12]
 800b85e:	f000 f805 	bl	800b86c <DbgTraceWrite>
 800b862:	4603      	mov	r3, r0
}
 800b864:	4618      	mov	r0, r3
 800b866:	3710      	adds	r7, #16
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b08a      	sub	sp, #40	; 0x28
 800b870:	af00      	add	r7, sp, #0
 800b872:	60f8      	str	r0, [r7, #12]
 800b874:	60b9      	str	r1, [r7, #8]
 800b876:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800b878:	2300      	movs	r3, #0
 800b87a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b87c:	f3ef 8310 	mrs	r3, PRIMASK
 800b880:	61bb      	str	r3, [r7, #24]
  return(result);
 800b882:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800b884:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b88c:	d102      	bne.n	800b894 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800b88e:	2300      	movs	r3, #0
 800b890:	627b      	str	r3, [r7, #36]	; 0x24
 800b892:	e037      	b.n	800b904 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2b01      	cmp	r3, #1
 800b898:	d006      	beq.n	800b8a8 <DbgTraceWrite+0x3c>
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2b02      	cmp	r3, #2
 800b89e:	d003      	beq.n	800b8a8 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800b8a0:	f04f 33ff 	mov.w	r3, #4294967295
 800b8a4:	627b      	str	r3, [r7, #36]	; 0x24
 800b8a6:	e02d      	b.n	800b904 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d02a      	beq.n	800b904 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800b8b2:	b672      	cpsid	i
}
 800b8b4:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	b29a      	uxth	r2, r3
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	68b9      	ldr	r1, [r7, #8]
 800b8be:	4814      	ldr	r0, [pc, #80]	; (800b910 <DbgTraceWrite+0xa4>)
 800b8c0:	f000 f944 	bl	800bb4c <CircularQueue_Add>
 800b8c4:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800b8c6:	69fb      	ldr	r3, [r7, #28]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d015      	beq.n	800b8f8 <DbgTraceWrite+0x8c>
 800b8cc:	4b11      	ldr	r3, [pc, #68]	; (800b914 <DbgTraceWrite+0xa8>)
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d010      	beq.n	800b8f8 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800b8d6:	4b0f      	ldr	r3, [pc, #60]	; (800b914 <DbgTraceWrite+0xa8>)
 800b8d8:	2200      	movs	r2, #0
 800b8da:	701a      	strb	r2, [r3, #0]
 800b8dc:	6a3b      	ldr	r3, [r7, #32]
 800b8de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	f383 8810 	msr	PRIMASK, r3
}
 800b8e6:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	4a0a      	ldr	r2, [pc, #40]	; (800b918 <DbgTraceWrite+0xac>)
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	69f8      	ldr	r0, [r7, #28]
 800b8f2:	f7f5 fa28 	bl	8000d46 <DbgOutputTraces>
 800b8f6:	e005      	b.n	800b904 <DbgTraceWrite+0x98>
 800b8f8:	6a3b      	ldr	r3, [r7, #32]
 800b8fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	f383 8810 	msr	PRIMASK, r3
}
 800b902:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800b904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b906:	4618      	mov	r0, r3
 800b908:	3728      	adds	r7, #40	; 0x28
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
 800b90e:	bf00      	nop
 800b910:	200005c8 	.word	0x200005c8
 800b914:	20000018 	.word	0x20000018
 800b918:	0800b7b1 	.word	0x0800b7b1

0800b91c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800b91c:	b480      	push	{r7}
 800b91e:	b085      	sub	sp, #20
 800b920:	af00      	add	r7, sp, #0
 800b922:	4603      	mov	r3, r0
 800b924:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800b926:	4b0f      	ldr	r3, [pc, #60]	; (800b964 <OTP_Read+0x48>)
 800b928:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b92a:	e002      	b.n	800b932 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	3b08      	subs	r3, #8
 800b930:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	3307      	adds	r3, #7
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	79fa      	ldrb	r2, [r7, #7]
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d003      	beq.n	800b946 <OTP_Read+0x2a>
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	4a09      	ldr	r2, [pc, #36]	; (800b968 <OTP_Read+0x4c>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d1f2      	bne.n	800b92c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	3307      	adds	r3, #7
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	79fa      	ldrb	r2, [r7, #7]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d001      	beq.n	800b956 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800b952:	2300      	movs	r3, #0
 800b954:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800b956:	68fb      	ldr	r3, [r7, #12]
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3714      	adds	r7, #20
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr
 800b964:	1fff73f8 	.word	0x1fff73f8
 800b968:	1fff7000 	.word	0x1fff7000

0800b96c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b083      	sub	sp, #12
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	605a      	str	r2, [r3, #4]
}
 800b980:	bf00      	nop
 800b982:	370c      	adds	r7, #12
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b087      	sub	sp, #28
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b994:	f3ef 8310 	mrs	r3, PRIMASK
 800b998:	60fb      	str	r3, [r7, #12]
  return(result);
 800b99a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b99c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b99e:	b672      	cpsid	i
}
 800b9a0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d102      	bne.n	800b9b2 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	75fb      	strb	r3, [r7, #23]
 800b9b0:	e001      	b.n	800b9b6 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	75fb      	strb	r3, [r7, #23]
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	f383 8810 	msr	PRIMASK, r3
}
 800b9c0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800b9c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	371c      	adds	r7, #28
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr

0800b9d0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b087      	sub	sp, #28
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9da:	f3ef 8310 	mrs	r3, PRIMASK
 800b9de:	60fb      	str	r3, [r7, #12]
  return(result);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b9e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b9e4:	b672      	cpsid	i
}
 800b9e6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681a      	ldr	r2, [r3, #0]
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	683a      	ldr	r2, [r7, #0]
 800b9fa:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	683a      	ldr	r2, [r7, #0]
 800ba02:	605a      	str	r2, [r3, #4]
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	f383 8810 	msr	PRIMASK, r3
}
 800ba0e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ba10:	bf00      	nop
 800ba12:	371c      	adds	r7, #28
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr

0800ba1c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b087      	sub	sp, #28
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba26:	f3ef 8310 	mrs	r3, PRIMASK
 800ba2a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ba2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba30:	b672      	cpsid	i
}
 800ba32:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	687a      	ldr	r2, [r7, #4]
 800ba38:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	685a      	ldr	r2, [r3, #4]
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	683a      	ldr	r2, [r7, #0]
 800ba46:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	683a      	ldr	r2, [r7, #0]
 800ba4e:	601a      	str	r2, [r3, #0]
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	f383 8810 	msr	PRIMASK, r3
}
 800ba5a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ba5c:	bf00      	nop
 800ba5e:	371c      	adds	r7, #28
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr

0800ba68 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b087      	sub	sp, #28
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba70:	f3ef 8310 	mrs	r3, PRIMASK
 800ba74:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba76:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ba78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba7a:	b672      	cpsid	i
}
 800ba7c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	6812      	ldr	r2, [r2, #0]
 800ba86:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	6852      	ldr	r2, [r2, #4]
 800ba90:	605a      	str	r2, [r3, #4]
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	f383 8810 	msr	PRIMASK, r3
}
 800ba9c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ba9e:	bf00      	nop
 800baa0:	371c      	adds	r7, #28
 800baa2:	46bd      	mov	sp, r7
 800baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa8:	4770      	bx	lr

0800baaa <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800baaa:	b580      	push	{r7, lr}
 800baac:	b086      	sub	sp, #24
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
 800bab2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bab4:	f3ef 8310 	mrs	r3, PRIMASK
 800bab8:	60fb      	str	r3, [r7, #12]
  return(result);
 800baba:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800babc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800babe:	b672      	cpsid	i
}
 800bac0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	4618      	mov	r0, r3
 800bad0:	f7ff ffca 	bl	800ba68 <LST_remove_node>
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	f383 8810 	msr	PRIMASK, r3
}
 800bade:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bae0:	bf00      	nop
 800bae2:	3718      	adds	r7, #24
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800bae8:	b480      	push	{r7}
 800baea:	b085      	sub	sp, #20
 800baec:	af00      	add	r7, sp, #0
 800baee:	60f8      	str	r0, [r7, #12]
 800baf0:	60b9      	str	r1, [r7, #8]
 800baf2:	607a      	str	r2, [r7, #4]
 800baf4:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	68ba      	ldr	r2, [r7, #8]
 800bafa:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2200      	movs	r2, #0
 800bb00:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2200      	movs	r2, #0
 800bb06:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2200      	movs	r2, #0
 800bb12:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	887a      	ldrh	r2, [r7, #2]
 800bb1e:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	7e3a      	ldrb	r2, [r7, #24]
 800bb24:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800bb26:	7e3b      	ldrb	r3, [r7, #24]
 800bb28:	f003 0302 	and.w	r3, r3, #2
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d006      	beq.n	800bb3e <CircularQueue_Init+0x56>
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	891b      	ldrh	r3, [r3, #8]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d002      	beq.n	800bb3e <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800bb38:	f04f 33ff 	mov.w	r3, #4294967295
 800bb3c:	e000      	b.n	800bb40 <CircularQueue_Init+0x58>
  }
  return 0;
 800bb3e:	2300      	movs	r3, #0
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3714      	adds	r7, #20
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b08e      	sub	sp, #56	; 0x38
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	603b      	str	r3, [r7, #0]
 800bb58:	4613      	mov	r3, r2
 800bb5a:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800bb60:	2300      	movs	r3, #0
 800bb62:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800bb64:	2300      	movs	r3, #0
 800bb66:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800bb68:	2300      	movs	r3, #0
 800bb6a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800bb70:	2300      	movs	r3, #0
 800bb72:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800bb74:	2300      	movs	r3, #0
 800bb76:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	891b      	ldrh	r3, [r3, #8]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d101      	bne.n	800bb84 <CircularQueue_Add+0x38>
 800bb80:	2302      	movs	r3, #2
 800bb82:	e000      	b.n	800bb86 <CircularQueue_Add+0x3a>
 800bb84:	2300      	movs	r3, #0
 800bb86:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	695b      	ldr	r3, [r3, #20]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d02a      	beq.n	800bbe6 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	891b      	ldrh	r3, [r3, #8]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d123      	bne.n	800bbe0 <CircularQueue_Add+0x94>
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	691b      	ldr	r3, [r3, #16]
 800bba0:	4413      	add	r3, r2
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	b29a      	uxth	r2, r3
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	6819      	ldr	r1, [r3, #0]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	691b      	ldr	r3, [r3, #16]
 800bbae:	1c58      	adds	r0, r3, #1
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	4298      	cmp	r0, r3
 800bbb6:	d306      	bcc.n	800bbc6 <CircularQueue_Add+0x7a>
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6918      	ldr	r0, [r3, #16]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	1ac3      	subs	r3, r0, r3
 800bbc2:	3301      	adds	r3, #1
 800bbc4:	e002      	b.n	800bbcc <CircularQueue_Add+0x80>
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	691b      	ldr	r3, [r3, #16]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	440b      	add	r3, r1
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	021b      	lsls	r3, r3, #8
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	4413      	add	r3, r2
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	3302      	adds	r3, #2
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	e001      	b.n	800bbe4 <CircularQueue_Add+0x98>
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	891b      	ldrh	r3, [r3, #8]
 800bbe4:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	891b      	ldrh	r3, [r3, #8]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d002      	beq.n	800bbf4 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	891b      	ldrh	r3, [r3, #8]
 800bbf2:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	691a      	ldr	r2, [r3, #16]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	68db      	ldr	r3, [r3, #12]
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d307      	bcc.n	800bc10 <CircularQueue_Add+0xc4>
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	685a      	ldr	r2, [r3, #4]
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	6919      	ldr	r1, [r3, #16]
 800bc08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bc0a:	440b      	add	r3, r1
 800bc0c:	1ad3      	subs	r3, r2, r3
 800bc0e:	e000      	b.n	800bc12 <CircularQueue_Add+0xc6>
 800bc10:	2300      	movs	r3, #0
 800bc12:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800bc14:	88fa      	ldrh	r2, [r7, #6]
 800bc16:	7ffb      	ldrb	r3, [r7, #31]
 800bc18:	4413      	add	r3, r2
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	fb02 f303 	mul.w	r3, r2, r3
 800bc22:	69ba      	ldr	r2, [r7, #24]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d80b      	bhi.n	800bc40 <CircularQueue_Add+0xf4>
 800bc28:	88fa      	ldrh	r2, [r7, #6]
 800bc2a:	7ffb      	ldrb	r3, [r7, #31]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	461a      	mov	r2, r3
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc36:	fb01 f202 	mul.w	r2, r1, r2
 800bc3a:	1a9b      	subs	r3, r3, r2
 800bc3c:	b2db      	uxtb	r3, r3
 800bc3e:	e000      	b.n	800bc42 <CircularQueue_Add+0xf6>
 800bc40:	2300      	movs	r3, #0
 800bc42:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800bc44:	7dfa      	ldrb	r2, [r7, #23]
 800bc46:	7ffb      	ldrb	r3, [r7, #31]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	bf8c      	ite	hi
 800bc4c:	2301      	movhi	r3, #1
 800bc4e:	2300      	movls	r3, #0
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800bc54:	7fbb      	ldrb	r3, [r7, #30]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d008      	beq.n	800bc6c <CircularQueue_Add+0x120>
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	7f1b      	ldrb	r3, [r3, #28]
 800bc5e:	f003 0301 	and.w	r3, r3, #1
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d002      	beq.n	800bc6c <CircularQueue_Add+0x120>
 800bc66:	7dfb      	ldrb	r3, [r7, #23]
 800bc68:	b29b      	uxth	r3, r3
 800bc6a:	e000      	b.n	800bc6e <CircularQueue_Add+0x122>
 800bc6c:	8bbb      	ldrh	r3, [r7, #28]
 800bc6e:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800bc70:	7fbb      	ldrb	r3, [r7, #30]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d008      	beq.n	800bc88 <CircularQueue_Add+0x13c>
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	7f1b      	ldrb	r3, [r3, #28]
 800bc7a:	f003 0302 	and.w	r3, r3, #2
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d002      	beq.n	800bc88 <CircularQueue_Add+0x13c>
 800bc82:	7ffb      	ldrb	r3, [r7, #31]
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	e000      	b.n	800bc8a <CircularQueue_Add+0x13e>
 800bc88:	8bbb      	ldrh	r3, [r7, #28]
 800bc8a:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800bc8c:	88fb      	ldrh	r3, [r7, #6]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	f000 817e 	beq.w	800bf90 <CircularQueue_Add+0x444>
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	695a      	ldr	r2, [r3, #20]
 800bc98:	88f9      	ldrh	r1, [r7, #6]
 800bc9a:	7ffb      	ldrb	r3, [r7, #31]
 800bc9c:	440b      	add	r3, r1
 800bc9e:	4619      	mov	r1, r3
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	fb01 f303 	mul.w	r3, r1, r3
 800bca6:	441a      	add	r2, r3
 800bca8:	8bbb      	ldrh	r3, [r7, #28]
 800bcaa:	441a      	add	r2, r3
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	f200 816d 	bhi.w	800bf90 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bcba:	e14a      	b.n	800bf52 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	691a      	ldr	r2, [r3, #16]
 800bcc0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bcc2:	441a      	add	r2, r3
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d307      	bcc.n	800bcdc <CircularQueue_Add+0x190>
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	691a      	ldr	r2, [r3, #16]
 800bcd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bcd2:	441a      	add	r2, r3
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	1ad3      	subs	r3, r2, r3
 800bcda:	e003      	b.n	800bce4 <CircularQueue_Add+0x198>
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	691a      	ldr	r2, [r3, #16]
 800bce0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bce2:	4413      	add	r3, r2
 800bce4:	68fa      	ldr	r2, [r7, #12]
 800bce6:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	691b      	ldr	r3, [r3, #16]
 800bcec:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	891b      	ldrh	r3, [r3, #8]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d130      	bne.n	800bd58 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfc:	1c59      	adds	r1, r3, #1
 800bcfe:	6339      	str	r1, [r7, #48]	; 0x30
 800bd00:	4413      	add	r3, r2
 800bd02:	88fa      	ldrh	r2, [r7, #6]
 800bd04:	b2d2      	uxtb	r2, r2
 800bd06:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d304      	bcc.n	800bd1c <CircularQueue_Add+0x1d0>
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd18:	1ad3      	subs	r3, r2, r3
 800bd1a:	e000      	b.n	800bd1e <CircularQueue_Add+0x1d2>
 800bd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1e:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800bd20:	88fb      	ldrh	r3, [r7, #6]
 800bd22:	0a1b      	lsrs	r3, r3, #8
 800bd24:	b298      	uxth	r0, r3
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681a      	ldr	r2, [r3, #0]
 800bd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2c:	1c59      	adds	r1, r3, #1
 800bd2e:	6339      	str	r1, [r7, #48]	; 0x30
 800bd30:	4413      	add	r3, r2
 800bd32:	b2c2      	uxtb	r2, r0
 800bd34:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d304      	bcc.n	800bd4a <CircularQueue_Add+0x1fe>
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	685b      	ldr	r3, [r3, #4]
 800bd44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd46:	1ad3      	subs	r3, r2, r3
 800bd48:	e000      	b.n	800bd4c <CircularQueue_Add+0x200>
 800bd4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4c:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	695b      	ldr	r3, [r3, #20]
 800bd52:	1c9a      	adds	r2, r3, #2
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800bd58:	88fa      	ldrh	r2, [r7, #6]
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	6859      	ldr	r1, [r3, #4]
 800bd5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd60:	1acb      	subs	r3, r1, r3
 800bd62:	4293      	cmp	r3, r2
 800bd64:	bf28      	it	cs
 800bd66:	4613      	movcs	r3, r2
 800bd68:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800bd6a:	88fb      	ldrh	r3, [r7, #6]
 800bd6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d007      	beq.n	800bd82 <CircularQueue_Add+0x236>
 800bd72:	88fb      	ldrh	r3, [r7, #6]
 800bd74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d225      	bcs.n	800bdc6 <CircularQueue_Add+0x27a>
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	7f1b      	ldrb	r3, [r3, #28]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d121      	bne.n	800bdc6 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681a      	ldr	r2, [r3, #0]
 800bd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd88:	18d0      	adds	r0, r2, r3
 800bd8a:	88fb      	ldrh	r3, [r7, #6]
 800bd8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd8e:	fb02 f303 	mul.w	r3, r2, r3
 800bd92:	68ba      	ldr	r2, [r7, #8]
 800bd94:	4413      	add	r3, r2
 800bd96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd98:	4619      	mov	r1, r3
 800bd9a:	f002 fad2 	bl	800e342 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	695a      	ldr	r2, [r3, #20]
 800bda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda4:	441a      	add	r2, r3
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800bdaa:	2300      	movs	r3, #0
 800bdac:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800bdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb0:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800bdb2:	88fa      	ldrh	r2, [r7, #6]
 800bdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb6:	1ad3      	subs	r3, r2, r3
 800bdb8:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800bdba:	7ffb      	ldrb	r3, [r7, #31]
 800bdbc:	b29a      	uxth	r2, r3
 800bdbe:	88fb      	ldrh	r3, [r7, #6]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	86fb      	strh	r3, [r7, #54]	; 0x36
 800bdc4:	e0a4      	b.n	800bf10 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800bdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	f000 80a1 	beq.w	800bf10 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	7f1b      	ldrb	r3, [r3, #28]
 800bdd2:	f003 0301 	and.w	r3, r3, #1
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d03a      	beq.n	800be50 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	891b      	ldrh	r3, [r3, #8]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d10d      	bne.n	800bdfe <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde8:	3b02      	subs	r3, #2
 800bdea:	4413      	add	r3, r2
 800bdec:	22ff      	movs	r2, #255	; 0xff
 800bdee:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681a      	ldr	r2, [r3, #0]
 800bdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf6:	3b01      	subs	r3, #1
 800bdf8:	4413      	add	r3, r2
 800bdfa:	22ff      	movs	r2, #255	; 0xff
 800bdfc:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	695a      	ldr	r2, [r3, #20]
 800be02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be04:	441a      	add	r2, r3
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800be0a:	2300      	movs	r3, #0
 800be0c:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800be0e:	88fb      	ldrh	r3, [r7, #6]
 800be10:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800be12:	2300      	movs	r3, #0
 800be14:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	891b      	ldrh	r3, [r3, #8]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d16f      	bne.n	800befe <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681a      	ldr	r2, [r3, #0]
 800be22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be24:	1c59      	adds	r1, r3, #1
 800be26:	6339      	str	r1, [r7, #48]	; 0x30
 800be28:	4413      	add	r3, r2
 800be2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be2c:	b2d2      	uxtb	r2, r2
 800be2e:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800be30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be32:	0a18      	lsrs	r0, r3, #8
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681a      	ldr	r2, [r3, #0]
 800be38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3a:	1c59      	adds	r1, r3, #1
 800be3c:	6339      	str	r1, [r7, #48]	; 0x30
 800be3e:	4413      	add	r3, r2
 800be40:	b2c2      	uxtb	r2, r0
 800be42:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	695b      	ldr	r3, [r3, #20]
 800be48:	1c9a      	adds	r2, r3, #2
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	615a      	str	r2, [r3, #20]
 800be4e:	e056      	b.n	800befe <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	7f1b      	ldrb	r3, [r3, #28]
 800be54:	f003 0302 	and.w	r3, r3, #2
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d050      	beq.n	800befe <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	891b      	ldrh	r3, [r3, #8]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d14a      	bne.n	800befa <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681a      	ldr	r2, [r3, #0]
 800be68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6a:	3b02      	subs	r3, #2
 800be6c:	4413      	add	r3, r2
 800be6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be70:	b2d2      	uxtb	r2, r2
 800be72:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800be74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be76:	0a19      	lsrs	r1, r3, #8
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681a      	ldr	r2, [r3, #0]
 800be7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7e:	3b01      	subs	r3, #1
 800be80:	4413      	add	r3, r2
 800be82:	b2ca      	uxtb	r2, r1
 800be84:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681a      	ldr	r2, [r3, #0]
 800be8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8c:	18d0      	adds	r0, r2, r3
 800be8e:	88fb      	ldrh	r3, [r7, #6]
 800be90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be92:	fb02 f303 	mul.w	r3, r2, r3
 800be96:	68ba      	ldr	r2, [r7, #8]
 800be98:	4413      	add	r3, r2
 800be9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be9c:	4619      	mov	r1, r3
 800be9e:	f002 fa50 	bl	800e342 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	695a      	ldr	r2, [r3, #20]
 800bea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea8:	441a      	add	r2, r3
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800beae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb0:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800beb2:	88fa      	ldrh	r2, [r7, #6]
 800beb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb6:	1ad3      	subs	r3, r2, r3
 800beb8:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	699b      	ldr	r3, [r3, #24]
 800bebe:	1c5a      	adds	r2, r3, #1
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800bec4:	2300      	movs	r3, #0
 800bec6:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681a      	ldr	r2, [r3, #0]
 800becc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bece:	1c59      	adds	r1, r3, #1
 800bed0:	6339      	str	r1, [r7, #48]	; 0x30
 800bed2:	4413      	add	r3, r2
 800bed4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bed6:	b2d2      	uxtb	r2, r2
 800bed8:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800beda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bedc:	0a18      	lsrs	r0, r3, #8
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681a      	ldr	r2, [r3, #0]
 800bee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee4:	1c59      	adds	r1, r3, #1
 800bee6:	6339      	str	r1, [r7, #48]	; 0x30
 800bee8:	4413      	add	r3, r2
 800beea:	b2c2      	uxtb	r2, r0
 800beec:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	695b      	ldr	r3, [r3, #20]
 800bef2:	1c9a      	adds	r2, r3, #2
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	615a      	str	r2, [r3, #20]
 800bef8:	e001      	b.n	800befe <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800befa:	2300      	movs	r3, #0
 800befc:	e049      	b.n	800bf92 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800befe:	7ffb      	ldrb	r3, [r7, #31]
 800bf00:	b29a      	uxth	r2, r3
 800bf02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	4413      	add	r3, r2
 800bf08:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800bf10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d015      	beq.n	800bf42 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf1c:	18d0      	adds	r0, r2, r3
 800bf1e:	88fb      	ldrh	r3, [r7, #6]
 800bf20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf22:	fb03 f202 	mul.w	r2, r3, r2
 800bf26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf28:	4413      	add	r3, r2
 800bf2a:	68ba      	ldr	r2, [r7, #8]
 800bf2c:	4413      	add	r3, r2
 800bf2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf30:	4619      	mov	r1, r3
 800bf32:	f002 fa06 	bl	800e342 <memcpy>
        q->byteCount += NbBytesToCopy;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	695a      	ldr	r2, [r3, #20]
 800bf3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf3c:	441a      	add	r2, r3
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	699b      	ldr	r3, [r3, #24]
 800bf46:	1c5a      	adds	r2, r3, #1
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800bf4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4e:	3301      	adds	r3, #1
 800bf50:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	f4ff aeb0 	bcc.w	800bcbc <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	6919      	ldr	r1, [r3, #16]
 800bf64:	7ffb      	ldrb	r3, [r7, #31]
 800bf66:	4419      	add	r1, r3
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	4299      	cmp	r1, r3
 800bf6e:	d307      	bcc.n	800bf80 <CircularQueue_Add+0x434>
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6919      	ldr	r1, [r3, #16]
 800bf74:	7ffb      	ldrb	r3, [r7, #31]
 800bf76:	4419      	add	r1, r3
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	1acb      	subs	r3, r1, r3
 800bf7e:	e003      	b.n	800bf88 <CircularQueue_Add+0x43c>
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	6919      	ldr	r1, [r3, #16]
 800bf84:	7ffb      	ldrb	r3, [r7, #31]
 800bf86:	440b      	add	r3, r1
 800bf88:	4413      	add	r3, r2
 800bf8a:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800bf8c:	6a3b      	ldr	r3, [r7, #32]
 800bf8e:	e000      	b.n	800bf92 <CircularQueue_Add+0x446>
    return NULL;
 800bf90:	2300      	movs	r3, #0
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3738      	adds	r7, #56	; 0x38
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}

0800bf9a <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800bf9a:	b480      	push	{r7}
 800bf9c:	b085      	sub	sp, #20
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
 800bfa2:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	891b      	ldrh	r3, [r3, #8]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d101      	bne.n	800bfb8 <CircularQueue_Remove+0x1e>
 800bfb4:	2302      	movs	r3, #2
 800bfb6:	e000      	b.n	800bfba <CircularQueue_Remove+0x20>
 800bfb8:	2300      	movs	r3, #0
 800bfba:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	695b      	ldr	r3, [r3, #20]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	f000 80cc 	beq.w	800c162 <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	891b      	ldrh	r3, [r3, #8]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d121      	bne.n	800c016 <CircularQueue_Remove+0x7c>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681a      	ldr	r2, [r3, #0]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	68db      	ldr	r3, [r3, #12]
 800bfda:	4413      	add	r3, r2
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	b29a      	uxth	r2, r3
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6819      	ldr	r1, [r3, #0]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	68db      	ldr	r3, [r3, #12]
 800bfe8:	1c58      	adds	r0, r3, #1
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	685b      	ldr	r3, [r3, #4]
 800bfee:	4298      	cmp	r0, r3
 800bff0:	d306      	bcc.n	800c000 <CircularQueue_Remove+0x66>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	68d8      	ldr	r0, [r3, #12]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	1ac3      	subs	r3, r0, r3
 800bffc:	3301      	adds	r3, #1
 800bffe:	e002      	b.n	800c006 <CircularQueue_Remove+0x6c>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	68db      	ldr	r3, [r3, #12]
 800c004:	3301      	adds	r3, #1
 800c006:	440b      	add	r3, r1
 800c008:	781b      	ldrb	r3, [r3, #0]
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	021b      	lsls	r3, r3, #8
 800c00e:	b29b      	uxth	r3, r3
 800c010:	4413      	add	r3, r2
 800c012:	b29b      	uxth	r3, r3
 800c014:	e001      	b.n	800c01a <CircularQueue_Remove+0x80>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	891b      	ldrh	r3, [r3, #8]
 800c01a:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	7f1b      	ldrb	r3, [r3, #28]
 800c020:	f003 0301 	and.w	r3, r3, #1
 800c024:	2b00      	cmp	r3, #0
 800c026:	d057      	beq.n	800c0d8 <CircularQueue_Remove+0x13e>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	7f1b      	ldrb	r3, [r3, #28]
 800c02c:	f003 0302 	and.w	r3, r3, #2
 800c030:	2b00      	cmp	r3, #0
 800c032:	d151      	bne.n	800c0d8 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c034:	897b      	ldrh	r3, [r7, #10]
 800c036:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d103      	bne.n	800c046 <CircularQueue_Remove+0xac>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	891b      	ldrh	r3, [r3, #8]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d012      	beq.n	800c06c <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	68da      	ldr	r2, [r3, #12]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c04e:	429a      	cmp	r2, r3
 800c050:	d942      	bls.n	800c0d8 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	891b      	ldrh	r3, [r3, #8]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d03e      	beq.n	800c0d8 <CircularQueue_Remove+0x13e>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	685a      	ldr	r2, [r3, #4]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	68db      	ldr	r3, [r3, #12]
 800c062:	1ad3      	subs	r3, r2, r3
 800c064:	687a      	ldr	r2, [r7, #4]
 800c066:	8912      	ldrh	r2, [r2, #8]
 800c068:	4293      	cmp	r3, r2
 800c06a:	d235      	bcs.n	800c0d8 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	695a      	ldr	r2, [r3, #20]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	68d9      	ldr	r1, [r3, #12]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	1acb      	subs	r3, r1, r3
 800c07a:	441a      	add	r2, r3
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2200      	movs	r2, #0
 800c084:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	891b      	ldrh	r3, [r3, #8]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d121      	bne.n	800c0d2 <CircularQueue_Remove+0x138>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	68db      	ldr	r3, [r3, #12]
 800c096:	4413      	add	r3, r2
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	b29a      	uxth	r2, r3
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6819      	ldr	r1, [r3, #0]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	68db      	ldr	r3, [r3, #12]
 800c0a4:	1c58      	adds	r0, r3, #1
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	4298      	cmp	r0, r3
 800c0ac:	d306      	bcc.n	800c0bc <CircularQueue_Remove+0x122>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	68d8      	ldr	r0, [r3, #12]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	1ac3      	subs	r3, r0, r3
 800c0b8:	3301      	adds	r3, #1
 800c0ba:	e002      	b.n	800c0c2 <CircularQueue_Remove+0x128>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	68db      	ldr	r3, [r3, #12]
 800c0c0:	3301      	adds	r3, #1
 800c0c2:	440b      	add	r3, r1
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	021b      	lsls	r3, r3, #8
 800c0ca:	b29b      	uxth	r3, r3
 800c0cc:	4413      	add	r3, r2
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	e001      	b.n	800c0d6 <CircularQueue_Remove+0x13c>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	891b      	ldrh	r3, [r3, #8]
 800c0d6:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681a      	ldr	r2, [r3, #0]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	68d9      	ldr	r1, [r3, #12]
 800c0e0:	7a7b      	ldrb	r3, [r7, #9]
 800c0e2:	4419      	add	r1, r3
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	4299      	cmp	r1, r3
 800c0ea:	d307      	bcc.n	800c0fc <CircularQueue_Remove+0x162>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	68d9      	ldr	r1, [r3, #12]
 800c0f0:	7a7b      	ldrb	r3, [r7, #9]
 800c0f2:	4419      	add	r1, r3
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	1acb      	subs	r3, r1, r3
 800c0fa:	e003      	b.n	800c104 <CircularQueue_Remove+0x16a>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	68d9      	ldr	r1, [r3, #12]
 800c100:	7a7b      	ldrb	r3, [r7, #9]
 800c102:	440b      	add	r3, r1
 800c104:	4413      	add	r3, r2
 800c106:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	695b      	ldr	r3, [r3, #20]
 800c10c:	8979      	ldrh	r1, [r7, #10]
 800c10e:	7a7a      	ldrb	r2, [r7, #9]
 800c110:	440a      	add	r2, r1
 800c112:	1a9a      	subs	r2, r3, r2
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	695b      	ldr	r3, [r3, #20]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d01b      	beq.n	800c158 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	68da      	ldr	r2, [r3, #12]
 800c124:	897b      	ldrh	r3, [r7, #10]
 800c126:	441a      	add	r2, r3
 800c128:	7a7b      	ldrb	r3, [r7, #9]
 800c12a:	441a      	add	r2, r3
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	429a      	cmp	r2, r3
 800c132:	d309      	bcc.n	800c148 <CircularQueue_Remove+0x1ae>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	68da      	ldr	r2, [r3, #12]
 800c138:	897b      	ldrh	r3, [r7, #10]
 800c13a:	441a      	add	r2, r3
 800c13c:	7a7b      	ldrb	r3, [r7, #9]
 800c13e:	441a      	add	r2, r3
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	1ad3      	subs	r3, r2, r3
 800c146:	e005      	b.n	800c154 <CircularQueue_Remove+0x1ba>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	68da      	ldr	r2, [r3, #12]
 800c14c:	897b      	ldrh	r3, [r7, #10]
 800c14e:	441a      	add	r2, r3
 800c150:	7a7b      	ldrb	r3, [r7, #9]
 800c152:	4413      	add	r3, r2
 800c154:	687a      	ldr	r2, [r7, #4]
 800c156:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	699b      	ldr	r3, [r3, #24]
 800c15c:	1e5a      	subs	r2, r3, #1
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d002      	beq.n	800c16e <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	897a      	ldrh	r2, [r7, #10]
 800c16c:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800c16e:	68fb      	ldr	r3, [r7, #12]
}
 800c170:	4618      	mov	r0, r3
 800c172:	3714      	adds	r7, #20
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr

0800c17c <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b087      	sub	sp, #28
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800c186:	2300      	movs	r3, #0
 800c188:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800c18a:	2300      	movs	r3, #0
 800c18c:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	891b      	ldrh	r3, [r3, #8]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d101      	bne.n	800c19a <CircularQueue_Sense+0x1e>
 800c196:	2302      	movs	r3, #2
 800c198:	e000      	b.n	800c19c <CircularQueue_Sense+0x20>
 800c19a:	2300      	movs	r3, #0
 800c19c:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	695b      	ldr	r3, [r3, #20]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	f000 8090 	beq.w	800c2d0 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	68db      	ldr	r3, [r3, #12]
 800c1b4:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	891b      	ldrh	r3, [r3, #8]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d121      	bne.n	800c202 <CircularQueue_Sense+0x86>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681a      	ldr	r2, [r3, #0]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	68db      	ldr	r3, [r3, #12]
 800c1c6:	4413      	add	r3, r2
 800c1c8:	781b      	ldrb	r3, [r3, #0]
 800c1ca:	b29a      	uxth	r2, r3
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6819      	ldr	r1, [r3, #0]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	68db      	ldr	r3, [r3, #12]
 800c1d4:	1c58      	adds	r0, r3, #1
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	685b      	ldr	r3, [r3, #4]
 800c1da:	4298      	cmp	r0, r3
 800c1dc:	d306      	bcc.n	800c1ec <CircularQueue_Sense+0x70>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	68d8      	ldr	r0, [r3, #12]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	685b      	ldr	r3, [r3, #4]
 800c1e6:	1ac3      	subs	r3, r0, r3
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	e002      	b.n	800c1f2 <CircularQueue_Sense+0x76>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	68db      	ldr	r3, [r3, #12]
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	440b      	add	r3, r1
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	021b      	lsls	r3, r3, #8
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	4413      	add	r3, r2
 800c1fe:	b29b      	uxth	r3, r3
 800c200:	e001      	b.n	800c206 <CircularQueue_Sense+0x8a>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	891b      	ldrh	r3, [r3, #8]
 800c206:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	7f1b      	ldrb	r3, [r3, #28]
 800c20c:	f003 0301 	and.w	r3, r3, #1
 800c210:	2b00      	cmp	r3, #0
 800c212:	d048      	beq.n	800c2a6 <CircularQueue_Sense+0x12a>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	7f1b      	ldrb	r3, [r3, #28]
 800c218:	f003 0302 	and.w	r3, r3, #2
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d142      	bne.n	800c2a6 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c220:	8a7b      	ldrh	r3, [r7, #18]
 800c222:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c226:	4293      	cmp	r3, r2
 800c228:	d103      	bne.n	800c232 <CircularQueue_Sense+0xb6>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	891b      	ldrh	r3, [r3, #8]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d012      	beq.n	800c258 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	68da      	ldr	r2, [r3, #12]
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d933      	bls.n	800c2a6 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	891b      	ldrh	r3, [r3, #8]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d02f      	beq.n	800c2a6 <CircularQueue_Sense+0x12a>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	685a      	ldr	r2, [r3, #4]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	1ad3      	subs	r3, r2, r3
 800c250:	687a      	ldr	r2, [r7, #4]
 800c252:	8912      	ldrh	r2, [r2, #8]
 800c254:	4293      	cmp	r3, r2
 800c256:	d226      	bcs.n	800c2a6 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800c258:	2300      	movs	r3, #0
 800c25a:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	891b      	ldrh	r3, [r3, #8]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d11d      	bne.n	800c2a0 <CircularQueue_Sense+0x124>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	4413      	add	r3, r2
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	b29a      	uxth	r2, r3
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6819      	ldr	r1, [r3, #0]
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	1c58      	adds	r0, r3, #1
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	4298      	cmp	r0, r3
 800c27e:	d305      	bcc.n	800c28c <CircularQueue_Sense+0x110>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	68f8      	ldr	r0, [r7, #12]
 800c286:	1ac3      	subs	r3, r0, r3
 800c288:	3301      	adds	r3, #1
 800c28a:	e001      	b.n	800c290 <CircularQueue_Sense+0x114>
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	3301      	adds	r3, #1
 800c290:	440b      	add	r3, r1
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	b29b      	uxth	r3, r3
 800c296:	021b      	lsls	r3, r3, #8
 800c298:	b29b      	uxth	r3, r3
 800c29a:	4413      	add	r3, r2
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	e001      	b.n	800c2a4 <CircularQueue_Sense+0x128>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	891b      	ldrh	r3, [r3, #8]
 800c2a4:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	7af9      	ldrb	r1, [r7, #11]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	4419      	add	r1, r3
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	4299      	cmp	r1, r3
 800c2b6:	d306      	bcc.n	800c2c6 <CircularQueue_Sense+0x14a>
 800c2b8:	7af9      	ldrb	r1, [r7, #11]
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	4419      	add	r1, r3
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	1acb      	subs	r3, r1, r3
 800c2c4:	e002      	b.n	800c2cc <CircularQueue_Sense+0x150>
 800c2c6:	7af9      	ldrb	r1, [r7, #11]
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	440b      	add	r3, r1
 800c2cc:	4413      	add	r3, r2
 800c2ce:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d002      	beq.n	800c2dc <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	8a7a      	ldrh	r2, [r7, #18]
 800c2da:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800c2dc:	697b      	ldr	r3, [r7, #20]
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	371c      	adds	r7, #28
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr
	...

0800c2ec <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800c2f0:	4b03      	ldr	r3, [pc, #12]	; (800c300 <LL_FLASH_GetUDN+0x14>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr
 800c2fe:	bf00      	nop
 800c300:	1fff7580 	.word	0x1fff7580

0800c304 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800c304:	b480      	push	{r7}
 800c306:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800c308:	4b03      	ldr	r3, [pc, #12]	; (800c318 <LL_FLASH_GetDeviceID+0x14>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	b2db      	uxtb	r3, r3
}
 800c30e:	4618      	mov	r0, r3
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr
 800c318:	1fff7584 	.word	0x1fff7584

0800c31c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800c31c:	b480      	push	{r7}
 800c31e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800c320:	4b03      	ldr	r3, [pc, #12]	; (800c330 <LL_FLASH_GetSTCompanyID+0x14>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	0a1b      	lsrs	r3, r3, #8
}
 800c326:	4618      	mov	r0, r3
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr
 800c330:	1fff7584 	.word	0x1fff7584

0800c334 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800c334:	b5b0      	push	{r4, r5, r7, lr}
 800c336:	b094      	sub	sp, #80	; 0x50
 800c338:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800c33a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c33e:	2200      	movs	r2, #0
 800c340:	601a      	str	r2, [r3, #0]
 800c342:	605a      	str	r2, [r3, #4]
 800c344:	609a      	str	r2, [r3, #8]
 800c346:	60da      	str	r2, [r3, #12]
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c348:	2392      	movs	r3, #146	; 0x92
 800c34a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800c34e:	4b55      	ldr	r3, [pc, #340]	; (800c4a4 <APP_BLE_Init+0x170>)
 800c350:	463c      	mov	r4, r7
 800c352:	461d      	mov	r5, r3
 800c354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c35a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c35c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c35e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c360:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c364:	c403      	stmia	r4!, {r0, r1}
 800c366:	8022      	strh	r2, [r4, #0]
     CFG_BLE_OPTIONS_EXT
    }
  };


  NVM_restore_SRAM_buffer();
 800c368:	f7f6 f9dc 	bl	8002724 <NVM_restore_SRAM_buffer>
  /* Enable all events Notification */
  config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800c36c:	230f      	movs	r3, #15
 800c36e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  config_param.Config1 = SHCI_C2_CONFIG_CONFIG1_BIT0_BLE_NVM_DATA_TO_SRAM;
 800c372:	2301      	movs	r3, #1
 800c374:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  config_param.BleNvmRamAddress = (uint32_t)Get_SRAM_buffer_address();
 800c378:	f7f6 fa8e 	bl	8002898 <Get_SRAM_buffer_address>
 800c37c:	4603      	mov	r3, r0
 800c37e:	643b      	str	r3, [r7, #64]	; 0x40
  config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT1_BLE_NVM_RAM_UPDATE_ENABLE;
 800c380:	2302      	movs	r3, #2
 800c382:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800c386:	f000 fb4b 	bl	800ca20 <Ble_Tl_Init>

  PrintNVM();
 800c38a:	f7f6 fa8f 	bl	80028ac <PrintNVM>

  status = SHCI_C2_Config(&config_param);
 800c38e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c392:	4618      	mov	r0, r3
 800c394:	f7fe fc04 	bl	800aba0 <SHCI_C2_Config>
 800c398:	4603      	mov	r3, r0
 800c39a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  if (status != SHCI_Success)
 800c39e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d001      	beq.n	800c3aa <APP_BLE_Init+0x76>
  {
    Error_Handler();
 800c3a6:	f7f6 f931 	bl	800260c <Error_Handler>
  }

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800c3aa:	2101      	movs	r1, #1
 800c3ac:	2002      	movs	r0, #2
 800c3ae:	f001 fab7 	bl	800d920 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800c3b2:	4a3d      	ldr	r2, [pc, #244]	; (800c4a8 <APP_BLE_Init+0x174>)
 800c3b4:	2100      	movs	r1, #0
 800c3b6:	2002      	movs	r0, #2
 800c3b8:	f001 fbde 	bl	800db78 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800c3bc:	463b      	mov	r3, r7
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7fe fb8e 	bl	800aae0 <SHCI_C2_BLE_Init>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  if (status != SHCI_Success)
 800c3ca:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d012      	beq.n	800c3f8 <APP_BLE_Init+0xc4>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800c3d2:	4836      	ldr	r0, [pc, #216]	; (800c4ac <APP_BLE_Init+0x178>)
 800c3d4:	f7ff f9c4 	bl	800b760 <DbgTraceGetFileName>
 800c3d8:	4601      	mov	r1, r0
 800c3da:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800c3de:	4a34      	ldr	r2, [pc, #208]	; (800c4b0 <APP_BLE_Init+0x17c>)
 800c3e0:	4834      	ldr	r0, [pc, #208]	; (800c4b4 <APP_BLE_Init+0x180>)
 800c3e2:	f001 fdcd 	bl	800df80 <iprintf>
 800c3e6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	4832      	ldr	r0, [pc, #200]	; (800c4b8 <APP_BLE_Init+0x184>)
 800c3ee:	f001 fdc7 	bl	800df80 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800c3f2:	f7f6 f90b 	bl	800260c <Error_Handler>
 800c3f6:	e00c      	b.n	800c412 <APP_BLE_Init+0xde>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800c3f8:	482c      	ldr	r0, [pc, #176]	; (800c4ac <APP_BLE_Init+0x178>)
 800c3fa:	f7ff f9b1 	bl	800b760 <DbgTraceGetFileName>
 800c3fe:	4601      	mov	r1, r0
 800c400:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800c404:	4a2a      	ldr	r2, [pc, #168]	; (800c4b0 <APP_BLE_Init+0x17c>)
 800c406:	482b      	ldr	r0, [pc, #172]	; (800c4b4 <APP_BLE_Init+0x180>)
 800c408:	f001 fdba 	bl	800df80 <iprintf>
 800c40c:	482b      	ldr	r0, [pc, #172]	; (800c4bc <APP_BLE_Init+0x188>)
 800c40e:	f001 fdb7 	bl	800df80 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800c412:	f000 fb1b 	bl	800ca4c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800c416:	f7fe fabd 	bl	800a994 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c41a:	4b29      	ldr	r3, [pc, #164]	; (800c4c0 <APP_BLE_Init+0x18c>)
 800c41c:	2200      	movs	r2, #0
 800c41e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800c422:	4b27      	ldr	r3, [pc, #156]	; (800c4c0 <APP_BLE_Init+0x18c>)
 800c424:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c428:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800c42a:	4a26      	ldr	r2, [pc, #152]	; (800c4c4 <APP_BLE_Init+0x190>)
 800c42c:	2100      	movs	r1, #0
 800c42e:	2001      	movs	r0, #1
 800c430:	f001 fba2 	bl	800db78 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800c434:	2006      	movs	r0, #6
 800c436:	f7fe f920 	bl	800a67a <aci_hal_set_radio_activity_mask>
 800c43a:	4603      	mov	r3, r0
 800c43c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  if (ret != BLE_STATUS_SUCCESS)
 800c440:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c444:	2b00      	cmp	r3, #0
 800c446:	d010      	beq.n	800c46a <APP_BLE_Init+0x136>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800c448:	4818      	ldr	r0, [pc, #96]	; (800c4ac <APP_BLE_Init+0x178>)
 800c44a:	f7ff f989 	bl	800b760 <DbgTraceGetFileName>
 800c44e:	4601      	mov	r1, r0
 800c450:	f44f 73c1 	mov.w	r3, #386	; 0x182
 800c454:	4a16      	ldr	r2, [pc, #88]	; (800c4b0 <APP_BLE_Init+0x17c>)
 800c456:	4817      	ldr	r0, [pc, #92]	; (800c4b4 <APP_BLE_Init+0x180>)
 800c458:	f001 fd92 	bl	800df80 <iprintf>
 800c45c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c460:	4619      	mov	r1, r3
 800c462:	4819      	ldr	r0, [pc, #100]	; (800c4c8 <APP_BLE_Init+0x194>)
 800c464:	f001 fd8c 	bl	800df80 <iprintf>
 800c468:	e00c      	b.n	800c484 <APP_BLE_Init+0x150>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800c46a:	4810      	ldr	r0, [pc, #64]	; (800c4ac <APP_BLE_Init+0x178>)
 800c46c:	f7ff f978 	bl	800b760 <DbgTraceGetFileName>
 800c470:	4601      	mov	r1, r0
 800c472:	f44f 73c3 	mov.w	r3, #390	; 0x186
 800c476:	4a0e      	ldr	r2, [pc, #56]	; (800c4b0 <APP_BLE_Init+0x17c>)
 800c478:	480e      	ldr	r0, [pc, #56]	; (800c4b4 <APP_BLE_Init+0x180>)
 800c47a:	f001 fd81 	bl	800df80 <iprintf>
 800c47e:	4813      	ldr	r0, [pc, #76]	; (800c4cc <APP_BLE_Init+0x198>)
 800c480:	f001 fd7e 	bl	800df80 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800c484:	f000 fef5 	bl	800d272 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800c488:	4b0d      	ldr	r3, [pc, #52]	; (800c4c0 <APP_BLE_Init+0x18c>)
 800c48a:	2200      	movs	r2, #0
 800c48c:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800c48e:	4b0c      	ldr	r3, [pc, #48]	; (800c4c0 <APP_BLE_Init+0x18c>)
 800c490:	2200      	movs	r2, #0
 800c492:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800c494:	2001      	movs	r0, #1
 800c496:	f000 fd6d 	bl	800cf74 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800c49a:	bf00      	nop
}
 800c49c:	3750      	adds	r7, #80	; 0x50
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bdb0      	pop	{r4, r5, r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	0800f364 	.word	0x0800f364
 800c4a8:	0800ad61 	.word	0x0800ad61
 800c4ac:	0800f258 	.word	0x0800f258
 800c4b0:	0801027c 	.word	0x0801027c
 800c4b4:	0800f274 	.word	0x0800f274
 800c4b8:	0800f288 	.word	0x0800f288
 800c4bc:	0800f2c0 	.word	0x0800f2c0
 800c4c0:	200015f0 	.word	0x200015f0
 800c4c4:	0800d0f9 	.word	0x0800d0f9
 800c4c8:	0800f2e8 	.word	0x0800f2e8
 800c4cc:	0800f32c 	.word	0x0800f32c

0800c4d0 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800c4d0:	b5b0      	push	{r4, r5, r7, lr}
 800c4d2:	b08e      	sub	sp, #56	; 0x38
 800c4d4:	af04      	add	r7, sp, #16
 800c4d6:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800c4d8:	2392      	movs	r3, #146	; 0x92
 800c4da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800c4e4:	6a3b      	ldr	r3, [r7, #32]
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	2bff      	cmp	r3, #255	; 0xff
 800c4ea:	f000 811d 	beq.w	800c728 <SVCCTL_App_Notification+0x258>
 800c4ee:	2bff      	cmp	r3, #255	; 0xff
 800c4f0:	f300 826d 	bgt.w	800c9ce <SVCCTL_App_Notification+0x4fe>
 800c4f4:	2b05      	cmp	r3, #5
 800c4f6:	d002      	beq.n	800c4fe <SVCCTL_App_Notification+0x2e>
 800c4f8:	2b3e      	cmp	r3, #62	; 0x3e
 800c4fa:	d042      	beq.n	800c582 <SVCCTL_App_Notification+0xb2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800c4fc:	e267      	b.n	800c9ce <SVCCTL_App_Notification+0x4fe>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800c4fe:	6a3b      	ldr	r3, [r7, #32]
 800c500:	3302      	adds	r3, #2
 800c502:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c50a:	b29a      	uxth	r2, r3
 800c50c:	4bb3      	ldr	r3, [pc, #716]	; (800c7dc <SVCCTL_App_Notification+0x30c>)
 800c50e:	8adb      	ldrh	r3, [r3, #22]
 800c510:	429a      	cmp	r2, r3
 800c512:	d128      	bne.n	800c566 <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800c514:	4bb1      	ldr	r3, [pc, #708]	; (800c7dc <SVCCTL_App_Notification+0x30c>)
 800c516:	2200      	movs	r2, #0
 800c518:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c51a:	4bb0      	ldr	r3, [pc, #704]	; (800c7dc <SVCCTL_App_Notification+0x30c>)
 800c51c:	2200      	movs	r2, #0
 800c51e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800c522:	48af      	ldr	r0, [pc, #700]	; (800c7e0 <SVCCTL_App_Notification+0x310>)
 800c524:	f7ff f91c 	bl	800b760 <DbgTraceGetFileName>
 800c528:	4601      	mov	r1, r0
 800c52a:	f44f 73e5 	mov.w	r3, #458	; 0x1ca
 800c52e:	4aad      	ldr	r2, [pc, #692]	; (800c7e4 <SVCCTL_App_Notification+0x314>)
 800c530:	48ad      	ldr	r0, [pc, #692]	; (800c7e8 <SVCCTL_App_Notification+0x318>)
 800c532:	f001 fd25 	bl	800df80 <iprintf>
 800c536:	48ad      	ldr	r0, [pc, #692]	; (800c7ec <SVCCTL_App_Notification+0x31c>)
 800c538:	f001 fd90 	bl	800e05c <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800c53c:	48a8      	ldr	r0, [pc, #672]	; (800c7e0 <SVCCTL_App_Notification+0x310>)
 800c53e:	f7ff f90f 	bl	800b760 <DbgTraceGetFileName>
 800c542:	4601      	mov	r1, r0
 800c544:	f240 13cb 	movw	r3, #459	; 0x1cb
 800c548:	4aa6      	ldr	r2, [pc, #664]	; (800c7e4 <SVCCTL_App_Notification+0x314>)
 800c54a:	48a7      	ldr	r0, [pc, #668]	; (800c7e8 <SVCCTL_App_Notification+0x318>)
 800c54c:	f001 fd18 	bl	800df80 <iprintf>
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c556:	b29b      	uxth	r3, r3
 800c558:	4619      	mov	r1, r3
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	78db      	ldrb	r3, [r3, #3]
 800c55e:	461a      	mov	r2, r3
 800c560:	48a3      	ldr	r0, [pc, #652]	; (800c7f0 <SVCCTL_App_Notification+0x320>)
 800c562:	f001 fd0d 	bl	800df80 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800c566:	2001      	movs	r0, #1
 800c568:	f000 fd04 	bl	800cf74 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800c56c:	4ba1      	ldr	r3, [pc, #644]	; (800c7f4 <SVCCTL_App_Notification+0x324>)
 800c56e:	2201      	movs	r2, #1
 800c570:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800c572:	4b9a      	ldr	r3, [pc, #616]	; (800c7dc <SVCCTL_App_Notification+0x30c>)
 800c574:	8ada      	ldrh	r2, [r3, #22]
 800c576:	4b9f      	ldr	r3, [pc, #636]	; (800c7f4 <SVCCTL_App_Notification+0x324>)
 800c578:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800c57a:	489e      	ldr	r0, [pc, #632]	; (800c7f4 <SVCCTL_App_Notification+0x324>)
 800c57c:	f000 fe65 	bl	800d24a <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800c580:	e228      	b.n	800c9d4 <SVCCTL_App_Notification+0x504>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800c582:	6a3b      	ldr	r3, [r7, #32]
 800c584:	3302      	adds	r3, #2
 800c586:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	d042      	beq.n	800c616 <SVCCTL_App_Notification+0x146>
 800c590:	2b03      	cmp	r3, #3
 800c592:	f040 80c7 	bne.w	800c724 <SVCCTL_App_Notification+0x254>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	3301      	adds	r3, #1
 800c59a:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800c59c:	4890      	ldr	r0, [pc, #576]	; (800c7e0 <SVCCTL_App_Notification+0x310>)
 800c59e:	f7ff f8df 	bl	800b760 <DbgTraceGetFileName>
 800c5a2:	4601      	mov	r1, r0
 800c5a4:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 800c5a8:	4a8e      	ldr	r2, [pc, #568]	; (800c7e4 <SVCCTL_App_Notification+0x314>)
 800c5aa:	488f      	ldr	r0, [pc, #572]	; (800c7e8 <SVCCTL_App_Notification+0x318>)
 800c5ac:	f001 fce8 	bl	800df80 <iprintf>
 800c5b0:	4891      	ldr	r0, [pc, #580]	; (800c7f8 <SVCCTL_App_Notification+0x328>)
 800c5b2:	f001 fd53 	bl	800e05c <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800c5b6:	488a      	ldr	r0, [pc, #552]	; (800c7e0 <SVCCTL_App_Notification+0x310>)
 800c5b8:	f7ff f8d2 	bl	800b760 <DbgTraceGetFileName>
 800c5bc:	4601      	mov	r1, r0
 800c5be:	f240 13f3 	movw	r3, #499	; 0x1f3
 800c5c2:	4a88      	ldr	r2, [pc, #544]	; (800c7e4 <SVCCTL_App_Notification+0x314>)
 800c5c4:	4888      	ldr	r0, [pc, #544]	; (800c7e8 <SVCCTL_App_Notification+0x318>)
 800c5c6:	f001 fcdb 	bl	800df80 <iprintf>
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7f4 f8a8 	bl	8000728 <__aeabi_i2d>
 800c5d8:	f04f 0200 	mov.w	r2, #0
 800c5dc:	4b87      	ldr	r3, [pc, #540]	; (800c7fc <SVCCTL_App_Notification+0x32c>)
 800c5de:	f7f3 fe27 	bl	8000230 <__aeabi_dmul>
 800c5e2:	4602      	mov	r2, r0
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	4610      	mov	r0, r2
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	461c      	mov	r4, r3
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	4613      	mov	r3, r2
 800c600:	009b      	lsls	r3, r3, #2
 800c602:	4413      	add	r3, r2
 800c604:	005b      	lsls	r3, r3, #1
 800c606:	9301      	str	r3, [sp, #4]
 800c608:	9400      	str	r4, [sp, #0]
 800c60a:	4602      	mov	r2, r0
 800c60c:	460b      	mov	r3, r1
 800c60e:	487c      	ldr	r0, [pc, #496]	; (800c800 <SVCCTL_App_Notification+0x330>)
 800c610:	f001 fcb6 	bl	800df80 <iprintf>
          break;
 800c614:	e087      	b.n	800c726 <SVCCTL_App_Notification+0x256>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	3301      	adds	r3, #1
 800c61a:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800c61c:	4870      	ldr	r0, [pc, #448]	; (800c7e0 <SVCCTL_App_Notification+0x310>)
 800c61e:	f7ff f89f 	bl	800b760 <DbgTraceGetFileName>
 800c622:	4601      	mov	r1, r0
 800c624:	f240 2305 	movw	r3, #517	; 0x205
 800c628:	4a6e      	ldr	r2, [pc, #440]	; (800c7e4 <SVCCTL_App_Notification+0x314>)
 800c62a:	486f      	ldr	r0, [pc, #444]	; (800c7e8 <SVCCTL_App_Notification+0x318>)
 800c62c:	f001 fca8 	bl	800df80 <iprintf>
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c636:	b29b      	uxth	r3, r3
 800c638:	4619      	mov	r1, r3
 800c63a:	4872      	ldr	r0, [pc, #456]	; (800c804 <SVCCTL_App_Notification+0x334>)
 800c63c:	f001 fca0 	bl	800df80 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800c640:	4867      	ldr	r0, [pc, #412]	; (800c7e0 <SVCCTL_App_Notification+0x310>)
 800c642:	f7ff f88d 	bl	800b760 <DbgTraceGetFileName>
 800c646:	4601      	mov	r1, r0
 800c648:	f240 2306 	movw	r3, #518	; 0x206
 800c64c:	4a65      	ldr	r2, [pc, #404]	; (800c7e4 <SVCCTL_App_Notification+0x314>)
 800c64e:	4866      	ldr	r0, [pc, #408]	; (800c7e8 <SVCCTL_App_Notification+0x318>)
 800c650:	f001 fc96 	bl	800df80 <iprintf>
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	7a9b      	ldrb	r3, [r3, #10]
 800c658:	4618      	mov	r0, r3
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	7a5b      	ldrb	r3, [r3, #9]
 800c65e:	461c      	mov	r4, r3
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	7a1b      	ldrb	r3, [r3, #8]
 800c664:	461d      	mov	r5, r3
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	79db      	ldrb	r3, [r3, #7]
 800c66a:	461a      	mov	r2, r3
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	799b      	ldrb	r3, [r3, #6]
 800c670:	4619      	mov	r1, r3
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	795b      	ldrb	r3, [r3, #5]
 800c676:	9302      	str	r3, [sp, #8]
 800c678:	9101      	str	r1, [sp, #4]
 800c67a:	9200      	str	r2, [sp, #0]
 800c67c:	462b      	mov	r3, r5
 800c67e:	4622      	mov	r2, r4
 800c680:	4601      	mov	r1, r0
 800c682:	4861      	ldr	r0, [pc, #388]	; (800c808 <SVCCTL_App_Notification+0x338>)
 800c684:	f001 fc7c 	bl	800df80 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800c688:	4855      	ldr	r0, [pc, #340]	; (800c7e0 <SVCCTL_App_Notification+0x310>)
 800c68a:	f7ff f869 	bl	800b760 <DbgTraceGetFileName>
 800c68e:	4601      	mov	r1, r0
 800c690:	f240 230d 	movw	r3, #525	; 0x20d
 800c694:	4a53      	ldr	r2, [pc, #332]	; (800c7e4 <SVCCTL_App_Notification+0x314>)
 800c696:	4854      	ldr	r0, [pc, #336]	; (800c7e8 <SVCCTL_App_Notification+0x318>)
 800c698:	f001 fc72 	bl	800df80 <iprintf>
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7f4 f83f 	bl	8000728 <__aeabi_i2d>
 800c6aa:	f04f 0200 	mov.w	r2, #0
 800c6ae:	4b53      	ldr	r3, [pc, #332]	; (800c7fc <SVCCTL_App_Notification+0x32c>)
 800c6b0:	f7f3 fdbe 	bl	8000230 <__aeabi_dmul>
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	4610      	mov	r0, r2
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	461c      	mov	r4, r3
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800c6cc:	b29b      	uxth	r3, r3
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	4613      	mov	r3, r2
 800c6d2:	009b      	lsls	r3, r3, #2
 800c6d4:	4413      	add	r3, r2
 800c6d6:	005b      	lsls	r3, r3, #1
 800c6d8:	9301      	str	r3, [sp, #4]
 800c6da:	9400      	str	r4, [sp, #0]
 800c6dc:	4602      	mov	r2, r0
 800c6de:	460b      	mov	r3, r1
 800c6e0:	4847      	ldr	r0, [pc, #284]	; (800c800 <SVCCTL_App_Notification+0x330>)
 800c6e2:	f001 fc4d 	bl	800df80 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800c6e6:	4b3d      	ldr	r3, [pc, #244]	; (800c7dc <SVCCTL_App_Notification+0x30c>)
 800c6e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c6ec:	2b04      	cmp	r3, #4
 800c6ee:	d104      	bne.n	800c6fa <SVCCTL_App_Notification+0x22a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800c6f0:	4b3a      	ldr	r3, [pc, #232]	; (800c7dc <SVCCTL_App_Notification+0x30c>)
 800c6f2:	2206      	movs	r2, #6
 800c6f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800c6f8:	e003      	b.n	800c702 <SVCCTL_App_Notification+0x232>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800c6fa:	4b38      	ldr	r3, [pc, #224]	; (800c7dc <SVCCTL_App_Notification+0x30c>)
 800c6fc:	2205      	movs	r2, #5
 800c6fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c708:	b29a      	uxth	r2, r3
 800c70a:	4b34      	ldr	r3, [pc, #208]	; (800c7dc <SVCCTL_App_Notification+0x30c>)
 800c70c:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800c70e:	4b39      	ldr	r3, [pc, #228]	; (800c7f4 <SVCCTL_App_Notification+0x324>)
 800c710:	2200      	movs	r2, #0
 800c712:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800c714:	4b31      	ldr	r3, [pc, #196]	; (800c7dc <SVCCTL_App_Notification+0x30c>)
 800c716:	8ada      	ldrh	r2, [r3, #22]
 800c718:	4b36      	ldr	r3, [pc, #216]	; (800c7f4 <SVCCTL_App_Notification+0x324>)
 800c71a:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800c71c:	4835      	ldr	r0, [pc, #212]	; (800c7f4 <SVCCTL_App_Notification+0x324>)
 800c71e:	f000 fd94 	bl	800d24a <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800c722:	e000      	b.n	800c726 <SVCCTL_App_Notification+0x256>
          break;
 800c724:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800c726:	e155      	b.n	800c9d4 <SVCCTL_App_Notification+0x504>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800c728:	6a3b      	ldr	r3, [r7, #32]
 800c72a:	3302      	adds	r3, #2
 800c72c:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800c72e:	69fb      	ldr	r3, [r7, #28]
 800c730:	881b      	ldrh	r3, [r3, #0]
 800c732:	b29b      	uxth	r3, r3
 800c734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c738:	f000 8147 	beq.w	800c9ca <SVCCTL_App_Notification+0x4fa>
 800c73c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c740:	f300 8147 	bgt.w	800c9d2 <SVCCTL_App_Notification+0x502>
 800c744:	2b04      	cmp	r3, #4
 800c746:	d035      	beq.n	800c7b4 <SVCCTL_App_Notification+0x2e4>
 800c748:	2b04      	cmp	r3, #4
 800c74a:	f2c0 8142 	blt.w	800c9d2 <SVCCTL_App_Notification+0x502>
 800c74e:	f240 420a 	movw	r2, #1034	; 0x40a
 800c752:	4293      	cmp	r3, r2
 800c754:	f300 813d 	bgt.w	800c9d2 <SVCCTL_App_Notification+0x502>
 800c758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c75c:	f340 8139 	ble.w	800c9d2 <SVCCTL_App_Notification+0x502>
 800c760:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800c764:	2b09      	cmp	r3, #9
 800c766:	f200 8134 	bhi.w	800c9d2 <SVCCTL_App_Notification+0x502>
 800c76a:	a201      	add	r2, pc, #4	; (adr r2, 800c770 <SVCCTL_App_Notification+0x2a0>)
 800c76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c770:	0800c945 	.word	0x0800c945
 800c774:	0800c819 	.word	0x0800c819
 800c778:	0800c9d3 	.word	0x0800c9d3
 800c77c:	0800c9d3 	.word	0x0800c9d3
 800c780:	0800c9d3 	.word	0x0800c9d3
 800c784:	0800c9d3 	.word	0x0800c9d3
 800c788:	0800c799 	.word	0x0800c799
 800c78c:	0800c9d3 	.word	0x0800c9d3
 800c790:	0800c88b 	.word	0x0800c88b
 800c794:	0800c7bf 	.word	0x0800c7bf
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800c798:	4811      	ldr	r0, [pc, #68]	; (800c7e0 <SVCCTL_App_Notification+0x310>)
 800c79a:	f7fe ffe1 	bl	800b760 <DbgTraceGetFileName>
 800c79e:	4601      	mov	r1, r0
 800c7a0:	f240 234f 	movw	r3, #591	; 0x24f
 800c7a4:	4a0f      	ldr	r2, [pc, #60]	; (800c7e4 <SVCCTL_App_Notification+0x314>)
 800c7a6:	4810      	ldr	r0, [pc, #64]	; (800c7e8 <SVCCTL_App_Notification+0x318>)
 800c7a8:	f001 fbea 	bl	800df80 <iprintf>
 800c7ac:	4817      	ldr	r0, [pc, #92]	; (800c80c <SVCCTL_App_Notification+0x33c>)
 800c7ae:	f001 fbe7 	bl	800df80 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800c7b2:	e10b      	b.n	800c9cc <SVCCTL_App_Notification+0x4fc>
        	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800c7b4:	2101      	movs	r1, #1
 800c7b6:	4816      	ldr	r0, [pc, #88]	; (800c810 <SVCCTL_App_Notification+0x340>)
 800c7b8:	f7f7 fca2 	bl	8004100 <HAL_GPIO_TogglePin>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800c7bc:	e106      	b.n	800c9cc <SVCCTL_App_Notification+0x4fc>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800c7be:	4808      	ldr	r0, [pc, #32]	; (800c7e0 <SVCCTL_App_Notification+0x310>)
 800c7c0:	f7fe ffce 	bl	800b760 <DbgTraceGetFileName>
 800c7c4:	4601      	mov	r1, r0
 800c7c6:	f240 235f 	movw	r3, #607	; 0x25f
 800c7ca:	4a06      	ldr	r2, [pc, #24]	; (800c7e4 <SVCCTL_App_Notification+0x314>)
 800c7cc:	4806      	ldr	r0, [pc, #24]	; (800c7e8 <SVCCTL_App_Notification+0x318>)
 800c7ce:	f001 fbd7 	bl	800df80 <iprintf>
 800c7d2:	4810      	ldr	r0, [pc, #64]	; (800c814 <SVCCTL_App_Notification+0x344>)
 800c7d4:	f001 fc42 	bl	800e05c <puts>
          break;
 800c7d8:	e0f8      	b.n	800c9cc <SVCCTL_App_Notification+0x4fc>
 800c7da:	bf00      	nop
 800c7dc:	200015f0 	.word	0x200015f0
 800c7e0:	0800f258 	.word	0x0800f258
 800c7e4:	0801028c 	.word	0x0801028c
 800c7e8:	0800f274 	.word	0x0800f274
 800c7ec:	0800f3a0 	.word	0x0800f3a0
 800c7f0:	0800f3cc 	.word	0x0800f3cc
 800c7f4:	20001674 	.word	0x20001674
 800c7f8:	0800f408 	.word	0x0800f408
 800c7fc:	3ff40000 	.word	0x3ff40000
 800c800:	0800f43c 	.word	0x0800f43c
 800c804:	0800f4a8 	.word	0x0800f4a8
 800c808:	0800f4f0 	.word	0x0800f4f0
 800c80c:	0800f540 	.word	0x0800f540
 800c810:	48000400 	.word	0x48000400
 800c814:	0800f568 	.word	0x0800f568
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800c818:	4871      	ldr	r0, [pc, #452]	; (800c9e0 <SVCCTL_App_Notification+0x510>)
 800c81a:	f7fe ffa1 	bl	800b760 <DbgTraceGetFileName>
 800c81e:	4601      	mov	r1, r0
 800c820:	f240 2366 	movw	r3, #614	; 0x266
 800c824:	4a6f      	ldr	r2, [pc, #444]	; (800c9e4 <SVCCTL_App_Notification+0x514>)
 800c826:	4870      	ldr	r0, [pc, #448]	; (800c9e8 <SVCCTL_App_Notification+0x518>)
 800c828:	f001 fbaa 	bl	800df80 <iprintf>
 800c82c:	486f      	ldr	r0, [pc, #444]	; (800c9ec <SVCCTL_App_Notification+0x51c>)
 800c82e:	f001 fc15 	bl	800e05c <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800c832:	4b6f      	ldr	r3, [pc, #444]	; (800c9f0 <SVCCTL_App_Notification+0x520>)
 800c834:	8adb      	ldrh	r3, [r3, #22]
 800c836:	496f      	ldr	r1, [pc, #444]	; (800c9f4 <SVCCTL_App_Notification+0x524>)
 800c838:	4618      	mov	r0, r3
 800c83a:	f7fd f975 	bl	8009b28 <aci_gap_pass_key_resp>
 800c83e:	4603      	mov	r3, r0
 800c840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800c844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d010      	beq.n	800c86e <SVCCTL_App_Notification+0x39e>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800c84c:	4864      	ldr	r0, [pc, #400]	; (800c9e0 <SVCCTL_App_Notification+0x510>)
 800c84e:	f7fe ff87 	bl	800b760 <DbgTraceGetFileName>
 800c852:	4601      	mov	r1, r0
 800c854:	f240 236b 	movw	r3, #619	; 0x26b
 800c858:	4a62      	ldr	r2, [pc, #392]	; (800c9e4 <SVCCTL_App_Notification+0x514>)
 800c85a:	4863      	ldr	r0, [pc, #396]	; (800c9e8 <SVCCTL_App_Notification+0x518>)
 800c85c:	f001 fb90 	bl	800df80 <iprintf>
 800c860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c864:	4619      	mov	r1, r3
 800c866:	4864      	ldr	r0, [pc, #400]	; (800c9f8 <SVCCTL_App_Notification+0x528>)
 800c868:	f001 fb8a 	bl	800df80 <iprintf>
          break;
 800c86c:	e0ae      	b.n	800c9cc <SVCCTL_App_Notification+0x4fc>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800c86e:	485c      	ldr	r0, [pc, #368]	; (800c9e0 <SVCCTL_App_Notification+0x510>)
 800c870:	f7fe ff76 	bl	800b760 <DbgTraceGetFileName>
 800c874:	4601      	mov	r1, r0
 800c876:	f240 236f 	movw	r3, #623	; 0x26f
 800c87a:	4a5a      	ldr	r2, [pc, #360]	; (800c9e4 <SVCCTL_App_Notification+0x514>)
 800c87c:	485a      	ldr	r0, [pc, #360]	; (800c9e8 <SVCCTL_App_Notification+0x518>)
 800c87e:	f001 fb7f 	bl	800df80 <iprintf>
 800c882:	485e      	ldr	r0, [pc, #376]	; (800c9fc <SVCCTL_App_Notification+0x52c>)
 800c884:	f001 fbea 	bl	800e05c <puts>
          break;
 800c888:	e0a0      	b.n	800c9cc <SVCCTL_App_Notification+0x4fc>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800c88a:	4855      	ldr	r0, [pc, #340]	; (800c9e0 <SVCCTL_App_Notification+0x510>)
 800c88c:	f7fe ff68 	bl	800b760 <DbgTraceGetFileName>
 800c890:	4601      	mov	r1, r0
 800c892:	f240 2377 	movw	r3, #631	; 0x277
 800c896:	4a53      	ldr	r2, [pc, #332]	; (800c9e4 <SVCCTL_App_Notification+0x514>)
 800c898:	4853      	ldr	r0, [pc, #332]	; (800c9e8 <SVCCTL_App_Notification+0x518>)
 800c89a:	f001 fb71 	bl	800df80 <iprintf>
 800c89e:	4858      	ldr	r0, [pc, #352]	; (800ca00 <SVCCTL_App_Notification+0x530>)
 800c8a0:	f001 fbdc 	bl	800e05c <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800c8a4:	484e      	ldr	r0, [pc, #312]	; (800c9e0 <SVCCTL_App_Notification+0x510>)
 800c8a6:	f7fe ff5b 	bl	800b760 <DbgTraceGetFileName>
 800c8aa:	4601      	mov	r1, r0
 800c8ac:	f44f 731e 	mov.w	r3, #632	; 0x278
 800c8b0:	4a4c      	ldr	r2, [pc, #304]	; (800c9e4 <SVCCTL_App_Notification+0x514>)
 800c8b2:	484d      	ldr	r0, [pc, #308]	; (800c9e8 <SVCCTL_App_Notification+0x518>)
 800c8b4:	f001 fb64 	bl	800df80 <iprintf>
 800c8b8:	69fb      	ldr	r3, [r7, #28]
 800c8ba:	3302      	adds	r3, #2
 800c8bc:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	4850      	ldr	r0, [pc, #320]	; (800ca04 <SVCCTL_App_Notification+0x534>)
 800c8c4:	f001 fb5c 	bl	800df80 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800c8c8:	4845      	ldr	r0, [pc, #276]	; (800c9e0 <SVCCTL_App_Notification+0x510>)
 800c8ca:	f7fe ff49 	bl	800b760 <DbgTraceGetFileName>
 800c8ce:	4601      	mov	r1, r0
 800c8d0:	f240 237a 	movw	r3, #634	; 0x27a
 800c8d4:	4a43      	ldr	r2, [pc, #268]	; (800c9e4 <SVCCTL_App_Notification+0x514>)
 800c8d6:	4844      	ldr	r0, [pc, #272]	; (800c9e8 <SVCCTL_App_Notification+0x518>)
 800c8d8:	f001 fb52 	bl	800df80 <iprintf>
 800c8dc:	69fb      	ldr	r3, [r7, #28]
 800c8de:	3302      	adds	r3, #2
 800c8e0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	4848      	ldr	r0, [pc, #288]	; (800ca08 <SVCCTL_App_Notification+0x538>)
 800c8e8:	f001 fb4a 	bl	800df80 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800c8ec:	4b40      	ldr	r3, [pc, #256]	; (800c9f0 <SVCCTL_App_Notification+0x520>)
 800c8ee:	8adb      	ldrh	r3, [r3, #22]
 800c8f0:	2101      	movs	r1, #1
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7fd fac2 	bl	8009e7c <aci_gap_numeric_comparison_value_confirm_yesno>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800c8fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c902:	2b00      	cmp	r3, #0
 800c904:	d010      	beq.n	800c928 <SVCCTL_App_Notification+0x458>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800c906:	4836      	ldr	r0, [pc, #216]	; (800c9e0 <SVCCTL_App_Notification+0x510>)
 800c908:	f7fe ff2a 	bl	800b760 <DbgTraceGetFileName>
 800c90c:	4601      	mov	r1, r0
 800c90e:	f240 237f 	movw	r3, #639	; 0x27f
 800c912:	4a34      	ldr	r2, [pc, #208]	; (800c9e4 <SVCCTL_App_Notification+0x514>)
 800c914:	4834      	ldr	r0, [pc, #208]	; (800c9e8 <SVCCTL_App_Notification+0x518>)
 800c916:	f001 fb33 	bl	800df80 <iprintf>
 800c91a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c91e:	4619      	mov	r1, r3
 800c920:	483a      	ldr	r0, [pc, #232]	; (800ca0c <SVCCTL_App_Notification+0x53c>)
 800c922:	f001 fb2d 	bl	800df80 <iprintf>
          break;
 800c926:	e051      	b.n	800c9cc <SVCCTL_App_Notification+0x4fc>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800c928:	482d      	ldr	r0, [pc, #180]	; (800c9e0 <SVCCTL_App_Notification+0x510>)
 800c92a:	f7fe ff19 	bl	800b760 <DbgTraceGetFileName>
 800c92e:	4601      	mov	r1, r0
 800c930:	f240 2383 	movw	r3, #643	; 0x283
 800c934:	4a2b      	ldr	r2, [pc, #172]	; (800c9e4 <SVCCTL_App_Notification+0x514>)
 800c936:	482c      	ldr	r0, [pc, #176]	; (800c9e8 <SVCCTL_App_Notification+0x518>)
 800c938:	f001 fb22 	bl	800df80 <iprintf>
 800c93c:	4834      	ldr	r0, [pc, #208]	; (800ca10 <SVCCTL_App_Notification+0x540>)
 800c93e:	f001 fb8d 	bl	800e05c <puts>
          break;
 800c942:	e043      	b.n	800c9cc <SVCCTL_App_Notification+0x4fc>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800c944:	69fb      	ldr	r3, [r7, #28]
 800c946:	3302      	adds	r3, #2
 800c948:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800c94a:	4825      	ldr	r0, [pc, #148]	; (800c9e0 <SVCCTL_App_Notification+0x510>)
 800c94c:	f7fe ff08 	bl	800b760 <DbgTraceGetFileName>
 800c950:	4601      	mov	r1, r0
 800c952:	f240 238d 	movw	r3, #653	; 0x28d
 800c956:	4a23      	ldr	r2, [pc, #140]	; (800c9e4 <SVCCTL_App_Notification+0x514>)
 800c958:	4823      	ldr	r0, [pc, #140]	; (800c9e8 <SVCCTL_App_Notification+0x518>)
 800c95a:	f001 fb11 	bl	800df80 <iprintf>
 800c95e:	482d      	ldr	r0, [pc, #180]	; (800ca14 <SVCCTL_App_Notification+0x544>)
 800c960:	f001 fb7c 	bl	800e05c <puts>
          if (p_pairing_complete->Status != 0)
 800c964:	69bb      	ldr	r3, [r7, #24]
 800c966:	789b      	ldrb	r3, [r3, #2]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d013      	beq.n	800c994 <SVCCTL_App_Notification+0x4c4>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800c96c:	481c      	ldr	r0, [pc, #112]	; (800c9e0 <SVCCTL_App_Notification+0x510>)
 800c96e:	f7fe fef7 	bl	800b760 <DbgTraceGetFileName>
 800c972:	4601      	mov	r1, r0
 800c974:	f44f 7324 	mov.w	r3, #656	; 0x290
 800c978:	4a1a      	ldr	r2, [pc, #104]	; (800c9e4 <SVCCTL_App_Notification+0x514>)
 800c97a:	481b      	ldr	r0, [pc, #108]	; (800c9e8 <SVCCTL_App_Notification+0x518>)
 800c97c:	f001 fb00 	bl	800df80 <iprintf>
 800c980:	69bb      	ldr	r3, [r7, #24]
 800c982:	789b      	ldrb	r3, [r3, #2]
 800c984:	4619      	mov	r1, r3
 800c986:	69bb      	ldr	r3, [r7, #24]
 800c988:	78db      	ldrb	r3, [r3, #3]
 800c98a:	461a      	mov	r2, r3
 800c98c:	4822      	ldr	r0, [pc, #136]	; (800ca18 <SVCCTL_App_Notification+0x548>)
 800c98e:	f001 faf7 	bl	800df80 <iprintf>
 800c992:	e00c      	b.n	800c9ae <SVCCTL_App_Notification+0x4de>
            APP_DBG_MSG("     - Pairing Success\n");
 800c994:	4812      	ldr	r0, [pc, #72]	; (800c9e0 <SVCCTL_App_Notification+0x510>)
 800c996:	f7fe fee3 	bl	800b760 <DbgTraceGetFileName>
 800c99a:	4601      	mov	r1, r0
 800c99c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800c9a0:	4a10      	ldr	r2, [pc, #64]	; (800c9e4 <SVCCTL_App_Notification+0x514>)
 800c9a2:	4811      	ldr	r0, [pc, #68]	; (800c9e8 <SVCCTL_App_Notification+0x518>)
 800c9a4:	f001 faec 	bl	800df80 <iprintf>
 800c9a8:	481c      	ldr	r0, [pc, #112]	; (800ca1c <SVCCTL_App_Notification+0x54c>)
 800c9aa:	f001 fb57 	bl	800e05c <puts>
          APP_DBG_MSG("\n");
 800c9ae:	480c      	ldr	r0, [pc, #48]	; (800c9e0 <SVCCTL_App_Notification+0x510>)
 800c9b0:	f7fe fed6 	bl	800b760 <DbgTraceGetFileName>
 800c9b4:	4601      	mov	r1, r0
 800c9b6:	f240 2396 	movw	r3, #662	; 0x296
 800c9ba:	4a0a      	ldr	r2, [pc, #40]	; (800c9e4 <SVCCTL_App_Notification+0x514>)
 800c9bc:	480a      	ldr	r0, [pc, #40]	; (800c9e8 <SVCCTL_App_Notification+0x518>)
 800c9be:	f001 fadf 	bl	800df80 <iprintf>
 800c9c2:	200a      	movs	r0, #10
 800c9c4:	f001 faee 	bl	800dfa4 <putchar>
          break;
 800c9c8:	e000      	b.n	800c9cc <SVCCTL_App_Notification+0x4fc>
          break;
 800c9ca:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800c9cc:	e001      	b.n	800c9d2 <SVCCTL_App_Notification+0x502>
      break;
 800c9ce:	bf00      	nop
 800c9d0:	e000      	b.n	800c9d4 <SVCCTL_App_Notification+0x504>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800c9d2:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800c9d4:	2301      	movs	r3, #1
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3728      	adds	r7, #40	; 0x28
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bdb0      	pop	{r4, r5, r7, pc}
 800c9de:	bf00      	nop
 800c9e0:	0800f258 	.word	0x0800f258
 800c9e4:	0801028c 	.word	0x0801028c
 800c9e8:	0800f274 	.word	0x0800f274
 800c9ec:	0800f598 	.word	0x0800f598
 800c9f0:	200015f0 	.word	0x200015f0
 800c9f4:	0001b207 	.word	0x0001b207
 800c9f8:	0800f5c0 	.word	0x0800f5c0
 800c9fc:	0800f5f4 	.word	0x0800f5f4
 800ca00:	0800f61c 	.word	0x0800f61c
 800ca04:	0800f650 	.word	0x0800f650
 800ca08:	0800f66c 	.word	0x0800f66c
 800ca0c:	0800f684 	.word	0x0800f684
 800ca10:	0800f6d4 	.word	0x0800f6d4
 800ca14:	0800f71c 	.word	0x0800f71c
 800ca18:	0800f748 	.word	0x0800f748
 800ca1c:	0800f784 	.word	0x0800f784

0800ca20 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800ca26:	4b06      	ldr	r3, [pc, #24]	; (800ca40 <Ble_Tl_Init+0x20>)
 800ca28:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800ca2a:	4b06      	ldr	r3, [pc, #24]	; (800ca44 <Ble_Tl_Init+0x24>)
 800ca2c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800ca2e:	463b      	mov	r3, r7
 800ca30:	4619      	mov	r1, r3
 800ca32:	4805      	ldr	r0, [pc, #20]	; (800ca48 <Ble_Tl_Init+0x28>)
 800ca34:	f7fe f978 	bl	800ad28 <hci_init>

  return;
 800ca38:	bf00      	nop
}
 800ca3a:	3708      	adds	r7, #8
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	200300d8 	.word	0x200300d8
 800ca44:	0800d215 	.word	0x0800d215
 800ca48:	0800d1dd 	.word	0x0800d1dd

0800ca4c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800ca4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca4e:	b08d      	sub	sp, #52	; 0x34
 800ca50:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800ca52:	2300      	movs	r3, #0
 800ca54:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ca56:	2392      	movs	r3, #146	; 0x92
 800ca58:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800ca5a:	48a3      	ldr	r0, [pc, #652]	; (800cce8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ca5c:	f7fe fe80 	bl	800b760 <DbgTraceGetFileName>
 800ca60:	4601      	mov	r1, r0
 800ca62:	f240 23d6 	movw	r3, #726	; 0x2d6
 800ca66:	4aa1      	ldr	r2, [pc, #644]	; (800ccec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800ca68:	48a1      	ldr	r0, [pc, #644]	; (800ccf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800ca6a:	f001 fa89 	bl	800df80 <iprintf>
 800ca6e:	48a1      	ldr	r0, [pc, #644]	; (800ccf4 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800ca70:	f001 faf4 	bl	800e05c <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800ca74:	f7fd fe55 	bl	800a722 <hci_reset>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800ca7c:	7dfb      	ldrb	r3, [r7, #23]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d00f      	beq.n	800caa2 <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800ca82:	4899      	ldr	r0, [pc, #612]	; (800cce8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ca84:	f7fe fe6c 	bl	800b760 <DbgTraceGetFileName>
 800ca88:	4601      	mov	r1, r0
 800ca8a:	f240 23df 	movw	r3, #735	; 0x2df
 800ca8e:	4a97      	ldr	r2, [pc, #604]	; (800ccec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800ca90:	4897      	ldr	r0, [pc, #604]	; (800ccf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800ca92:	f001 fa75 	bl	800df80 <iprintf>
 800ca96:	7dfb      	ldrb	r3, [r7, #23]
 800ca98:	4619      	mov	r1, r3
 800ca9a:	4897      	ldr	r0, [pc, #604]	; (800ccf8 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800ca9c:	f001 fa70 	bl	800df80 <iprintf>
 800caa0:	e00c      	b.n	800cabc <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800caa2:	4891      	ldr	r0, [pc, #580]	; (800cce8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800caa4:	f7fe fe5c 	bl	800b760 <DbgTraceGetFileName>
 800caa8:	4601      	mov	r1, r0
 800caaa:	f240 23e3 	movw	r3, #739	; 0x2e3
 800caae:	4a8f      	ldr	r2, [pc, #572]	; (800ccec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800cab0:	488f      	ldr	r0, [pc, #572]	; (800ccf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cab2:	f001 fa65 	bl	800df80 <iprintf>
 800cab6:	4891      	ldr	r0, [pc, #580]	; (800ccfc <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800cab8:	f001 fad0 	bl	800e05c <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800cabc:	f000 fad8 	bl	800d070 <BleGetBdAddress>
 800cac0:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800cac2:	693a      	ldr	r2, [r7, #16]
 800cac4:	2106      	movs	r1, #6
 800cac6:	2000      	movs	r0, #0
 800cac8:	f7fd fceb 	bl	800a4a2 <aci_hal_write_config_data>
 800cacc:	4603      	mov	r3, r0
 800cace:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cad0:	7dfb      	ldrb	r3, [r7, #23]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d00f      	beq.n	800caf6 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800cad6:	4884      	ldr	r0, [pc, #528]	; (800cce8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800cad8:	f7fe fe42 	bl	800b760 <DbgTraceGetFileName>
 800cadc:	4601      	mov	r1, r0
 800cade:	f240 23ed 	movw	r3, #749	; 0x2ed
 800cae2:	4a82      	ldr	r2, [pc, #520]	; (800ccec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800cae4:	4882      	ldr	r0, [pc, #520]	; (800ccf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cae6:	f001 fa4b 	bl	800df80 <iprintf>
 800caea:	7dfb      	ldrb	r3, [r7, #23]
 800caec:	4619      	mov	r1, r3
 800caee:	4884      	ldr	r0, [pc, #528]	; (800cd00 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800caf0:	f001 fa46 	bl	800df80 <iprintf>
 800caf4:	e035      	b.n	800cb62 <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800caf6:	487c      	ldr	r0, [pc, #496]	; (800cce8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800caf8:	f7fe fe32 	bl	800b760 <DbgTraceGetFileName>
 800cafc:	4601      	mov	r1, r0
 800cafe:	f240 23f1 	movw	r3, #753	; 0x2f1
 800cb02:	4a7a      	ldr	r2, [pc, #488]	; (800ccec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800cb04:	487a      	ldr	r0, [pc, #488]	; (800ccf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cb06:	f001 fa3b 	bl	800df80 <iprintf>
 800cb0a:	487e      	ldr	r0, [pc, #504]	; (800cd04 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800cb0c:	f001 faa6 	bl	800e05c <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800cb10:	4875      	ldr	r0, [pc, #468]	; (800cce8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800cb12:	f7fe fe25 	bl	800b760 <DbgTraceGetFileName>
 800cb16:	4601      	mov	r1, r0
 800cb18:	f240 23f2 	movw	r3, #754	; 0x2f2
 800cb1c:	4a73      	ldr	r2, [pc, #460]	; (800ccec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800cb1e:	4874      	ldr	r0, [pc, #464]	; (800ccf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cb20:	f001 fa2e 	bl	800df80 <iprintf>
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	3305      	adds	r3, #5
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	3304      	adds	r3, #4
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	461c      	mov	r4, r3
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	3303      	adds	r3, #3
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	461d      	mov	r5, r3
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	3302      	adds	r3, #2
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	461a      	mov	r2, r3
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	3301      	adds	r3, #1
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	9302      	str	r3, [sp, #8]
 800cb52:	9101      	str	r1, [sp, #4]
 800cb54:	9200      	str	r2, [sp, #0]
 800cb56:	462b      	mov	r3, r5
 800cb58:	4622      	mov	r2, r4
 800cb5a:	4601      	mov	r1, r0
 800cb5c:	486a      	ldr	r0, [pc, #424]	; (800cd08 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800cb5e:	f001 fa0f 	bl	800df80 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800cb62:	4a6a      	ldr	r2, [pc, #424]	; (800cd0c <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800cb64:	2110      	movs	r1, #16
 800cb66:	2018      	movs	r0, #24
 800cb68:	f7fd fc9b 	bl	800a4a2 <aci_hal_write_config_data>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cb70:	7dfb      	ldrb	r3, [r7, #23]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d00f      	beq.n	800cb96 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800cb76:	485c      	ldr	r0, [pc, #368]	; (800cce8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800cb78:	f7fe fdf2 	bl	800b760 <DbgTraceGetFileName>
 800cb7c:	4601      	mov	r1, r0
 800cb7e:	f44f 734f 	mov.w	r3, #828	; 0x33c
 800cb82:	4a5a      	ldr	r2, [pc, #360]	; (800ccec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800cb84:	485a      	ldr	r0, [pc, #360]	; (800ccf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cb86:	f001 f9fb 	bl	800df80 <iprintf>
 800cb8a:	7dfb      	ldrb	r3, [r7, #23]
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	4860      	ldr	r0, [pc, #384]	; (800cd10 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800cb90:	f001 f9f6 	bl	800df80 <iprintf>
 800cb94:	e00c      	b.n	800cbb0 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800cb96:	4854      	ldr	r0, [pc, #336]	; (800cce8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800cb98:	f7fe fde2 	bl	800b760 <DbgTraceGetFileName>
 800cb9c:	4601      	mov	r1, r0
 800cb9e:	f44f 7350 	mov.w	r3, #832	; 0x340
 800cba2:	4a52      	ldr	r2, [pc, #328]	; (800ccec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800cba4:	4852      	ldr	r0, [pc, #328]	; (800ccf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cba6:	f001 f9eb 	bl	800df80 <iprintf>
 800cbaa:	485a      	ldr	r0, [pc, #360]	; (800cd14 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800cbac:	f001 fa56 	bl	800e05c <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800cbb0:	4a59      	ldr	r2, [pc, #356]	; (800cd18 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800cbb2:	2110      	movs	r1, #16
 800cbb4:	2008      	movs	r0, #8
 800cbb6:	f7fd fc74 	bl	800a4a2 <aci_hal_write_config_data>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cbbe:	7dfb      	ldrb	r3, [r7, #23]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d00f      	beq.n	800cbe4 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800cbc4:	4848      	ldr	r0, [pc, #288]	; (800cce8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800cbc6:	f7fe fdcb 	bl	800b760 <DbgTraceGetFileName>
 800cbca:	4601      	mov	r1, r0
 800cbcc:	f240 3349 	movw	r3, #841	; 0x349
 800cbd0:	4a46      	ldr	r2, [pc, #280]	; (800ccec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800cbd2:	4847      	ldr	r0, [pc, #284]	; (800ccf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cbd4:	f001 f9d4 	bl	800df80 <iprintf>
 800cbd8:	7dfb      	ldrb	r3, [r7, #23]
 800cbda:	4619      	mov	r1, r3
 800cbdc:	484f      	ldr	r0, [pc, #316]	; (800cd1c <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800cbde:	f001 f9cf 	bl	800df80 <iprintf>
 800cbe2:	e00c      	b.n	800cbfe <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800cbe4:	4840      	ldr	r0, [pc, #256]	; (800cce8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800cbe6:	f7fe fdbb 	bl	800b760 <DbgTraceGetFileName>
 800cbea:	4601      	mov	r1, r0
 800cbec:	f240 334d 	movw	r3, #845	; 0x34d
 800cbf0:	4a3e      	ldr	r2, [pc, #248]	; (800ccec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800cbf2:	483f      	ldr	r0, [pc, #252]	; (800ccf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cbf4:	f001 f9c4 	bl	800df80 <iprintf>
 800cbf8:	4849      	ldr	r0, [pc, #292]	; (800cd20 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800cbfa:	f001 fa2f 	bl	800e05c <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800cbfe:	2118      	movs	r1, #24
 800cc00:	2001      	movs	r0, #1
 800cc02:	f7fd fcd3 	bl	800a5ac <aci_hal_set_tx_power_level>
 800cc06:	4603      	mov	r3, r0
 800cc08:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cc0a:	7dfb      	ldrb	r3, [r7, #23]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d00f      	beq.n	800cc30 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800cc10:	4835      	ldr	r0, [pc, #212]	; (800cce8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800cc12:	f7fe fda5 	bl	800b760 <DbgTraceGetFileName>
 800cc16:	4601      	mov	r1, r0
 800cc18:	f240 3356 	movw	r3, #854	; 0x356
 800cc1c:	4a33      	ldr	r2, [pc, #204]	; (800ccec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800cc1e:	4834      	ldr	r0, [pc, #208]	; (800ccf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cc20:	f001 f9ae 	bl	800df80 <iprintf>
 800cc24:	7dfb      	ldrb	r3, [r7, #23]
 800cc26:	4619      	mov	r1, r3
 800cc28:	483e      	ldr	r0, [pc, #248]	; (800cd24 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800cc2a:	f001 f9a9 	bl	800df80 <iprintf>
 800cc2e:	e00c      	b.n	800cc4a <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800cc30:	482d      	ldr	r0, [pc, #180]	; (800cce8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800cc32:	f7fe fd95 	bl	800b760 <DbgTraceGetFileName>
 800cc36:	4601      	mov	r1, r0
 800cc38:	f240 335a 	movw	r3, #858	; 0x35a
 800cc3c:	4a2b      	ldr	r2, [pc, #172]	; (800ccec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800cc3e:	482c      	ldr	r0, [pc, #176]	; (800ccf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cc40:	f001 f99e 	bl	800df80 <iprintf>
 800cc44:	4838      	ldr	r0, [pc, #224]	; (800cd28 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800cc46:	f001 fa09 	bl	800e05c <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800cc4a:	f7fd f97e 	bl	8009f4a <aci_gatt_init>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cc52:	7dfb      	ldrb	r3, [r7, #23]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d00f      	beq.n	800cc78 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800cc58:	4823      	ldr	r0, [pc, #140]	; (800cce8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800cc5a:	f7fe fd81 	bl	800b760 <DbgTraceGetFileName>
 800cc5e:	4601      	mov	r1, r0
 800cc60:	f240 3363 	movw	r3, #867	; 0x363
 800cc64:	4a21      	ldr	r2, [pc, #132]	; (800ccec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800cc66:	4822      	ldr	r0, [pc, #136]	; (800ccf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cc68:	f001 f98a 	bl	800df80 <iprintf>
 800cc6c:	7dfb      	ldrb	r3, [r7, #23]
 800cc6e:	4619      	mov	r1, r3
 800cc70:	482e      	ldr	r0, [pc, #184]	; (800cd2c <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800cc72:	f001 f985 	bl	800df80 <iprintf>
 800cc76:	e00c      	b.n	800cc92 <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800cc78:	481b      	ldr	r0, [pc, #108]	; (800cce8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800cc7a:	f7fe fd71 	bl	800b760 <DbgTraceGetFileName>
 800cc7e:	4601      	mov	r1, r0
 800cc80:	f240 3367 	movw	r3, #871	; 0x367
 800cc84:	4a19      	ldr	r2, [pc, #100]	; (800ccec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800cc86:	481a      	ldr	r0, [pc, #104]	; (800ccf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800cc88:	f001 f97a 	bl	800df80 <iprintf>
 800cc8c:	4828      	ldr	r0, [pc, #160]	; (800cd30 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800cc8e:	f001 f9e5 	bl	800e05c <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800cc92:	2300      	movs	r3, #0
 800cc94:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800cc96:	7bfb      	ldrb	r3, [r7, #15]
 800cc98:	f043 0301 	orr.w	r3, r3, #1
 800cc9c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800cc9e:	7bfb      	ldrb	r3, [r7, #15]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d069      	beq.n	800cd78 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800cca4:	4b23      	ldr	r3, [pc, #140]	; (800cd34 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800cca6:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800cca8:	1dba      	adds	r2, r7, #6
 800ccaa:	7bf8      	ldrb	r0, [r7, #15]
 800ccac:	1cbb      	adds	r3, r7, #2
 800ccae:	9301      	str	r3, [sp, #4]
 800ccb0:	1d3b      	adds	r3, r7, #4
 800ccb2:	9300      	str	r3, [sp, #0]
 800ccb4:	4613      	mov	r3, r2
 800ccb6:	2207      	movs	r2, #7
 800ccb8:	2100      	movs	r1, #0
 800ccba:	f7fc ff9c 	bl	8009bf6 <aci_gap_init>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800ccc2:	7dfb      	ldrb	r3, [r7, #23]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d039      	beq.n	800cd3c <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800ccc8:	4807      	ldr	r0, [pc, #28]	; (800cce8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800ccca:	f7fe fd49 	bl	800b760 <DbgTraceGetFileName>
 800ccce:	4601      	mov	r1, r0
 800ccd0:	f240 3387 	movw	r3, #903	; 0x387
 800ccd4:	4a05      	ldr	r2, [pc, #20]	; (800ccec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800ccd6:	4806      	ldr	r0, [pc, #24]	; (800ccf0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800ccd8:	f001 f952 	bl	800df80 <iprintf>
 800ccdc:	7dfb      	ldrb	r3, [r7, #23]
 800ccde:	4619      	mov	r1, r3
 800cce0:	4815      	ldr	r0, [pc, #84]	; (800cd38 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800cce2:	f001 f94d 	bl	800df80 <iprintf>
 800cce6:	e036      	b.n	800cd56 <Ble_Hci_Gap_Gatt_Init+0x30a>
 800cce8:	0800f258 	.word	0x0800f258
 800ccec:	080102a4 	.word	0x080102a4
 800ccf0:	0800f274 	.word	0x0800f274
 800ccf4:	0800f79c 	.word	0x0800f79c
 800ccf8:	0800f7c8 	.word	0x0800f7c8
 800ccfc:	0800f7f8 	.word	0x0800f7f8
 800cd00:	0800f818 	.word	0x0800f818
 800cd04:	0800f874 	.word	0x0800f874
 800cd08:	0800f8c0 	.word	0x0800f8c0
 800cd0c:	0801025c 	.word	0x0801025c
 800cd10:	0800f8fc 	.word	0x0800f8fc
 800cd14:	0800f954 	.word	0x0800f954
 800cd18:	0801026c 	.word	0x0801026c
 800cd1c:	0800f99c 	.word	0x0800f99c
 800cd20:	0800f9f4 	.word	0x0800f9f4
 800cd24:	0800fa3c 	.word	0x0800fa3c
 800cd28:	0800fa7c 	.word	0x0800fa7c
 800cd2c:	0800faac 	.word	0x0800faac
 800cd30:	0800fae0 	.word	0x0800fae0
 800cd34:	0800fb04 	.word	0x0800fb04
 800cd38:	0800fb0c 	.word	0x0800fb0c
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800cd3c:	487e      	ldr	r0, [pc, #504]	; (800cf38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800cd3e:	f7fe fd0f 	bl	800b760 <DbgTraceGetFileName>
 800cd42:	4601      	mov	r1, r0
 800cd44:	f240 338b 	movw	r3, #907	; 0x38b
 800cd48:	4a7c      	ldr	r2, [pc, #496]	; (800cf3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800cd4a:	487d      	ldr	r0, [pc, #500]	; (800cf40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800cd4c:	f001 f918 	bl	800df80 <iprintf>
 800cd50:	487c      	ldr	r0, [pc, #496]	; (800cf44 <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 800cd52:	f001 f983 	bl	800e05c <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800cd56:	88fc      	ldrh	r4, [r7, #6]
 800cd58:	88bd      	ldrh	r5, [r7, #4]
 800cd5a:	68b8      	ldr	r0, [r7, #8]
 800cd5c:	f7f3 fa10 	bl	8000180 <strlen>
 800cd60:	4603      	mov	r3, r0
 800cd62:	b2da      	uxtb	r2, r3
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	9300      	str	r3, [sp, #0]
 800cd68:	4613      	mov	r3, r2
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	4629      	mov	r1, r5
 800cd6e:	4620      	mov	r0, r4
 800cd70:	f7fd faee 	bl	800a350 <aci_gatt_update_char_value>
 800cd74:	4603      	mov	r3, r0
 800cd76:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800cd78:	88f8      	ldrh	r0, [r7, #6]
 800cd7a:	8879      	ldrh	r1, [r7, #2]
 800cd7c:	463b      	mov	r3, r7
 800cd7e:	9300      	str	r3, [sp, #0]
 800cd80:	2302      	movs	r3, #2
 800cd82:	2200      	movs	r2, #0
 800cd84:	f7fd fae4 	bl	800a350 <aci_gatt_update_char_value>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800cd8c:	2202      	movs	r2, #2
 800cd8e:	2102      	movs	r1, #2
 800cd90:	2000      	movs	r0, #0
 800cd92:	f7fd fcea 	bl	800a76a <hci_le_set_default_phy>
 800cd96:	4603      	mov	r3, r0
 800cd98:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cd9a:	7dfb      	ldrb	r3, [r7, #23]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d00f      	beq.n	800cdc0 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800cda0:	4865      	ldr	r0, [pc, #404]	; (800cf38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800cda2:	f7fe fcdd 	bl	800b760 <DbgTraceGetFileName>
 800cda6:	4601      	mov	r1, r0
 800cda8:	f240 33ad 	movw	r3, #941	; 0x3ad
 800cdac:	4a63      	ldr	r2, [pc, #396]	; (800cf3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800cdae:	4864      	ldr	r0, [pc, #400]	; (800cf40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800cdb0:	f001 f8e6 	bl	800df80 <iprintf>
 800cdb4:	7dfb      	ldrb	r3, [r7, #23]
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	4863      	ldr	r0, [pc, #396]	; (800cf48 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 800cdba:	f001 f8e1 	bl	800df80 <iprintf>
 800cdbe:	e00c      	b.n	800cdda <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800cdc0:	485d      	ldr	r0, [pc, #372]	; (800cf38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800cdc2:	f7fe fccd 	bl	800b760 <DbgTraceGetFileName>
 800cdc6:	4601      	mov	r1, r0
 800cdc8:	f240 33b1 	movw	r3, #945	; 0x3b1
 800cdcc:	4a5b      	ldr	r2, [pc, #364]	; (800cf3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800cdce:	485c      	ldr	r0, [pc, #368]	; (800cf40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800cdd0:	f001 f8d6 	bl	800df80 <iprintf>
 800cdd4:	485d      	ldr	r0, [pc, #372]	; (800cf4c <Ble_Hci_Gap_Gatt_Init+0x500>)
 800cdd6:	f001 f941 	bl	800e05c <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800cdda:	4b5d      	ldr	r3, [pc, #372]	; (800cf50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800cddc:	2201      	movs	r2, #1
 800cdde:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800cde0:	4b5b      	ldr	r3, [pc, #364]	; (800cf50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	4618      	mov	r0, r3
 800cde6:	f7fc fd87 	bl	80098f8 <aci_gap_set_io_capability>
 800cdea:	4603      	mov	r3, r0
 800cdec:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800cdee:	7dfb      	ldrb	r3, [r7, #23]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d00f      	beq.n	800ce14 <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800cdf4:	4850      	ldr	r0, [pc, #320]	; (800cf38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800cdf6:	f7fe fcb3 	bl	800b760 <DbgTraceGetFileName>
 800cdfa:	4601      	mov	r1, r0
 800cdfc:	f240 33bb 	movw	r3, #955	; 0x3bb
 800ce00:	4a4e      	ldr	r2, [pc, #312]	; (800cf3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800ce02:	484f      	ldr	r0, [pc, #316]	; (800cf40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800ce04:	f001 f8bc 	bl	800df80 <iprintf>
 800ce08:	7dfb      	ldrb	r3, [r7, #23]
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	4851      	ldr	r0, [pc, #324]	; (800cf54 <Ble_Hci_Gap_Gatt_Init+0x508>)
 800ce0e:	f001 f8b7 	bl	800df80 <iprintf>
 800ce12:	e00c      	b.n	800ce2e <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800ce14:	4848      	ldr	r0, [pc, #288]	; (800cf38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800ce16:	f7fe fca3 	bl	800b760 <DbgTraceGetFileName>
 800ce1a:	4601      	mov	r1, r0
 800ce1c:	f240 33bf 	movw	r3, #959	; 0x3bf
 800ce20:	4a46      	ldr	r2, [pc, #280]	; (800cf3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800ce22:	4847      	ldr	r0, [pc, #284]	; (800cf40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800ce24:	f001 f8ac 	bl	800df80 <iprintf>
 800ce28:	484b      	ldr	r0, [pc, #300]	; (800cf58 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 800ce2a:	f001 f917 	bl	800e05c <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800ce2e:	4b48      	ldr	r3, [pc, #288]	; (800cf50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800ce30:	2201      	movs	r2, #1
 800ce32:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800ce34:	4b46      	ldr	r3, [pc, #280]	; (800cf50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800ce36:	2208      	movs	r2, #8
 800ce38:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800ce3a:	4b45      	ldr	r3, [pc, #276]	; (800cf50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800ce3c:	2210      	movs	r2, #16
 800ce3e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800ce40:	4b43      	ldr	r3, [pc, #268]	; (800cf50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800ce42:	2201      	movs	r2, #1
 800ce44:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800ce46:	4b42      	ldr	r3, [pc, #264]	; (800cf50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800ce48:	4a44      	ldr	r2, [pc, #272]	; (800cf5c <Ble_Hci_Gap_Gatt_Init+0x510>)
 800ce4a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800ce4c:	4b40      	ldr	r3, [pc, #256]	; (800cf50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800ce4e:	2201      	movs	r2, #1
 800ce50:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800ce52:	4b3f      	ldr	r3, [pc, #252]	; (800cf50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800ce54:	789c      	ldrb	r4, [r3, #2]
 800ce56:	4b3e      	ldr	r3, [pc, #248]	; (800cf50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800ce58:	785d      	ldrb	r5, [r3, #1]
 800ce5a:	4b3d      	ldr	r3, [pc, #244]	; (800cf50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800ce5c:	791b      	ldrb	r3, [r3, #4]
 800ce5e:	4a3c      	ldr	r2, [pc, #240]	; (800cf50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800ce60:	7952      	ldrb	r2, [r2, #5]
 800ce62:	493b      	ldr	r1, [pc, #236]	; (800cf50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800ce64:	78c9      	ldrb	r1, [r1, #3]
 800ce66:	483a      	ldr	r0, [pc, #232]	; (800cf50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800ce68:	6880      	ldr	r0, [r0, #8]
 800ce6a:	2600      	movs	r6, #0
 800ce6c:	9604      	str	r6, [sp, #16]
 800ce6e:	9003      	str	r0, [sp, #12]
 800ce70:	9102      	str	r1, [sp, #8]
 800ce72:	9201      	str	r2, [sp, #4]
 800ce74:	9300      	str	r3, [sp, #0]
 800ce76:	2300      	movs	r3, #0
 800ce78:	2201      	movs	r2, #1
 800ce7a:	4629      	mov	r1, r5
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	f7fc fd8f 	bl	80099a0 <aci_gap_set_authentication_requirement>
 800ce82:	4603      	mov	r3, r0
 800ce84:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800ce86:	7dfb      	ldrb	r3, [r7, #23]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d00f      	beq.n	800ceac <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800ce8c:	482a      	ldr	r0, [pc, #168]	; (800cf38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800ce8e:	f7fe fc67 	bl	800b760 <DbgTraceGetFileName>
 800ce92:	4601      	mov	r1, r0
 800ce94:	f240 33da 	movw	r3, #986	; 0x3da
 800ce98:	4a28      	ldr	r2, [pc, #160]	; (800cf3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800ce9a:	4829      	ldr	r0, [pc, #164]	; (800cf40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800ce9c:	f001 f870 	bl	800df80 <iprintf>
 800cea0:	7dfb      	ldrb	r3, [r7, #23]
 800cea2:	4619      	mov	r1, r3
 800cea4:	482e      	ldr	r0, [pc, #184]	; (800cf60 <Ble_Hci_Gap_Gatt_Init+0x514>)
 800cea6:	f001 f86b 	bl	800df80 <iprintf>
 800ceaa:	e00c      	b.n	800cec6 <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800ceac:	4822      	ldr	r0, [pc, #136]	; (800cf38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800ceae:	f7fe fc57 	bl	800b760 <DbgTraceGetFileName>
 800ceb2:	4601      	mov	r1, r0
 800ceb4:	f240 33de 	movw	r3, #990	; 0x3de
 800ceb8:	4a20      	ldr	r2, [pc, #128]	; (800cf3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800ceba:	4821      	ldr	r0, [pc, #132]	; (800cf40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800cebc:	f001 f860 	bl	800df80 <iprintf>
 800cec0:	4828      	ldr	r0, [pc, #160]	; (800cf64 <Ble_Hci_Gap_Gatt_Init+0x518>)
 800cec2:	f001 f8cb 	bl	800e05c <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800cec6:	4b22      	ldr	r3, [pc, #136]	; (800cf50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800cec8:	789b      	ldrb	r3, [r3, #2]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d023      	beq.n	800cf16 <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 800cece:	f7fc ffb1 	bl	8009e34 <aci_gap_configure_filter_accept_list>
 800ced2:	4603      	mov	r3, r0
 800ced4:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800ced6:	7dfb      	ldrb	r3, [r7, #23]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d00f      	beq.n	800cefc <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800cedc:	4816      	ldr	r0, [pc, #88]	; (800cf38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800cede:	f7fe fc3f 	bl	800b760 <DbgTraceGetFileName>
 800cee2:	4601      	mov	r1, r0
 800cee4:	f240 33e9 	movw	r3, #1001	; 0x3e9
 800cee8:	4a14      	ldr	r2, [pc, #80]	; (800cf3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800ceea:	4815      	ldr	r0, [pc, #84]	; (800cf40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800ceec:	f001 f848 	bl	800df80 <iprintf>
 800cef0:	7dfb      	ldrb	r3, [r7, #23]
 800cef2:	4619      	mov	r1, r3
 800cef4:	481c      	ldr	r0, [pc, #112]	; (800cf68 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 800cef6:	f001 f843 	bl	800df80 <iprintf>
 800cefa:	e00c      	b.n	800cf16 <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800cefc:	480e      	ldr	r0, [pc, #56]	; (800cf38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800cefe:	f7fe fc2f 	bl	800b760 <DbgTraceGetFileName>
 800cf02:	4601      	mov	r1, r0
 800cf04:	f240 33ed 	movw	r3, #1005	; 0x3ed
 800cf08:	4a0c      	ldr	r2, [pc, #48]	; (800cf3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800cf0a:	480d      	ldr	r0, [pc, #52]	; (800cf40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800cf0c:	f001 f838 	bl	800df80 <iprintf>
 800cf10:	4816      	ldr	r0, [pc, #88]	; (800cf6c <Ble_Hci_Gap_Gatt_Init+0x520>)
 800cf12:	f001 f8a3 	bl	800e05c <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800cf16:	4808      	ldr	r0, [pc, #32]	; (800cf38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800cf18:	f7fe fc22 	bl	800b760 <DbgTraceGetFileName>
 800cf1c:	4601      	mov	r1, r0
 800cf1e:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 800cf22:	4a06      	ldr	r2, [pc, #24]	; (800cf3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800cf24:	4806      	ldr	r0, [pc, #24]	; (800cf40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800cf26:	f001 f82b 	bl	800df80 <iprintf>
 800cf2a:	4811      	ldr	r0, [pc, #68]	; (800cf70 <Ble_Hci_Gap_Gatt_Init+0x524>)
 800cf2c:	f001 f828 	bl	800df80 <iprintf>
}
 800cf30:	bf00      	nop
 800cf32:	371c      	adds	r7, #28
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf38:	0800f258 	.word	0x0800f258
 800cf3c:	080102a4 	.word	0x080102a4
 800cf40:	0800f274 	.word	0x0800f274
 800cf44:	0800fb3c 	.word	0x0800fb3c
 800cf48:	0800fb5c 	.word	0x0800fb5c
 800cf4c:	0800fb98 	.word	0x0800fb98
 800cf50:	200015f0 	.word	0x200015f0
 800cf54:	0800fbc4 	.word	0x0800fbc4
 800cf58:	0800fc04 	.word	0x0800fc04
 800cf5c:	0001b207 	.word	0x0001b207
 800cf60:	0800fc34 	.word	0x0800fc34
 800cf64:	0800fc80 	.word	0x0800fc80
 800cf68:	0800fcbc 	.word	0x0800fcbc
 800cf6c:	0800fcfc 	.word	0x0800fcfc
 800cf70:	0800fd2c 	.word	0x0800fd2c

0800cf74 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b08c      	sub	sp, #48	; 0x30
 800cf78:	af08      	add	r7, sp, #32
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800cf7e:	2392      	movs	r3, #146	; 0x92
 800cf80:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800cf82:	4a32      	ldr	r2, [pc, #200]	; (800d04c <Adv_Request+0xd8>)
 800cf84:	79fb      	ldrb	r3, [r7, #7]
 800cf86:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	9306      	str	r3, [sp, #24]
 800cf8e:	2300      	movs	r3, #0
 800cf90:	9305      	str	r3, [sp, #20]
 800cf92:	2300      	movs	r3, #0
 800cf94:	9304      	str	r3, [sp, #16]
 800cf96:	2300      	movs	r3, #0
 800cf98:	9303      	str	r3, [sp, #12]
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	9302      	str	r3, [sp, #8]
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	9301      	str	r3, [sp, #4]
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	9300      	str	r3, [sp, #0]
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	f44f 6294 	mov.w	r2, #1184	; 0x4a0
 800cfac:	2180      	movs	r1, #128	; 0x80
 800cfae:	2000      	movs	r0, #0
 800cfb0:	f7fc fba8 	bl	8009704 <aci_gap_set_discoverable>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800cfb8:	7bfb      	ldrb	r3, [r7, #15]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d00f      	beq.n	800cfde <Adv_Request+0x6a>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800cfbe:	4824      	ldr	r0, [pc, #144]	; (800d050 <Adv_Request+0xdc>)
 800cfc0:	f7fe fbce 	bl	800b760 <DbgTraceGetFileName>
 800cfc4:	4601      	mov	r1, r0
 800cfc6:	f240 4306 	movw	r3, #1030	; 0x406
 800cfca:	4a22      	ldr	r2, [pc, #136]	; (800d054 <Adv_Request+0xe0>)
 800cfcc:	4822      	ldr	r0, [pc, #136]	; (800d058 <Adv_Request+0xe4>)
 800cfce:	f000 ffd7 	bl	800df80 <iprintf>
 800cfd2:	7bfb      	ldrb	r3, [r7, #15]
 800cfd4:	4619      	mov	r1, r3
 800cfd6:	4821      	ldr	r0, [pc, #132]	; (800d05c <Adv_Request+0xe8>)
 800cfd8:	f000 ffd2 	bl	800df80 <iprintf>
 800cfdc:	e00c      	b.n	800cff8 <Adv_Request+0x84>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800cfde:	481c      	ldr	r0, [pc, #112]	; (800d050 <Adv_Request+0xdc>)
 800cfe0:	f7fe fbbe 	bl	800b760 <DbgTraceGetFileName>
 800cfe4:	4601      	mov	r1, r0
 800cfe6:	f240 430a 	movw	r3, #1034	; 0x40a
 800cfea:	4a1a      	ldr	r2, [pc, #104]	; (800d054 <Adv_Request+0xe0>)
 800cfec:	481a      	ldr	r0, [pc, #104]	; (800d058 <Adv_Request+0xe4>)
 800cfee:	f000 ffc7 	bl	800df80 <iprintf>
 800cff2:	481b      	ldr	r0, [pc, #108]	; (800d060 <Adv_Request+0xec>)
 800cff4:	f001 f832 	bl	800e05c <puts>
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800cff8:	491a      	ldr	r1, [pc, #104]	; (800d064 <Adv_Request+0xf0>)
 800cffa:	2019      	movs	r0, #25
 800cffc:	f7fc fea8 	bl	8009d50 <aci_gap_update_adv_data>
 800d000:	4603      	mov	r3, r0
 800d002:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800d004:	7bfb      	ldrb	r3, [r7, #15]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d00f      	beq.n	800d02a <Adv_Request+0xb6>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800d00a:	4811      	ldr	r0, [pc, #68]	; (800d050 <Adv_Request+0xdc>)
 800d00c:	f7fe fba8 	bl	800b760 <DbgTraceGetFileName>
 800d010:	4601      	mov	r1, r0
 800d012:	f240 4315 	movw	r3, #1045	; 0x415
 800d016:	4a0f      	ldr	r2, [pc, #60]	; (800d054 <Adv_Request+0xe0>)
 800d018:	480f      	ldr	r0, [pc, #60]	; (800d058 <Adv_Request+0xe4>)
 800d01a:	f000 ffb1 	bl	800df80 <iprintf>
 800d01e:	7bfb      	ldrb	r3, [r7, #15]
 800d020:	4619      	mov	r1, r3
 800d022:	4811      	ldr	r0, [pc, #68]	; (800d068 <Adv_Request+0xf4>)
 800d024:	f000 ffac 	bl	800df80 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800d028:	e00d      	b.n	800d046 <Adv_Request+0xd2>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800d02a:	4809      	ldr	r0, [pc, #36]	; (800d050 <Adv_Request+0xdc>)
 800d02c:	f7fe fb98 	bl	800b760 <DbgTraceGetFileName>
 800d030:	4601      	mov	r1, r0
 800d032:	f240 4319 	movw	r3, #1049	; 0x419
 800d036:	4a07      	ldr	r2, [pc, #28]	; (800d054 <Adv_Request+0xe0>)
 800d038:	4807      	ldr	r0, [pc, #28]	; (800d058 <Adv_Request+0xe4>)
 800d03a:	f000 ffa1 	bl	800df80 <iprintf>
 800d03e:	480b      	ldr	r0, [pc, #44]	; (800d06c <Adv_Request+0xf8>)
 800d040:	f000 ff9e 	bl	800df80 <iprintf>
  return;
 800d044:	bf00      	nop
}
 800d046:	3710      	adds	r7, #16
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}
 800d04c:	200015f0 	.word	0x200015f0
 800d050:	0800f258 	.word	0x0800f258
 800d054:	080102bc 	.word	0x080102bc
 800d058:	0800f274 	.word	0x0800f274
 800d05c:	0800fd58 	.word	0x0800fd58
 800d060:	0800fd90 	.word	0x0800fd90
 800d064:	2000001c 	.word	0x2000001c
 800d068:	0800fdb8 	.word	0x0800fdb8
 800d06c:	0800fdec 	.word	0x0800fdec

0800d070 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b086      	sub	sp, #24
 800d074:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800d076:	f7ff f939 	bl	800c2ec <LL_FLASH_GetUDN>
 800d07a:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d082:	d023      	beq.n	800d0cc <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800d084:	f7ff f94a 	bl	800c31c <LL_FLASH_GetSTCompanyID>
 800d088:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800d08a:	f7ff f93b 	bl	800c304 <LL_FLASH_GetDeviceID>
 800d08e:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800d090:	693b      	ldr	r3, [r7, #16]
 800d092:	b2da      	uxtb	r2, r3
 800d094:	4b16      	ldr	r3, [pc, #88]	; (800d0f0 <BleGetBdAddress+0x80>)
 800d096:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	0a1b      	lsrs	r3, r3, #8
 800d09c:	b2da      	uxtb	r2, r3
 800d09e:	4b14      	ldr	r3, [pc, #80]	; (800d0f0 <BleGetBdAddress+0x80>)
 800d0a0:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	b2da      	uxtb	r2, r3
 800d0a6:	4b12      	ldr	r3, [pc, #72]	; (800d0f0 <BleGetBdAddress+0x80>)
 800d0a8:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	b2da      	uxtb	r2, r3
 800d0ae:	4b10      	ldr	r3, [pc, #64]	; (800d0f0 <BleGetBdAddress+0x80>)
 800d0b0:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	0a1b      	lsrs	r3, r3, #8
 800d0b6:	b2da      	uxtb	r2, r3
 800d0b8:	4b0d      	ldr	r3, [pc, #52]	; (800d0f0 <BleGetBdAddress+0x80>)
 800d0ba:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	0c1b      	lsrs	r3, r3, #16
 800d0c0:	b2da      	uxtb	r2, r3
 800d0c2:	4b0b      	ldr	r3, [pc, #44]	; (800d0f0 <BleGetBdAddress+0x80>)
 800d0c4:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800d0c6:	4b0a      	ldr	r3, [pc, #40]	; (800d0f0 <BleGetBdAddress+0x80>)
 800d0c8:	617b      	str	r3, [r7, #20]
 800d0ca:	e00b      	b.n	800d0e4 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800d0cc:	2000      	movs	r0, #0
 800d0ce:	f7fe fc25 	bl	800b91c <OTP_Read>
 800d0d2:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d002      	beq.n	800d0e0 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	617b      	str	r3, [r7, #20]
 800d0de:	e001      	b.n	800d0e4 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800d0e0:	4b04      	ldr	r3, [pc, #16]	; (800d0f4 <BleGetBdAddress+0x84>)
 800d0e2:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800d0e4:	697b      	ldr	r3, [r7, #20]
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3718      	adds	r7, #24
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}
 800d0ee:	bf00      	nop
 800d0f0:	200015e8 	.word	0x200015e8
 800d0f4:	08010254 	.word	0x08010254

0800d0f8 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800d0fe:	4b1f      	ldr	r3, [pc, #124]	; (800d17c <Adv_Cancel+0x84>)
 800d100:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d104:	2b05      	cmp	r3, #5
 800d106:	d035      	beq.n	800d174 <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d108:	2392      	movs	r3, #146	; 0x92
 800d10a:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800d10c:	f7fc fad6 	bl	80096bc <aci_gap_set_non_discoverable>
 800d110:	4603      	mov	r3, r0
 800d112:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800d114:	4b19      	ldr	r3, [pc, #100]	; (800d17c <Adv_Cancel+0x84>)
 800d116:	2200      	movs	r2, #0
 800d118:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800d11c:	79fb      	ldrb	r3, [r7, #7]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d00d      	beq.n	800d13e <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800d122:	4817      	ldr	r0, [pc, #92]	; (800d180 <Adv_Cancel+0x88>)
 800d124:	f7fe fb1c 	bl	800b760 <DbgTraceGetFileName>
 800d128:	4601      	mov	r1, r0
 800d12a:	f240 4367 	movw	r3, #1127	; 0x467
 800d12e:	4a15      	ldr	r2, [pc, #84]	; (800d184 <Adv_Cancel+0x8c>)
 800d130:	4815      	ldr	r0, [pc, #84]	; (800d188 <Adv_Cancel+0x90>)
 800d132:	f000 ff25 	bl	800df80 <iprintf>
 800d136:	4815      	ldr	r0, [pc, #84]	; (800d18c <Adv_Cancel+0x94>)
 800d138:	f000 ff22 	bl	800df80 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800d13c:	e01a      	b.n	800d174 <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 800d13e:	4810      	ldr	r0, [pc, #64]	; (800d180 <Adv_Cancel+0x88>)
 800d140:	f7fe fb0e 	bl	800b760 <DbgTraceGetFileName>
 800d144:	4601      	mov	r1, r0
 800d146:	f240 436b 	movw	r3, #1131	; 0x46b
 800d14a:	4a0e      	ldr	r2, [pc, #56]	; (800d184 <Adv_Cancel+0x8c>)
 800d14c:	480e      	ldr	r0, [pc, #56]	; (800d188 <Adv_Cancel+0x90>)
 800d14e:	f000 ff17 	bl	800df80 <iprintf>
 800d152:	480f      	ldr	r0, [pc, #60]	; (800d190 <Adv_Cancel+0x98>)
 800d154:	f000 ff14 	bl	800df80 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800d158:	4809      	ldr	r0, [pc, #36]	; (800d180 <Adv_Cancel+0x88>)
 800d15a:	f7fe fb01 	bl	800b760 <DbgTraceGetFileName>
 800d15e:	4601      	mov	r1, r0
 800d160:	f240 436c 	movw	r3, #1132	; 0x46c
 800d164:	4a07      	ldr	r2, [pc, #28]	; (800d184 <Adv_Cancel+0x8c>)
 800d166:	4808      	ldr	r0, [pc, #32]	; (800d188 <Adv_Cancel+0x90>)
 800d168:	f000 ff0a 	bl	800df80 <iprintf>
 800d16c:	4809      	ldr	r0, [pc, #36]	; (800d194 <Adv_Cancel+0x9c>)
 800d16e:	f000 ff07 	bl	800df80 <iprintf>
  return;
 800d172:	bf00      	nop
 800d174:	bf00      	nop
}
 800d176:	3708      	adds	r7, #8
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}
 800d17c:	200015f0 	.word	0x200015f0
 800d180:	0800f258 	.word	0x0800f258
 800d184:	080102c8 	.word	0x080102c8
 800d188:	0800f274 	.word	0x0800f274
 800d18c:	0800fe14 	.word	0x0800fe14
 800d190:	0800fe38 	.word	0x0800fe38
 800d194:	0800fe40 	.word	0x0800fe40

0800d198 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b082      	sub	sp, #8
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800d1a0:	2100      	movs	r1, #0
 800d1a2:	2002      	movs	r0, #2
 800d1a4:	f000 fd0a 	bl	800dbbc <UTIL_SEQ_SetTask>

  return;
 800d1a8:	bf00      	nop
}
 800d1aa:	3708      	adds	r7, #8
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}

0800d1b0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d1b8:	2001      	movs	r0, #1
 800d1ba:	f000 fd6b 	bl	800dc94 <UTIL_SEQ_SetEvt>

  return;
 800d1be:	bf00      	nop
}
 800d1c0:	3708      	adds	r7, #8
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}

0800d1c6 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800d1c6:	b580      	push	{r7, lr}
 800d1c8:	b082      	sub	sp, #8
 800d1ca:	af00      	add	r7, sp, #0
 800d1cc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800d1ce:	2001      	movs	r0, #1
 800d1d0:	f000 fd80 	bl	800dcd4 <UTIL_SEQ_WaitEvt>

  return;
 800d1d4:	bf00      	nop
}
 800d1d6:	3708      	adds	r7, #8
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}

0800d1dc <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b084      	sub	sp, #16
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	685b      	ldr	r3, [r3, #4]
 800d1ec:	3308      	adds	r3, #8
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f7fd fc22 	bl	800aa38 <SVCCTL_UserEvtRx>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800d1f8:	7afb      	ldrb	r3, [r7, #11]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d003      	beq.n	800d206 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2201      	movs	r2, #1
 800d202:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800d204:	e003      	b.n	800d20e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2200      	movs	r2, #0
 800d20a:	701a      	strb	r2, [r3, #0]
  return;
 800d20c:	bf00      	nop
}
 800d20e:	3710      	adds	r7, #16
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b084      	sub	sp, #16
 800d218:	af00      	add	r7, sp, #0
 800d21a:	4603      	mov	r3, r0
 800d21c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800d21e:	79fb      	ldrb	r3, [r7, #7]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d002      	beq.n	800d22a <BLE_StatusNot+0x16>
 800d224:	2b01      	cmp	r3, #1
 800d226:	d006      	beq.n	800d236 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800d228:	e00b      	b.n	800d242 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d22a:	2303      	movs	r3, #3
 800d22c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800d22e:	68f8      	ldr	r0, [r7, #12]
 800d230:	f000 fcf0 	bl	800dc14 <UTIL_SEQ_PauseTask>
      break;
 800d234:	e005      	b.n	800d242 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800d236:	2303      	movs	r3, #3
 800d238:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800d23a:	68f8      	ldr	r0, [r7, #12]
 800d23c:	f000 fd0a 	bl	800dc54 <UTIL_SEQ_ResumeTask>
      break;
 800d240:	bf00      	nop
  }

  return;
 800d242:	bf00      	nop
}
 800d244:	3710      	adds	r7, #16
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}

0800d24a <Custom_APP_Notification>:
  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800d24a:	b480      	push	{r7}
 800d24c:	b083      	sub	sp, #12
 800d24e:	af00      	add	r7, sp, #0
 800d250:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d002      	beq.n	800d260 <Custom_APP_Notification+0x16>
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d002      	beq.n	800d264 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800d25e:	e002      	b.n	800d266 <Custom_APP_Notification+0x1c>
      break;
 800d260:	bf00      	nop
 800d262:	e000      	b.n	800d266 <Custom_APP_Notification+0x1c>
      break;
 800d264:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800d266:	bf00      	nop
}
 800d268:	370c      	adds	r7, #12
 800d26a:	46bd      	mov	sp, r7
 800d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d270:	4770      	bx	lr

0800d272 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800d272:	b480      	push	{r7}
 800d274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 800d276:	bf00      	nop
}
 800d278:	46bd      	mov	sp, r7
 800d27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27e:	4770      	bx	lr

0800d280 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800d280:	b480      	push	{r7}
 800d282:	b087      	sub	sp, #28
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800d288:	2300      	movs	r3, #0
 800d28a:	75fb      	strb	r3, [r7, #23]
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	3301      	adds	r3, #1
 800d290:	613b      	str	r3, [r7, #16]

  switch (event_pckt->evt)
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	2bff      	cmp	r3, #255	; 0xff
 800d298:	d11b      	bne.n	800d2d2 <Custom_STM_Event_Handler+0x52>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	3302      	adds	r3, #2
 800d29e:	60fb      	str	r3, [r7, #12]
      switch (blecore_evt->ecode)
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	881b      	ldrh	r3, [r3, #0]
 800d2a4:	b29b      	uxth	r3, r3
 800d2a6:	f640 4214 	movw	r2, #3092	; 0xc14
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d00b      	beq.n	800d2c6 <Custom_STM_Event_Handler+0x46>
 800d2ae:	f640 4214 	movw	r2, #3092	; 0xc14
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	dc09      	bgt.n	800d2ca <Custom_STM_Event_Handler+0x4a>
 800d2b6:	f640 4201 	movw	r2, #3073	; 0xc01
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	d007      	beq.n	800d2ce <Custom_STM_Event_Handler+0x4e>
 800d2be:	f640 4213 	movw	r2, #3091	; 0xc13
 800d2c2:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800d2c4:	e004      	b.n	800d2d0 <Custom_STM_Event_Handler+0x50>
          break;
 800d2c6:	bf00      	nop
 800d2c8:	e004      	b.n	800d2d4 <Custom_STM_Event_Handler+0x54>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800d2ca:	bf00      	nop
 800d2cc:	e002      	b.n	800d2d4 <Custom_STM_Event_Handler+0x54>
          break;
 800d2ce:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800d2d0:	e000      	b.n	800d2d4 <Custom_STM_Event_Handler+0x54>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800d2d2:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800d2d4:	7dfb      	ldrb	r3, [r7, #23]
}/* end Custom_STM_Event_Handler */
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	371c      	adds	r7, #28
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr
	...

0800d2e4 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b08c      	sub	sp, #48	; 0x30
 800d2e8:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d2ea:	2392      	movs	r3, #146	; 0x92
 800d2ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800d2ee:	4854      	ldr	r0, [pc, #336]	; (800d440 <SVCCTL_InitCustomSvc+0x15c>)
 800d2f0:	f7fd fb88 	bl	800aa04 <SVCCTL_RegisterSvcHandler>
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 800d2f4:	2303      	movs	r3, #3
 800d2f6:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_P2P_SERVER_UUID(uuid.Char_UUID_128);
 800d2f8:	2326      	movs	r3, #38	; 0x26
 800d2fa:	713b      	strb	r3, [r7, #4]
 800d2fc:	2360      	movs	r3, #96	; 0x60
 800d2fe:	717b      	strb	r3, [r7, #5]
 800d300:	2380      	movs	r3, #128	; 0x80
 800d302:	71bb      	strb	r3, [r7, #6]
 800d304:	23a2      	movs	r3, #162	; 0xa2
 800d306:	71fb      	strb	r3, [r7, #7]
 800d308:	239d      	movs	r3, #157	; 0x9d
 800d30a:	723b      	strb	r3, [r7, #8]
 800d30c:	236b      	movs	r3, #107	; 0x6b
 800d30e:	727b      	strb	r3, [r7, #9]
 800d310:	232b      	movs	r3, #43	; 0x2b
 800d312:	72bb      	strb	r3, [r7, #10]
 800d314:	23aa      	movs	r3, #170	; 0xaa
 800d316:	72fb      	strb	r3, [r7, #11]
 800d318:	239f      	movs	r3, #159	; 0x9f
 800d31a:	733b      	strb	r3, [r7, #12]
 800d31c:	2344      	movs	r3, #68	; 0x44
 800d31e:	737b      	strb	r3, [r7, #13]
 800d320:	2327      	movs	r3, #39	; 0x27
 800d322:	73bb      	strb	r3, [r7, #14]
 800d324:	23af      	movs	r3, #175	; 0xaf
 800d326:	73fb      	strb	r3, [r7, #15]
 800d328:	235b      	movs	r3, #91	; 0x5b
 800d32a:	743b      	strb	r3, [r7, #16]
 800d32c:	2366      	movs	r3, #102	; 0x66
 800d32e:	747b      	strb	r3, [r7, #17]
 800d330:	237e      	movs	r3, #126	; 0x7e
 800d332:	74bb      	strb	r3, [r7, #18]
 800d334:	2322      	movs	r3, #34	; 0x22
 800d336:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800d338:	7dbb      	ldrb	r3, [r7, #22]
 800d33a:	1d39      	adds	r1, r7, #4
 800d33c:	4a41      	ldr	r2, [pc, #260]	; (800d444 <SVCCTL_InitCustomSvc+0x160>)
 800d33e:	9200      	str	r2, [sp, #0]
 800d340:	2201      	movs	r2, #1
 800d342:	2002      	movs	r0, #2
 800d344:	f7fc fe26 	bl	8009f94 <aci_gatt_add_service>
 800d348:	4603      	mov	r3, r0
 800d34a:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomP2P_ServerHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800d34c:	7dfb      	ldrb	r3, [r7, #23]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d00e      	beq.n	800d370 <SVCCTL_InitCustomSvc+0x8c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: P2P_Server, error code: 0x%x \n\r", ret);
 800d352:	483d      	ldr	r0, [pc, #244]	; (800d448 <SVCCTL_InitCustomSvc+0x164>)
 800d354:	f7fe fa04 	bl	800b760 <DbgTraceGetFileName>
 800d358:	4601      	mov	r1, r0
 800d35a:	23f9      	movs	r3, #249	; 0xf9
 800d35c:	4a3b      	ldr	r2, [pc, #236]	; (800d44c <SVCCTL_InitCustomSvc+0x168>)
 800d35e:	483c      	ldr	r0, [pc, #240]	; (800d450 <SVCCTL_InitCustomSvc+0x16c>)
 800d360:	f000 fe0e 	bl	800df80 <iprintf>
 800d364:	7dfb      	ldrb	r3, [r7, #23]
 800d366:	4619      	mov	r1, r3
 800d368:	483a      	ldr	r0, [pc, #232]	; (800d454 <SVCCTL_InitCustomSvc+0x170>)
 800d36a:	f000 fe09 	bl	800df80 <iprintf>
 800d36e:	e00b      	b.n	800d388 <SVCCTL_InitCustomSvc+0xa4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: P2P_Server \n\r");
 800d370:	4835      	ldr	r0, [pc, #212]	; (800d448 <SVCCTL_InitCustomSvc+0x164>)
 800d372:	f7fe f9f5 	bl	800b760 <DbgTraceGetFileName>
 800d376:	4601      	mov	r1, r0
 800d378:	23fd      	movs	r3, #253	; 0xfd
 800d37a:	4a34      	ldr	r2, [pc, #208]	; (800d44c <SVCCTL_InitCustomSvc+0x168>)
 800d37c:	4834      	ldr	r0, [pc, #208]	; (800d450 <SVCCTL_InitCustomSvc+0x16c>)
 800d37e:	f000 fdff 	bl	800df80 <iprintf>
 800d382:	4835      	ldr	r0, [pc, #212]	; (800d458 <SVCCTL_InitCustomSvc+0x174>)
 800d384:	f000 fdfc 	bl	800df80 <iprintf>
  }

  /**
   *  My_LED_Char
   */
  COPY_MY_LED_CHAR_UUID(uuid.Char_UUID_128);
 800d388:	2326      	movs	r3, #38	; 0x26
 800d38a:	713b      	strb	r3, [r7, #4]
 800d38c:	2360      	movs	r3, #96	; 0x60
 800d38e:	717b      	strb	r3, [r7, #5]
 800d390:	2380      	movs	r3, #128	; 0x80
 800d392:	71bb      	strb	r3, [r7, #6]
 800d394:	23a2      	movs	r3, #162	; 0xa2
 800d396:	71fb      	strb	r3, [r7, #7]
 800d398:	239d      	movs	r3, #157	; 0x9d
 800d39a:	723b      	strb	r3, [r7, #8]
 800d39c:	236b      	movs	r3, #107	; 0x6b
 800d39e:	727b      	strb	r3, [r7, #9]
 800d3a0:	232b      	movs	r3, #43	; 0x2b
 800d3a2:	72bb      	strb	r3, [r7, #10]
 800d3a4:	23aa      	movs	r3, #170	; 0xaa
 800d3a6:	72fb      	strb	r3, [r7, #11]
 800d3a8:	239f      	movs	r3, #159	; 0x9f
 800d3aa:	733b      	strb	r3, [r7, #12]
 800d3ac:	2344      	movs	r3, #68	; 0x44
 800d3ae:	737b      	strb	r3, [r7, #13]
 800d3b0:	2327      	movs	r3, #39	; 0x27
 800d3b2:	73bb      	strb	r3, [r7, #14]
 800d3b4:	23af      	movs	r3, #175	; 0xaf
 800d3b6:	73fb      	strb	r3, [r7, #15]
 800d3b8:	235c      	movs	r3, #92	; 0x5c
 800d3ba:	743b      	strb	r3, [r7, #16]
 800d3bc:	2366      	movs	r3, #102	; 0x66
 800d3be:	747b      	strb	r3, [r7, #17]
 800d3c0:	237e      	movs	r3, #126	; 0x7e
 800d3c2:	74bb      	strb	r3, [r7, #18]
 800d3c4:	2322      	movs	r3, #34	; 0x22
 800d3c6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomP2P_ServerHdle,
 800d3c8:	4b1e      	ldr	r3, [pc, #120]	; (800d444 <SVCCTL_InitCustomSvc+0x160>)
 800d3ca:	8818      	ldrh	r0, [r3, #0]
 800d3cc:	4b23      	ldr	r3, [pc, #140]	; (800d45c <SVCCTL_InitCustomSvc+0x178>)
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	b29b      	uxth	r3, r3
 800d3d2:	1d3a      	adds	r2, r7, #4
 800d3d4:	4922      	ldr	r1, [pc, #136]	; (800d460 <SVCCTL_InitCustomSvc+0x17c>)
 800d3d6:	9105      	str	r1, [sp, #20]
 800d3d8:	2100      	movs	r1, #0
 800d3da:	9104      	str	r1, [sp, #16]
 800d3dc:	2110      	movs	r1, #16
 800d3de:	9103      	str	r1, [sp, #12]
 800d3e0:	2100      	movs	r1, #0
 800d3e2:	9102      	str	r1, [sp, #8]
 800d3e4:	2101      	movs	r1, #1
 800d3e6:	9101      	str	r1, [sp, #4]
 800d3e8:	2102      	movs	r1, #2
 800d3ea:	9100      	str	r1, [sp, #0]
 800d3ec:	2102      	movs	r1, #2
 800d3ee:	f7fc fea7 	bl	800a140 <aci_gatt_add_char>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_AUTHEN_READ,
                          GATT_DONT_NOTIFY_EVENTS,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomLed_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800d3f6:	7dfb      	ldrb	r3, [r7, #23]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d00f      	beq.n	800d41c <SVCCTL_InitCustomSvc+0x138>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : LED_C, error code: 0x%x \n\r", ret);
 800d3fc:	4812      	ldr	r0, [pc, #72]	; (800d448 <SVCCTL_InitCustomSvc+0x164>)
 800d3fe:	f7fe f9af 	bl	800b760 <DbgTraceGetFileName>
 800d402:	4601      	mov	r1, r0
 800d404:	f240 130f 	movw	r3, #271	; 0x10f
 800d408:	4a10      	ldr	r2, [pc, #64]	; (800d44c <SVCCTL_InitCustomSvc+0x168>)
 800d40a:	4811      	ldr	r0, [pc, #68]	; (800d450 <SVCCTL_InitCustomSvc+0x16c>)
 800d40c:	f000 fdb8 	bl	800df80 <iprintf>
 800d410:	7dfb      	ldrb	r3, [r7, #23]
 800d412:	4619      	mov	r1, r3
 800d414:	4813      	ldr	r0, [pc, #76]	; (800d464 <SVCCTL_InitCustomSvc+0x180>)
 800d416:	f000 fdb3 	bl	800df80 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800d41a:	e00d      	b.n	800d438 <SVCCTL_InitCustomSvc+0x154>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : LED_C \n\r");
 800d41c:	480a      	ldr	r0, [pc, #40]	; (800d448 <SVCCTL_InitCustomSvc+0x164>)
 800d41e:	f7fe f99f 	bl	800b760 <DbgTraceGetFileName>
 800d422:	4601      	mov	r1, r0
 800d424:	f240 1313 	movw	r3, #275	; 0x113
 800d428:	4a08      	ldr	r2, [pc, #32]	; (800d44c <SVCCTL_InitCustomSvc+0x168>)
 800d42a:	4809      	ldr	r0, [pc, #36]	; (800d450 <SVCCTL_InitCustomSvc+0x16c>)
 800d42c:	f000 fda8 	bl	800df80 <iprintf>
 800d430:	480d      	ldr	r0, [pc, #52]	; (800d468 <SVCCTL_InitCustomSvc+0x184>)
 800d432:	f000 fda5 	bl	800df80 <iprintf>
  return;
 800d436:	bf00      	nop
}
 800d438:	3718      	adds	r7, #24
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	0800d281 	.word	0x0800d281
 800d444:	20001678 	.word	0x20001678
 800d448:	0800fe5c 	.word	0x0800fe5c
 800d44c:	080102d4 	.word	0x080102d4
 800d450:	0800fe7c 	.word	0x0800fe7c
 800d454:	0800fe90 	.word	0x0800fe90
 800d458:	0800fedc 	.word	0x0800fedc
 800d45c:	20000035 	.word	0x20000035
 800d460:	2000167a 	.word	0x2000167a
 800d464:	0800ff14 	.word	0x0800ff14
 800d468:	0800ff58 	.word	0x0800ff58

0800d46c <LL_PWR_EnableBootC2>:
{
 800d46c:	b480      	push	{r7}
 800d46e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800d470:	4b05      	ldr	r3, [pc, #20]	; (800d488 <LL_PWR_EnableBootC2+0x1c>)
 800d472:	68db      	ldr	r3, [r3, #12]
 800d474:	4a04      	ldr	r2, [pc, #16]	; (800d488 <LL_PWR_EnableBootC2+0x1c>)
 800d476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d47a:	60d3      	str	r3, [r2, #12]
}
 800d47c:	bf00      	nop
 800d47e:	46bd      	mov	sp, r7
 800d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d484:	4770      	bx	lr
 800d486:	bf00      	nop
 800d488:	58000400 	.word	0x58000400

0800d48c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800d48c:	b480      	push	{r7}
 800d48e:	b083      	sub	sp, #12
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800d494:	4b06      	ldr	r3, [pc, #24]	; (800d4b0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800d496:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800d49a:	4905      	ldr	r1, [pc, #20]	; (800d4b0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	4313      	orrs	r3, r2
 800d4a0:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800d4a4:	bf00      	nop
 800d4a6:	370c      	adds	r7, #12
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr
 800d4b0:	58000800 	.word	0x58000800

0800d4b4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b083      	sub	sp, #12
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800d4bc:	4b05      	ldr	r3, [pc, #20]	; (800d4d4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d4be:	6a1a      	ldr	r2, [r3, #32]
 800d4c0:	4904      	ldr	r1, [pc, #16]	; (800d4d4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	4313      	orrs	r3, r2
 800d4c6:	620b      	str	r3, [r1, #32]
}
 800d4c8:	bf00      	nop
 800d4ca:	370c      	adds	r7, #12
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d2:	4770      	bx	lr
 800d4d4:	58000800 	.word	0x58000800

0800d4d8 <LL_AHB3_GRP1_EnableClock>:
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b085      	sub	sp, #20
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800d4e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d4e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d4e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	4313      	orrs	r3, r2
 800d4ee:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800d4f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d4f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	4013      	ands	r3, r2
 800d4fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
}
 800d4fe:	bf00      	nop
 800d500:	3714      	adds	r7, #20
 800d502:	46bd      	mov	sp, r7
 800d504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d508:	4770      	bx	lr

0800d50a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800d50a:	b480      	push	{r7}
 800d50c:	b085      	sub	sp, #20
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800d512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d516:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800d51a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	4313      	orrs	r3, r2
 800d522:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800d526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d52a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	4013      	ands	r3, r2
 800d532:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d534:	68fb      	ldr	r3, [r7, #12]
}
 800d536:	bf00      	nop
 800d538:	3714      	adds	r7, #20
 800d53a:	46bd      	mov	sp, r7
 800d53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d540:	4770      	bx	lr

0800d542 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800d542:	b480      	push	{r7}
 800d544:	b083      	sub	sp, #12
 800d546:	af00      	add	r7, sp, #0
 800d548:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	601a      	str	r2, [r3, #0]
}
 800d556:	bf00      	nop
 800d558:	370c      	adds	r7, #12
 800d55a:	46bd      	mov	sp, r7
 800d55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d560:	4770      	bx	lr

0800d562 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800d562:	b480      	push	{r7}
 800d564:	b083      	sub	sp, #12
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f043 0201 	orr.w	r2, r3, #1
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	601a      	str	r2, [r3, #0]
}
 800d576:	bf00      	nop
 800d578:	370c      	adds	r7, #12
 800d57a:	46bd      	mov	sp, r7
 800d57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d580:	4770      	bx	lr

0800d582 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d582:	b480      	push	{r7}
 800d584:	b083      	sub	sp, #12
 800d586:	af00      	add	r7, sp, #0
 800d588:	6078      	str	r0, [r7, #4]
 800d58a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	685a      	ldr	r2, [r3, #4]
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	041b      	lsls	r3, r3, #16
 800d594:	43db      	mvns	r3, r3
 800d596:	401a      	ands	r2, r3
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	605a      	str	r2, [r3, #4]
}
 800d59c:	bf00      	nop
 800d59e:	370c      	adds	r7, #12
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a6:	4770      	bx	lr

0800d5a8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b083      	sub	sp, #12
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	685a      	ldr	r2, [r3, #4]
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	041b      	lsls	r3, r3, #16
 800d5ba:	431a      	orrs	r2, r3
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	605a      	str	r2, [r3, #4]
}
 800d5c0:	bf00      	nop
 800d5c2:	370c      	adds	r7, #12
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b083      	sub	sp, #12
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	685a      	ldr	r2, [r3, #4]
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	43db      	mvns	r3, r3
 800d5de:	401a      	ands	r2, r3
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	605a      	str	r2, [r3, #4]
}
 800d5e4:	bf00      	nop
 800d5e6:	370c      	adds	r7, #12
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr

0800d5f0 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b083      	sub	sp, #12
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	683a      	ldr	r2, [r7, #0]
 800d5fe:	609a      	str	r2, [r3, #8]
}
 800d600:	bf00      	nop
 800d602:	370c      	adds	r7, #12
 800d604:	46bd      	mov	sp, r7
 800d606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60a:	4770      	bx	lr

0800d60c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d60c:	b480      	push	{r7}
 800d60e:	b083      	sub	sp, #12
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	041a      	lsls	r2, r3, #16
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	609a      	str	r2, [r3, #8]
}
 800d61e:	bf00      	nop
 800d620:	370c      	adds	r7, #12
 800d622:	46bd      	mov	sp, r7
 800d624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d628:	4770      	bx	lr

0800d62a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d62a:	b480      	push	{r7}
 800d62c:	b083      	sub	sp, #12
 800d62e:	af00      	add	r7, sp, #0
 800d630:	6078      	str	r0, [r7, #4]
 800d632:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	68da      	ldr	r2, [r3, #12]
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	4013      	ands	r3, r2
 800d63c:	683a      	ldr	r2, [r7, #0]
 800d63e:	429a      	cmp	r2, r3
 800d640:	d101      	bne.n	800d646 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800d642:	2301      	movs	r3, #1
 800d644:	e000      	b.n	800d648 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800d646:	2300      	movs	r3, #0
}
 800d648:	4618      	mov	r0, r3
 800d64a:	370c      	adds	r7, #12
 800d64c:	46bd      	mov	sp, r7
 800d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d652:	4770      	bx	lr

0800d654 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d654:	b480      	push	{r7}
 800d656:	b083      	sub	sp, #12
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
 800d65c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	69da      	ldr	r2, [r3, #28]
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	4013      	ands	r3, r2
 800d666:	683a      	ldr	r2, [r7, #0]
 800d668:	429a      	cmp	r2, r3
 800d66a:	d101      	bne.n	800d670 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800d66c:	2301      	movs	r3, #1
 800d66e:	e000      	b.n	800d672 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800d670:	2300      	movs	r3, #0
}
 800d672:	4618      	mov	r0, r3
 800d674:	370c      	adds	r7, #12
 800d676:	46bd      	mov	sp, r7
 800d678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67c:	4770      	bx	lr
	...

0800d680 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800d680:	b580      	push	{r7, lr}
 800d682:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800d684:	2102      	movs	r1, #2
 800d686:	4818      	ldr	r0, [pc, #96]	; (800d6e8 <HW_IPCC_Rx_Handler+0x68>)
 800d688:	f7ff ffe4 	bl	800d654 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d68c:	4603      	mov	r3, r0
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d008      	beq.n	800d6a4 <HW_IPCC_Rx_Handler+0x24>
 800d692:	4b15      	ldr	r3, [pc, #84]	; (800d6e8 <HW_IPCC_Rx_Handler+0x68>)
 800d694:	685b      	ldr	r3, [r3, #4]
 800d696:	f003 0302 	and.w	r3, r3, #2
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d102      	bne.n	800d6a4 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800d69e:	f000 f8d5 	bl	800d84c <HW_IPCC_SYS_EvtHandler>
 800d6a2:	e01e      	b.n	800d6e2 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800d6a4:	2101      	movs	r1, #1
 800d6a6:	4810      	ldr	r0, [pc, #64]	; (800d6e8 <HW_IPCC_Rx_Handler+0x68>)
 800d6a8:	f7ff ffd4 	bl	800d654 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d008      	beq.n	800d6c4 <HW_IPCC_Rx_Handler+0x44>
 800d6b2:	4b0d      	ldr	r3, [pc, #52]	; (800d6e8 <HW_IPCC_Rx_Handler+0x68>)
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	f003 0301 	and.w	r3, r3, #1
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d102      	bne.n	800d6c4 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800d6be:	f000 f889 	bl	800d7d4 <HW_IPCC_BLE_EvtHandler>
 800d6c2:	e00e      	b.n	800d6e2 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800d6c4:	2108      	movs	r1, #8
 800d6c6:	4808      	ldr	r0, [pc, #32]	; (800d6e8 <HW_IPCC_Rx_Handler+0x68>)
 800d6c8:	f7ff ffc4 	bl	800d654 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d008      	beq.n	800d6e4 <HW_IPCC_Rx_Handler+0x64>
 800d6d2:	4b05      	ldr	r3, [pc, #20]	; (800d6e8 <HW_IPCC_Rx_Handler+0x68>)
 800d6d4:	685b      	ldr	r3, [r3, #4]
 800d6d6:	f003 0308 	and.w	r3, r3, #8
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d102      	bne.n	800d6e4 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800d6de:	f000 f901 	bl	800d8e4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800d6e2:	bf00      	nop
 800d6e4:	bf00      	nop
}
 800d6e6:	bd80      	pop	{r7, pc}
 800d6e8:	58000c00 	.word	0x58000c00

0800d6ec <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d6f0:	2102      	movs	r1, #2
 800d6f2:	4818      	ldr	r0, [pc, #96]	; (800d754 <HW_IPCC_Tx_Handler+0x68>)
 800d6f4:	f7ff ff99 	bl	800d62a <LL_C1_IPCC_IsActiveFlag_CHx>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d108      	bne.n	800d710 <HW_IPCC_Tx_Handler+0x24>
 800d6fe:	4b15      	ldr	r3, [pc, #84]	; (800d754 <HW_IPCC_Tx_Handler+0x68>)
 800d700:	685b      	ldr	r3, [r3, #4]
 800d702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d706:	2b00      	cmp	r3, #0
 800d708:	d102      	bne.n	800d710 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d70a:	f000 f893 	bl	800d834 <HW_IPCC_SYS_CmdEvtHandler>
 800d70e:	e01e      	b.n	800d74e <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800d710:	2108      	movs	r1, #8
 800d712:	4810      	ldr	r0, [pc, #64]	; (800d754 <HW_IPCC_Tx_Handler+0x68>)
 800d714:	f7ff ff89 	bl	800d62a <LL_C1_IPCC_IsActiveFlag_CHx>
 800d718:	4603      	mov	r3, r0
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d108      	bne.n	800d730 <HW_IPCC_Tx_Handler+0x44>
 800d71e:	4b0d      	ldr	r3, [pc, #52]	; (800d754 <HW_IPCC_Tx_Handler+0x68>)
 800d720:	685b      	ldr	r3, [r3, #4]
 800d722:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d726:	2b00      	cmp	r3, #0
 800d728:	d102      	bne.n	800d730 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800d72a:	f000 f8bd 	bl	800d8a8 <HW_IPCC_MM_FreeBufHandler>
 800d72e:	e00e      	b.n	800d74e <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800d730:	2120      	movs	r1, #32
 800d732:	4808      	ldr	r0, [pc, #32]	; (800d754 <HW_IPCC_Tx_Handler+0x68>)
 800d734:	f7ff ff79 	bl	800d62a <LL_C1_IPCC_IsActiveFlag_CHx>
 800d738:	4603      	mov	r3, r0
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d108      	bne.n	800d750 <HW_IPCC_Tx_Handler+0x64>
 800d73e:	4b05      	ldr	r3, [pc, #20]	; (800d754 <HW_IPCC_Tx_Handler+0x68>)
 800d740:	685b      	ldr	r3, [r3, #4]
 800d742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d746:	2b00      	cmp	r3, #0
 800d748:	d102      	bne.n	800d750 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800d74a:	f000 f84f 	bl	800d7ec <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800d74e:	bf00      	nop
 800d750:	bf00      	nop
}
 800d752:	bd80      	pop	{r7, pc}
 800d754:	58000c00 	.word	0x58000c00

0800d758 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800d75c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d760:	f7ff fed3 	bl	800d50a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800d764:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d768:	f7ff fea4 	bl	800d4b4 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800d76c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d770:	f7ff fe8c 	bl	800d48c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800d774:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800d776:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800d778:	f7ff fe78 	bl	800d46c <LL_PWR_EnableBootC2>

  return;
 800d77c:	bf00      	nop
}
 800d77e:	bd80      	pop	{r7, pc}

0800d780 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800d780:	b580      	push	{r7, lr}
 800d782:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800d784:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d788:	f7ff fea6 	bl	800d4d8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800d78c:	4806      	ldr	r0, [pc, #24]	; (800d7a8 <HW_IPCC_Init+0x28>)
 800d78e:	f7ff fee8 	bl	800d562 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800d792:	4805      	ldr	r0, [pc, #20]	; (800d7a8 <HW_IPCC_Init+0x28>)
 800d794:	f7ff fed5 	bl	800d542 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800d798:	202c      	movs	r0, #44	; 0x2c
 800d79a:	f7f5 fe82 	bl	80034a2 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800d79e:	202d      	movs	r0, #45	; 0x2d
 800d7a0:	f7f5 fe7f 	bl	80034a2 <HAL_NVIC_EnableIRQ>

  return;
 800d7a4:	bf00      	nop
}
 800d7a6:	bd80      	pop	{r7, pc}
 800d7a8:	58000c00 	.word	0x58000c00

0800d7ac <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d7b0:	2101      	movs	r1, #1
 800d7b2:	4802      	ldr	r0, [pc, #8]	; (800d7bc <HW_IPCC_BLE_Init+0x10>)
 800d7b4:	f7ff ff0a 	bl	800d5cc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d7b8:	bf00      	nop
}
 800d7ba:	bd80      	pop	{r7, pc}
 800d7bc:	58000c00 	.word	0x58000c00

0800d7c0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800d7c4:	2101      	movs	r1, #1
 800d7c6:	4802      	ldr	r0, [pc, #8]	; (800d7d0 <HW_IPCC_BLE_SendCmd+0x10>)
 800d7c8:	f7ff ff20 	bl	800d60c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d7cc:	bf00      	nop
}
 800d7ce:	bd80      	pop	{r7, pc}
 800d7d0:	58000c00 	.word	0x58000c00

0800d7d4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800d7d8:	f7fd fe0a 	bl	800b3f0 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d7dc:	2101      	movs	r1, #1
 800d7de:	4802      	ldr	r0, [pc, #8]	; (800d7e8 <HW_IPCC_BLE_EvtHandler+0x14>)
 800d7e0:	f7ff ff06 	bl	800d5f0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d7e4:	bf00      	nop
}
 800d7e6:	bd80      	pop	{r7, pc}
 800d7e8:	58000c00 	.word	0x58000c00

0800d7ec <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800d7f0:	2120      	movs	r1, #32
 800d7f2:	4803      	ldr	r0, [pc, #12]	; (800d800 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800d7f4:	f7ff fed8 	bl	800d5a8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800d7f8:	f7fd fe2a 	bl	800b450 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800d7fc:	bf00      	nop
}
 800d7fe:	bd80      	pop	{r7, pc}
 800d800:	58000c00 	.word	0x58000c00

0800d804 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800d804:	b580      	push	{r7, lr}
 800d806:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d808:	2102      	movs	r1, #2
 800d80a:	4802      	ldr	r0, [pc, #8]	; (800d814 <HW_IPCC_SYS_Init+0x10>)
 800d80c:	f7ff fede 	bl	800d5cc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d810:	bf00      	nop
}
 800d812:	bd80      	pop	{r7, pc}
 800d814:	58000c00 	.word	0x58000c00

0800d818 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d81c:	2102      	movs	r1, #2
 800d81e:	4804      	ldr	r0, [pc, #16]	; (800d830 <HW_IPCC_SYS_SendCmd+0x18>)
 800d820:	f7ff fef4 	bl	800d60c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d824:	2102      	movs	r1, #2
 800d826:	4802      	ldr	r0, [pc, #8]	; (800d830 <HW_IPCC_SYS_SendCmd+0x18>)
 800d828:	f7ff feab 	bl	800d582 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800d82c:	bf00      	nop
}
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	58000c00 	.word	0x58000c00

0800d834 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800d834:	b580      	push	{r7, lr}
 800d836:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d838:	2102      	movs	r1, #2
 800d83a:	4803      	ldr	r0, [pc, #12]	; (800d848 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800d83c:	f7ff feb4 	bl	800d5a8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800d840:	f7fd fe56 	bl	800b4f0 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800d844:	bf00      	nop
}
 800d846:	bd80      	pop	{r7, pc}
 800d848:	58000c00 	.word	0x58000c00

0800d84c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800d850:	f7fd fe64 	bl	800b51c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d854:	2102      	movs	r1, #2
 800d856:	4802      	ldr	r0, [pc, #8]	; (800d860 <HW_IPCC_SYS_EvtHandler+0x14>)
 800d858:	f7ff feca 	bl	800d5f0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d85c:	bf00      	nop
}
 800d85e:	bd80      	pop	{r7, pc}
 800d860:	58000c00 	.word	0x58000c00

0800d864 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b082      	sub	sp, #8
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800d86c:	2108      	movs	r1, #8
 800d86e:	480c      	ldr	r0, [pc, #48]	; (800d8a0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d870:	f7ff fedb 	bl	800d62a <LL_C1_IPCC_IsActiveFlag_CHx>
 800d874:	4603      	mov	r3, r0
 800d876:	2b00      	cmp	r3, #0
 800d878:	d007      	beq.n	800d88a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800d87a:	4a0a      	ldr	r2, [pc, #40]	; (800d8a4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d880:	2108      	movs	r1, #8
 800d882:	4807      	ldr	r0, [pc, #28]	; (800d8a0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d884:	f7ff fe7d 	bl	800d582 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800d888:	e006      	b.n	800d898 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d88e:	2108      	movs	r1, #8
 800d890:	4803      	ldr	r0, [pc, #12]	; (800d8a0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d892:	f7ff febb 	bl	800d60c <LL_C1_IPCC_SetFlag_CHx>
  return;
 800d896:	bf00      	nop
}
 800d898:	3708      	adds	r7, #8
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	58000c00 	.word	0x58000c00
 800d8a4:	2000167c 	.word	0x2000167c

0800d8a8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d8ac:	2108      	movs	r1, #8
 800d8ae:	4806      	ldr	r0, [pc, #24]	; (800d8c8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d8b0:	f7ff fe7a 	bl	800d5a8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800d8b4:	4b05      	ldr	r3, [pc, #20]	; (800d8cc <HW_IPCC_MM_FreeBufHandler+0x24>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d8ba:	2108      	movs	r1, #8
 800d8bc:	4802      	ldr	r0, [pc, #8]	; (800d8c8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d8be:	f7ff fea5 	bl	800d60c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d8c2:	bf00      	nop
}
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	58000c00 	.word	0x58000c00
 800d8cc:	2000167c 	.word	0x2000167c

0800d8d0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d8d4:	2108      	movs	r1, #8
 800d8d6:	4802      	ldr	r0, [pc, #8]	; (800d8e0 <HW_IPCC_TRACES_Init+0x10>)
 800d8d8:	f7ff fe78 	bl	800d5cc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d8dc:	bf00      	nop
}
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	58000c00 	.word	0x58000c00

0800d8e4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800d8e8:	f7fd fec0 	bl	800b66c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d8ec:	2108      	movs	r1, #8
 800d8ee:	4802      	ldr	r0, [pc, #8]	; (800d8f8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800d8f0:	f7ff fe7e 	bl	800d5f0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d8f4:	bf00      	nop
}
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	58000c00 	.word	0x58000c00

0800d8fc <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800d900:	4b05      	ldr	r3, [pc, #20]	; (800d918 <UTIL_LPM_Init+0x1c>)
 800d902:	2200      	movs	r2, #0
 800d904:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800d906:	4b05      	ldr	r3, [pc, #20]	; (800d91c <UTIL_LPM_Init+0x20>)
 800d908:	2200      	movs	r2, #0
 800d90a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800d90c:	bf00      	nop
 800d90e:	46bd      	mov	sp, r7
 800d910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d914:	4770      	bx	lr
 800d916:	bf00      	nop
 800d918:	20001680 	.word	0x20001680
 800d91c:	20001684 	.word	0x20001684

0800d920 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800d920:	b480      	push	{r7}
 800d922:	b087      	sub	sp, #28
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
 800d928:	460b      	mov	r3, r1
 800d92a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d92c:	f3ef 8310 	mrs	r3, PRIMASK
 800d930:	613b      	str	r3, [r7, #16]
  return(result);
 800d932:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800d934:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d936:	b672      	cpsid	i
}
 800d938:	bf00      	nop
  
  switch(state)
 800d93a:	78fb      	ldrb	r3, [r7, #3]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d008      	beq.n	800d952 <UTIL_LPM_SetOffMode+0x32>
 800d940:	2b01      	cmp	r3, #1
 800d942:	d10e      	bne.n	800d962 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800d944:	4b0d      	ldr	r3, [pc, #52]	; (800d97c <UTIL_LPM_SetOffMode+0x5c>)
 800d946:	681a      	ldr	r2, [r3, #0]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	4313      	orrs	r3, r2
 800d94c:	4a0b      	ldr	r2, [pc, #44]	; (800d97c <UTIL_LPM_SetOffMode+0x5c>)
 800d94e:	6013      	str	r3, [r2, #0]
      break;
 800d950:	e008      	b.n	800d964 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	43da      	mvns	r2, r3
 800d956:	4b09      	ldr	r3, [pc, #36]	; (800d97c <UTIL_LPM_SetOffMode+0x5c>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	4013      	ands	r3, r2
 800d95c:	4a07      	ldr	r2, [pc, #28]	; (800d97c <UTIL_LPM_SetOffMode+0x5c>)
 800d95e:	6013      	str	r3, [r2, #0]
      break;
 800d960:	e000      	b.n	800d964 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800d962:	bf00      	nop
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f383 8810 	msr	PRIMASK, r3
}
 800d96e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800d970:	bf00      	nop
 800d972:	371c      	adds	r7, #28
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr
 800d97c:	20001684 	.word	0x20001684

0800d980 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b090      	sub	sp, #64	; 0x40
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800d988:	4b73      	ldr	r3, [pc, #460]	; (800db58 <UTIL_SEQ_Run+0x1d8>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800d98e:	4b72      	ldr	r3, [pc, #456]	; (800db58 <UTIL_SEQ_Run+0x1d8>)
 800d990:	681a      	ldr	r2, [r3, #0]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	4013      	ands	r3, r2
 800d996:	4a70      	ldr	r2, [pc, #448]	; (800db58 <UTIL_SEQ_Run+0x1d8>)
 800d998:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800d99a:	4b70      	ldr	r3, [pc, #448]	; (800db5c <UTIL_SEQ_Run+0x1dc>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800d9a0:	4b6f      	ldr	r3, [pc, #444]	; (800db60 <UTIL_SEQ_Run+0x1e0>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800d9a6:	4b6f      	ldr	r3, [pc, #444]	; (800db64 <UTIL_SEQ_Run+0x1e4>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800d9ac:	4b6e      	ldr	r3, [pc, #440]	; (800db68 <UTIL_SEQ_Run+0x1e8>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800d9b2:	e08d      	b.n	800dad0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800d9b8:	e002      	b.n	800d9c0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800d9ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9bc:	3301      	adds	r3, #1
 800d9be:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800d9c0:	4a6a      	ldr	r2, [pc, #424]	; (800db6c <UTIL_SEQ_Run+0x1ec>)
 800d9c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9c4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ca:	401a      	ands	r2, r3
 800d9cc:	4b62      	ldr	r3, [pc, #392]	; (800db58 <UTIL_SEQ_Run+0x1d8>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4013      	ands	r3, r2
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d0f1      	beq.n	800d9ba <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800d9d6:	4a65      	ldr	r2, [pc, #404]	; (800db6c <UTIL_SEQ_Run+0x1ec>)
 800d9d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9da:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e0:	401a      	ands	r2, r3
 800d9e2:	4b5d      	ldr	r3, [pc, #372]	; (800db58 <UTIL_SEQ_Run+0x1d8>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	4013      	ands	r3, r2
 800d9e8:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800d9ea:	4a60      	ldr	r2, [pc, #384]	; (800db6c <UTIL_SEQ_Run+0x1ec>)
 800d9ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9ee:	00db      	lsls	r3, r3, #3
 800d9f0:	4413      	add	r3, r2
 800d9f2:	685a      	ldr	r2, [r3, #4]
 800d9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f6:	4013      	ands	r3, r2
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d106      	bne.n	800da0a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800d9fc:	4a5b      	ldr	r2, [pc, #364]	; (800db6c <UTIL_SEQ_Run+0x1ec>)
 800d9fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da00:	00db      	lsls	r3, r3, #3
 800da02:	4413      	add	r3, r2
 800da04:	f04f 32ff 	mov.w	r2, #4294967295
 800da08:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800da0a:	4a58      	ldr	r2, [pc, #352]	; (800db6c <UTIL_SEQ_Run+0x1ec>)
 800da0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da0e:	00db      	lsls	r3, r3, #3
 800da10:	4413      	add	r3, r2
 800da12:	685a      	ldr	r2, [r3, #4]
 800da14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da16:	4013      	ands	r3, r2
 800da18:	4618      	mov	r0, r3
 800da1a:	f000 f9b3 	bl	800dd84 <SEQ_BitPosition>
 800da1e:	4603      	mov	r3, r0
 800da20:	461a      	mov	r2, r3
 800da22:	4b53      	ldr	r3, [pc, #332]	; (800db70 <UTIL_SEQ_Run+0x1f0>)
 800da24:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800da26:	4a51      	ldr	r2, [pc, #324]	; (800db6c <UTIL_SEQ_Run+0x1ec>)
 800da28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da2a:	00db      	lsls	r3, r3, #3
 800da2c:	4413      	add	r3, r2
 800da2e:	685a      	ldr	r2, [r3, #4]
 800da30:	4b4f      	ldr	r3, [pc, #316]	; (800db70 <UTIL_SEQ_Run+0x1f0>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2101      	movs	r1, #1
 800da36:	fa01 f303 	lsl.w	r3, r1, r3
 800da3a:	43db      	mvns	r3, r3
 800da3c:	401a      	ands	r2, r3
 800da3e:	494b      	ldr	r1, [pc, #300]	; (800db6c <UTIL_SEQ_Run+0x1ec>)
 800da40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da42:	00db      	lsls	r3, r3, #3
 800da44:	440b      	add	r3, r1
 800da46:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da48:	f3ef 8310 	mrs	r3, PRIMASK
 800da4c:	61bb      	str	r3, [r7, #24]
  return(result);
 800da4e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800da50:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800da52:	b672      	cpsid	i
}
 800da54:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800da56:	4b46      	ldr	r3, [pc, #280]	; (800db70 <UTIL_SEQ_Run+0x1f0>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	2201      	movs	r2, #1
 800da5c:	fa02 f303 	lsl.w	r3, r2, r3
 800da60:	43da      	mvns	r2, r3
 800da62:	4b3e      	ldr	r3, [pc, #248]	; (800db5c <UTIL_SEQ_Run+0x1dc>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	4013      	ands	r3, r2
 800da68:	4a3c      	ldr	r2, [pc, #240]	; (800db5c <UTIL_SEQ_Run+0x1dc>)
 800da6a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800da6c:	2302      	movs	r3, #2
 800da6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da70:	e013      	b.n	800da9a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800da72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da74:	3b01      	subs	r3, #1
 800da76:	4a3d      	ldr	r2, [pc, #244]	; (800db6c <UTIL_SEQ_Run+0x1ec>)
 800da78:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800da7c:	4b3c      	ldr	r3, [pc, #240]	; (800db70 <UTIL_SEQ_Run+0x1f0>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2201      	movs	r2, #1
 800da82:	fa02 f303 	lsl.w	r3, r2, r3
 800da86:	43da      	mvns	r2, r3
 800da88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da8a:	3b01      	subs	r3, #1
 800da8c:	400a      	ands	r2, r1
 800da8e:	4937      	ldr	r1, [pc, #220]	; (800db6c <UTIL_SEQ_Run+0x1ec>)
 800da90:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800da94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da96:	3b01      	subs	r3, #1
 800da98:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d1e8      	bne.n	800da72 <UTIL_SEQ_Run+0xf2>
 800daa0:	6a3b      	ldr	r3, [r7, #32]
 800daa2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	f383 8810 	msr	PRIMASK, r3
}
 800daaa:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800daac:	4b30      	ldr	r3, [pc, #192]	; (800db70 <UTIL_SEQ_Run+0x1f0>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	4a30      	ldr	r2, [pc, #192]	; (800db74 <UTIL_SEQ_Run+0x1f4>)
 800dab2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dab6:	4798      	blx	r3

    local_taskset = TaskSet;
 800dab8:	4b28      	ldr	r3, [pc, #160]	; (800db5c <UTIL_SEQ_Run+0x1dc>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800dabe:	4b28      	ldr	r3, [pc, #160]	; (800db60 <UTIL_SEQ_Run+0x1e0>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800dac4:	4b27      	ldr	r3, [pc, #156]	; (800db64 <UTIL_SEQ_Run+0x1e4>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800daca:	4b27      	ldr	r3, [pc, #156]	; (800db68 <UTIL_SEQ_Run+0x1e8>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800dad0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad4:	401a      	ands	r2, r3
 800dad6:	4b20      	ldr	r3, [pc, #128]	; (800db58 <UTIL_SEQ_Run+0x1d8>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	4013      	ands	r3, r2
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d005      	beq.n	800daec <UTIL_SEQ_Run+0x16c>
 800dae0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae4:	4013      	ands	r3, r2
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	f43f af64 	beq.w	800d9b4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800daec:	4b20      	ldr	r3, [pc, #128]	; (800db70 <UTIL_SEQ_Run+0x1f0>)
 800daee:	f04f 32ff 	mov.w	r2, #4294967295
 800daf2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800daf4:	f000 f938 	bl	800dd68 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800daf8:	f3ef 8310 	mrs	r3, PRIMASK
 800dafc:	613b      	str	r3, [r7, #16]
  return(result);
 800dafe:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800db00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800db02:	b672      	cpsid	i
}
 800db04:	bf00      	nop
  local_taskset = TaskSet;
 800db06:	4b15      	ldr	r3, [pc, #84]	; (800db5c <UTIL_SEQ_Run+0x1dc>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800db0c:	4b14      	ldr	r3, [pc, #80]	; (800db60 <UTIL_SEQ_Run+0x1e0>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800db12:	4b14      	ldr	r3, [pc, #80]	; (800db64 <UTIL_SEQ_Run+0x1e4>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800db18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db1c:	401a      	ands	r2, r3
 800db1e:	4b0e      	ldr	r3, [pc, #56]	; (800db58 <UTIL_SEQ_Run+0x1d8>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	4013      	ands	r3, r2
 800db24:	2b00      	cmp	r3, #0
 800db26:	d107      	bne.n	800db38 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800db28:	4b0f      	ldr	r3, [pc, #60]	; (800db68 <UTIL_SEQ_Run+0x1e8>)
 800db2a:	681a      	ldr	r2, [r3, #0]
 800db2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db2e:	4013      	ands	r3, r2
 800db30:	2b00      	cmp	r3, #0
 800db32:	d101      	bne.n	800db38 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800db34:	f7f3 fc80 	bl	8001438 <UTIL_SEQ_Idle>
 800db38:	69fb      	ldr	r3, [r7, #28]
 800db3a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	f383 8810 	msr	PRIMASK, r3
}
 800db42:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800db44:	f000 f917 	bl	800dd76 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800db48:	4a03      	ldr	r2, [pc, #12]	; (800db58 <UTIL_SEQ_Run+0x1d8>)
 800db4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db4c:	6013      	str	r3, [r2, #0]

  return;
 800db4e:	bf00      	nop
}
 800db50:	3740      	adds	r7, #64	; 0x40
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}
 800db56:	bf00      	nop
 800db58:	2000003c 	.word	0x2000003c
 800db5c:	20001688 	.word	0x20001688
 800db60:	2000168c 	.word	0x2000168c
 800db64:	20000038 	.word	0x20000038
 800db68:	20001690 	.word	0x20001690
 800db6c:	20001718 	.word	0x20001718
 800db70:	20001694 	.word	0x20001694
 800db74:	20001698 	.word	0x20001698

0800db78 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b088      	sub	sp, #32
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	60f8      	str	r0, [r7, #12]
 800db80:	60b9      	str	r1, [r7, #8]
 800db82:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db84:	f3ef 8310 	mrs	r3, PRIMASK
 800db88:	617b      	str	r3, [r7, #20]
  return(result);
 800db8a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800db8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800db8e:	b672      	cpsid	i
}
 800db90:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800db92:	68f8      	ldr	r0, [r7, #12]
 800db94:	f000 f8f6 	bl	800dd84 <SEQ_BitPosition>
 800db98:	4603      	mov	r3, r0
 800db9a:	4619      	mov	r1, r3
 800db9c:	4a06      	ldr	r2, [pc, #24]	; (800dbb8 <UTIL_SEQ_RegTask+0x40>)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800dba4:	69fb      	ldr	r3, [r7, #28]
 800dba6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dba8:	69bb      	ldr	r3, [r7, #24]
 800dbaa:	f383 8810 	msr	PRIMASK, r3
}
 800dbae:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800dbb0:	bf00      	nop
}
 800dbb2:	3720      	adds	r7, #32
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}
 800dbb8:	20001698 	.word	0x20001698

0800dbbc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b087      	sub	sp, #28
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dbc6:	f3ef 8310 	mrs	r3, PRIMASK
 800dbca:	60fb      	str	r3, [r7, #12]
  return(result);
 800dbcc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dbce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dbd0:	b672      	cpsid	i
}
 800dbd2:	bf00      	nop

  TaskSet |= TaskId_bm;
 800dbd4:	4b0d      	ldr	r3, [pc, #52]	; (800dc0c <UTIL_SEQ_SetTask+0x50>)
 800dbd6:	681a      	ldr	r2, [r3, #0]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	4313      	orrs	r3, r2
 800dbdc:	4a0b      	ldr	r2, [pc, #44]	; (800dc0c <UTIL_SEQ_SetTask+0x50>)
 800dbde:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800dbe0:	4a0b      	ldr	r2, [pc, #44]	; (800dc10 <UTIL_SEQ_SetTask+0x54>)
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	431a      	orrs	r2, r3
 800dbec:	4908      	ldr	r1, [pc, #32]	; (800dc10 <UTIL_SEQ_SetTask+0x54>)
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	f383 8810 	msr	PRIMASK, r3
}
 800dbfe:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800dc00:	bf00      	nop
}
 800dc02:	371c      	adds	r7, #28
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr
 800dc0c:	20001688 	.word	0x20001688
 800dc10:	20001718 	.word	0x20001718

0800dc14 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800dc14:	b480      	push	{r7}
 800dc16:	b087      	sub	sp, #28
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc1c:	f3ef 8310 	mrs	r3, PRIMASK
 800dc20:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc22:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dc24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dc26:	b672      	cpsid	i
}
 800dc28:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	43da      	mvns	r2, r3
 800dc2e:	4b08      	ldr	r3, [pc, #32]	; (800dc50 <UTIL_SEQ_PauseTask+0x3c>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	4013      	ands	r3, r2
 800dc34:	4a06      	ldr	r2, [pc, #24]	; (800dc50 <UTIL_SEQ_PauseTask+0x3c>)
 800dc36:	6013      	str	r3, [r2, #0]
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	f383 8810 	msr	PRIMASK, r3
}
 800dc42:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800dc44:	bf00      	nop
}
 800dc46:	371c      	adds	r7, #28
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr
 800dc50:	20000038 	.word	0x20000038

0800dc54 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800dc54:	b480      	push	{r7}
 800dc56:	b087      	sub	sp, #28
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc5c:	f3ef 8310 	mrs	r3, PRIMASK
 800dc60:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc62:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dc64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dc66:	b672      	cpsid	i
}
 800dc68:	bf00      	nop

  TaskMask |= TaskId_bm;
 800dc6a:	4b09      	ldr	r3, [pc, #36]	; (800dc90 <UTIL_SEQ_ResumeTask+0x3c>)
 800dc6c:	681a      	ldr	r2, [r3, #0]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	4313      	orrs	r3, r2
 800dc72:	4a07      	ldr	r2, [pc, #28]	; (800dc90 <UTIL_SEQ_ResumeTask+0x3c>)
 800dc74:	6013      	str	r3, [r2, #0]
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	f383 8810 	msr	PRIMASK, r3
}
 800dc80:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800dc82:	bf00      	nop
}
 800dc84:	371c      	adds	r7, #28
 800dc86:	46bd      	mov	sp, r7
 800dc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8c:	4770      	bx	lr
 800dc8e:	bf00      	nop
 800dc90:	20000038 	.word	0x20000038

0800dc94 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800dc94:	b480      	push	{r7}
 800dc96:	b087      	sub	sp, #28
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc9c:	f3ef 8310 	mrs	r3, PRIMASK
 800dca0:	60fb      	str	r3, [r7, #12]
  return(result);
 800dca2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dca4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800dca6:	b672      	cpsid	i
}
 800dca8:	bf00      	nop

  EvtSet |= EvtId_bm;
 800dcaa:	4b09      	ldr	r3, [pc, #36]	; (800dcd0 <UTIL_SEQ_SetEvt+0x3c>)
 800dcac:	681a      	ldr	r2, [r3, #0]
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	4313      	orrs	r3, r2
 800dcb2:	4a07      	ldr	r2, [pc, #28]	; (800dcd0 <UTIL_SEQ_SetEvt+0x3c>)
 800dcb4:	6013      	str	r3, [r2, #0]
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	f383 8810 	msr	PRIMASK, r3
}
 800dcc0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800dcc2:	bf00      	nop
}
 800dcc4:	371c      	adds	r7, #28
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dccc:	4770      	bx	lr
 800dcce:	bf00      	nop
 800dcd0:	2000168c 	.word	0x2000168c

0800dcd4 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b088      	sub	sp, #32
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800dcdc:	4b1f      	ldr	r3, [pc, #124]	; (800dd5c <UTIL_SEQ_WaitEvt+0x88>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800dce2:	4b1e      	ldr	r3, [pc, #120]	; (800dd5c <UTIL_SEQ_WaitEvt+0x88>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcea:	d102      	bne.n	800dcf2 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800dcec:	2300      	movs	r3, #0
 800dcee:	61fb      	str	r3, [r7, #28]
 800dcf0:	e005      	b.n	800dcfe <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800dcf2:	4b1a      	ldr	r3, [pc, #104]	; (800dd5c <UTIL_SEQ_WaitEvt+0x88>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	fa02 f303 	lsl.w	r3, r2, r3
 800dcfc:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800dcfe:	4b18      	ldr	r3, [pc, #96]	; (800dd60 <UTIL_SEQ_WaitEvt+0x8c>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800dd04:	4a16      	ldr	r2, [pc, #88]	; (800dd60 <UTIL_SEQ_WaitEvt+0x8c>)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800dd0a:	e003      	b.n	800dd14 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800dd0c:	6879      	ldr	r1, [r7, #4]
 800dd0e:	69f8      	ldr	r0, [r7, #28]
 800dd10:	f7f3 fb99 	bl	8001446 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800dd14:	4b13      	ldr	r3, [pc, #76]	; (800dd64 <UTIL_SEQ_WaitEvt+0x90>)
 800dd16:	681a      	ldr	r2, [r3, #0]
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	4013      	ands	r3, r2
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d0f5      	beq.n	800dd0c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800dd20:	4a0e      	ldr	r2, [pc, #56]	; (800dd5c <UTIL_SEQ_WaitEvt+0x88>)
 800dd22:	69bb      	ldr	r3, [r7, #24]
 800dd24:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd26:	f3ef 8310 	mrs	r3, PRIMASK
 800dd2a:	60bb      	str	r3, [r7, #8]
  return(result);
 800dd2c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800dd2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800dd30:	b672      	cpsid	i
}
 800dd32:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	43da      	mvns	r2, r3
 800dd38:	4b0a      	ldr	r3, [pc, #40]	; (800dd64 <UTIL_SEQ_WaitEvt+0x90>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	4013      	ands	r3, r2
 800dd3e:	4a09      	ldr	r2, [pc, #36]	; (800dd64 <UTIL_SEQ_WaitEvt+0x90>)
 800dd40:	6013      	str	r3, [r2, #0]
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	f383 8810 	msr	PRIMASK, r3
}
 800dd4c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800dd4e:	4a04      	ldr	r2, [pc, #16]	; (800dd60 <UTIL_SEQ_WaitEvt+0x8c>)
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	6013      	str	r3, [r2, #0]
  return;
 800dd54:	bf00      	nop
}
 800dd56:	3720      	adds	r7, #32
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}
 800dd5c:	20001694 	.word	0x20001694
 800dd60:	20001690 	.word	0x20001690
 800dd64:	2000168c 	.word	0x2000168c

0800dd68 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800dd68:	b480      	push	{r7}
 800dd6a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800dd6c:	bf00      	nop
}
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd74:	4770      	bx	lr

0800dd76 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800dd76:	b480      	push	{r7}
 800dd78:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800dd7a:	bf00      	nop
}
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr

0800dd84 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b085      	sub	sp, #20
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	0c1b      	lsrs	r3, r3, #16
 800dd98:	041b      	lsls	r3, r3, #16
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d104      	bne.n	800dda8 <SEQ_BitPosition+0x24>
 800dd9e:	2310      	movs	r3, #16
 800dda0:	73fb      	strb	r3, [r7, #15]
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	041b      	lsls	r3, r3, #16
 800dda6:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d105      	bne.n	800ddbe <SEQ_BitPosition+0x3a>
 800ddb2:	7bfb      	ldrb	r3, [r7, #15]
 800ddb4:	3308      	adds	r3, #8
 800ddb6:	73fb      	strb	r3, [r7, #15]
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	021b      	lsls	r3, r3, #8
 800ddbc:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d105      	bne.n	800ddd4 <SEQ_BitPosition+0x50>
 800ddc8:	7bfb      	ldrb	r3, [r7, #15]
 800ddca:	3304      	adds	r3, #4
 800ddcc:	73fb      	strb	r3, [r7, #15]
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	011b      	lsls	r3, r3, #4
 800ddd2:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	0f1b      	lsrs	r3, r3, #28
 800ddd8:	4a07      	ldr	r2, [pc, #28]	; (800ddf8 <SEQ_BitPosition+0x74>)
 800ddda:	5cd2      	ldrb	r2, [r2, r3]
 800dddc:	7bfb      	ldrb	r3, [r7, #15]
 800ddde:	4413      	add	r3, r2
 800dde0:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800dde2:	7bfb      	ldrb	r3, [r7, #15]
 800dde4:	f1c3 031f 	rsb	r3, r3, #31
 800dde8:	b2db      	uxtb	r3, r3
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	3714      	adds	r7, #20
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop
 800ddf8:	080102ec 	.word	0x080102ec

0800ddfc <std>:
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	b510      	push	{r4, lr}
 800de00:	4604      	mov	r4, r0
 800de02:	e9c0 3300 	strd	r3, r3, [r0]
 800de06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800de0a:	6083      	str	r3, [r0, #8]
 800de0c:	8181      	strh	r1, [r0, #12]
 800de0e:	6643      	str	r3, [r0, #100]	; 0x64
 800de10:	81c2      	strh	r2, [r0, #14]
 800de12:	6183      	str	r3, [r0, #24]
 800de14:	4619      	mov	r1, r3
 800de16:	2208      	movs	r2, #8
 800de18:	305c      	adds	r0, #92	; 0x5c
 800de1a:	f000 f9ff 	bl	800e21c <memset>
 800de1e:	4b0d      	ldr	r3, [pc, #52]	; (800de54 <std+0x58>)
 800de20:	6263      	str	r3, [r4, #36]	; 0x24
 800de22:	4b0d      	ldr	r3, [pc, #52]	; (800de58 <std+0x5c>)
 800de24:	62a3      	str	r3, [r4, #40]	; 0x28
 800de26:	4b0d      	ldr	r3, [pc, #52]	; (800de5c <std+0x60>)
 800de28:	62e3      	str	r3, [r4, #44]	; 0x2c
 800de2a:	4b0d      	ldr	r3, [pc, #52]	; (800de60 <std+0x64>)
 800de2c:	6323      	str	r3, [r4, #48]	; 0x30
 800de2e:	4b0d      	ldr	r3, [pc, #52]	; (800de64 <std+0x68>)
 800de30:	6224      	str	r4, [r4, #32]
 800de32:	429c      	cmp	r4, r3
 800de34:	d006      	beq.n	800de44 <std+0x48>
 800de36:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800de3a:	4294      	cmp	r4, r2
 800de3c:	d002      	beq.n	800de44 <std+0x48>
 800de3e:	33d0      	adds	r3, #208	; 0xd0
 800de40:	429c      	cmp	r4, r3
 800de42:	d105      	bne.n	800de50 <std+0x54>
 800de44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800de48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de4c:	f000 ba76 	b.w	800e33c <__retarget_lock_init_recursive>
 800de50:	bd10      	pop	{r4, pc}
 800de52:	bf00      	nop
 800de54:	0800e06d 	.word	0x0800e06d
 800de58:	0800e08f 	.word	0x0800e08f
 800de5c:	0800e0c7 	.word	0x0800e0c7
 800de60:	0800e0eb 	.word	0x0800e0eb
 800de64:	20001728 	.word	0x20001728

0800de68 <stdio_exit_handler>:
 800de68:	4a02      	ldr	r2, [pc, #8]	; (800de74 <stdio_exit_handler+0xc>)
 800de6a:	4903      	ldr	r1, [pc, #12]	; (800de78 <stdio_exit_handler+0x10>)
 800de6c:	4803      	ldr	r0, [pc, #12]	; (800de7c <stdio_exit_handler+0x14>)
 800de6e:	f000 b869 	b.w	800df44 <_fwalk_sglue>
 800de72:	bf00      	nop
 800de74:	20000040 	.word	0x20000040
 800de78:	0800ec05 	.word	0x0800ec05
 800de7c:	2000004c 	.word	0x2000004c

0800de80 <cleanup_stdio>:
 800de80:	6841      	ldr	r1, [r0, #4]
 800de82:	4b0c      	ldr	r3, [pc, #48]	; (800deb4 <cleanup_stdio+0x34>)
 800de84:	4299      	cmp	r1, r3
 800de86:	b510      	push	{r4, lr}
 800de88:	4604      	mov	r4, r0
 800de8a:	d001      	beq.n	800de90 <cleanup_stdio+0x10>
 800de8c:	f000 feba 	bl	800ec04 <_fflush_r>
 800de90:	68a1      	ldr	r1, [r4, #8]
 800de92:	4b09      	ldr	r3, [pc, #36]	; (800deb8 <cleanup_stdio+0x38>)
 800de94:	4299      	cmp	r1, r3
 800de96:	d002      	beq.n	800de9e <cleanup_stdio+0x1e>
 800de98:	4620      	mov	r0, r4
 800de9a:	f000 feb3 	bl	800ec04 <_fflush_r>
 800de9e:	68e1      	ldr	r1, [r4, #12]
 800dea0:	4b06      	ldr	r3, [pc, #24]	; (800debc <cleanup_stdio+0x3c>)
 800dea2:	4299      	cmp	r1, r3
 800dea4:	d004      	beq.n	800deb0 <cleanup_stdio+0x30>
 800dea6:	4620      	mov	r0, r4
 800dea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800deac:	f000 beaa 	b.w	800ec04 <_fflush_r>
 800deb0:	bd10      	pop	{r4, pc}
 800deb2:	bf00      	nop
 800deb4:	20001728 	.word	0x20001728
 800deb8:	20001790 	.word	0x20001790
 800debc:	200017f8 	.word	0x200017f8

0800dec0 <global_stdio_init.part.0>:
 800dec0:	b510      	push	{r4, lr}
 800dec2:	4b0b      	ldr	r3, [pc, #44]	; (800def0 <global_stdio_init.part.0+0x30>)
 800dec4:	4c0b      	ldr	r4, [pc, #44]	; (800def4 <global_stdio_init.part.0+0x34>)
 800dec6:	4a0c      	ldr	r2, [pc, #48]	; (800def8 <global_stdio_init.part.0+0x38>)
 800dec8:	601a      	str	r2, [r3, #0]
 800deca:	4620      	mov	r0, r4
 800decc:	2200      	movs	r2, #0
 800dece:	2104      	movs	r1, #4
 800ded0:	f7ff ff94 	bl	800ddfc <std>
 800ded4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ded8:	2201      	movs	r2, #1
 800deda:	2109      	movs	r1, #9
 800dedc:	f7ff ff8e 	bl	800ddfc <std>
 800dee0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800dee4:	2202      	movs	r2, #2
 800dee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800deea:	2112      	movs	r1, #18
 800deec:	f7ff bf86 	b.w	800ddfc <std>
 800def0:	20001860 	.word	0x20001860
 800def4:	20001728 	.word	0x20001728
 800def8:	0800de69 	.word	0x0800de69

0800defc <__sfp_lock_acquire>:
 800defc:	4801      	ldr	r0, [pc, #4]	; (800df04 <__sfp_lock_acquire+0x8>)
 800defe:	f000 ba1e 	b.w	800e33e <__retarget_lock_acquire_recursive>
 800df02:	bf00      	nop
 800df04:	20001869 	.word	0x20001869

0800df08 <__sfp_lock_release>:
 800df08:	4801      	ldr	r0, [pc, #4]	; (800df10 <__sfp_lock_release+0x8>)
 800df0a:	f000 ba19 	b.w	800e340 <__retarget_lock_release_recursive>
 800df0e:	bf00      	nop
 800df10:	20001869 	.word	0x20001869

0800df14 <__sinit>:
 800df14:	b510      	push	{r4, lr}
 800df16:	4604      	mov	r4, r0
 800df18:	f7ff fff0 	bl	800defc <__sfp_lock_acquire>
 800df1c:	6a23      	ldr	r3, [r4, #32]
 800df1e:	b11b      	cbz	r3, 800df28 <__sinit+0x14>
 800df20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df24:	f7ff bff0 	b.w	800df08 <__sfp_lock_release>
 800df28:	4b04      	ldr	r3, [pc, #16]	; (800df3c <__sinit+0x28>)
 800df2a:	6223      	str	r3, [r4, #32]
 800df2c:	4b04      	ldr	r3, [pc, #16]	; (800df40 <__sinit+0x2c>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d1f5      	bne.n	800df20 <__sinit+0xc>
 800df34:	f7ff ffc4 	bl	800dec0 <global_stdio_init.part.0>
 800df38:	e7f2      	b.n	800df20 <__sinit+0xc>
 800df3a:	bf00      	nop
 800df3c:	0800de81 	.word	0x0800de81
 800df40:	20001860 	.word	0x20001860

0800df44 <_fwalk_sglue>:
 800df44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df48:	4607      	mov	r7, r0
 800df4a:	4688      	mov	r8, r1
 800df4c:	4614      	mov	r4, r2
 800df4e:	2600      	movs	r6, #0
 800df50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800df54:	f1b9 0901 	subs.w	r9, r9, #1
 800df58:	d505      	bpl.n	800df66 <_fwalk_sglue+0x22>
 800df5a:	6824      	ldr	r4, [r4, #0]
 800df5c:	2c00      	cmp	r4, #0
 800df5e:	d1f7      	bne.n	800df50 <_fwalk_sglue+0xc>
 800df60:	4630      	mov	r0, r6
 800df62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df66:	89ab      	ldrh	r3, [r5, #12]
 800df68:	2b01      	cmp	r3, #1
 800df6a:	d907      	bls.n	800df7c <_fwalk_sglue+0x38>
 800df6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800df70:	3301      	adds	r3, #1
 800df72:	d003      	beq.n	800df7c <_fwalk_sglue+0x38>
 800df74:	4629      	mov	r1, r5
 800df76:	4638      	mov	r0, r7
 800df78:	47c0      	blx	r8
 800df7a:	4306      	orrs	r6, r0
 800df7c:	3568      	adds	r5, #104	; 0x68
 800df7e:	e7e9      	b.n	800df54 <_fwalk_sglue+0x10>

0800df80 <iprintf>:
 800df80:	b40f      	push	{r0, r1, r2, r3}
 800df82:	b507      	push	{r0, r1, r2, lr}
 800df84:	4906      	ldr	r1, [pc, #24]	; (800dfa0 <iprintf+0x20>)
 800df86:	ab04      	add	r3, sp, #16
 800df88:	6808      	ldr	r0, [r1, #0]
 800df8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800df8e:	6881      	ldr	r1, [r0, #8]
 800df90:	9301      	str	r3, [sp, #4]
 800df92:	f000 fb07 	bl	800e5a4 <_vfiprintf_r>
 800df96:	b003      	add	sp, #12
 800df98:	f85d eb04 	ldr.w	lr, [sp], #4
 800df9c:	b004      	add	sp, #16
 800df9e:	4770      	bx	lr
 800dfa0:	20000098 	.word	0x20000098

0800dfa4 <putchar>:
 800dfa4:	4b02      	ldr	r3, [pc, #8]	; (800dfb0 <putchar+0xc>)
 800dfa6:	4601      	mov	r1, r0
 800dfa8:	6818      	ldr	r0, [r3, #0]
 800dfaa:	6882      	ldr	r2, [r0, #8]
 800dfac:	f000 beb4 	b.w	800ed18 <_putc_r>
 800dfb0:	20000098 	.word	0x20000098

0800dfb4 <_puts_r>:
 800dfb4:	6a03      	ldr	r3, [r0, #32]
 800dfb6:	b570      	push	{r4, r5, r6, lr}
 800dfb8:	6884      	ldr	r4, [r0, #8]
 800dfba:	4605      	mov	r5, r0
 800dfbc:	460e      	mov	r6, r1
 800dfbe:	b90b      	cbnz	r3, 800dfc4 <_puts_r+0x10>
 800dfc0:	f7ff ffa8 	bl	800df14 <__sinit>
 800dfc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dfc6:	07db      	lsls	r3, r3, #31
 800dfc8:	d405      	bmi.n	800dfd6 <_puts_r+0x22>
 800dfca:	89a3      	ldrh	r3, [r4, #12]
 800dfcc:	0598      	lsls	r0, r3, #22
 800dfce:	d402      	bmi.n	800dfd6 <_puts_r+0x22>
 800dfd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfd2:	f000 f9b4 	bl	800e33e <__retarget_lock_acquire_recursive>
 800dfd6:	89a3      	ldrh	r3, [r4, #12]
 800dfd8:	0719      	lsls	r1, r3, #28
 800dfda:	d513      	bpl.n	800e004 <_puts_r+0x50>
 800dfdc:	6923      	ldr	r3, [r4, #16]
 800dfde:	b18b      	cbz	r3, 800e004 <_puts_r+0x50>
 800dfe0:	3e01      	subs	r6, #1
 800dfe2:	68a3      	ldr	r3, [r4, #8]
 800dfe4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dfe8:	3b01      	subs	r3, #1
 800dfea:	60a3      	str	r3, [r4, #8]
 800dfec:	b9e9      	cbnz	r1, 800e02a <_puts_r+0x76>
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	da2e      	bge.n	800e050 <_puts_r+0x9c>
 800dff2:	4622      	mov	r2, r4
 800dff4:	210a      	movs	r1, #10
 800dff6:	4628      	mov	r0, r5
 800dff8:	f000 f87b 	bl	800e0f2 <__swbuf_r>
 800dffc:	3001      	adds	r0, #1
 800dffe:	d007      	beq.n	800e010 <_puts_r+0x5c>
 800e000:	250a      	movs	r5, #10
 800e002:	e007      	b.n	800e014 <_puts_r+0x60>
 800e004:	4621      	mov	r1, r4
 800e006:	4628      	mov	r0, r5
 800e008:	f000 f8b0 	bl	800e16c <__swsetup_r>
 800e00c:	2800      	cmp	r0, #0
 800e00e:	d0e7      	beq.n	800dfe0 <_puts_r+0x2c>
 800e010:	f04f 35ff 	mov.w	r5, #4294967295
 800e014:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e016:	07da      	lsls	r2, r3, #31
 800e018:	d405      	bmi.n	800e026 <_puts_r+0x72>
 800e01a:	89a3      	ldrh	r3, [r4, #12]
 800e01c:	059b      	lsls	r3, r3, #22
 800e01e:	d402      	bmi.n	800e026 <_puts_r+0x72>
 800e020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e022:	f000 f98d 	bl	800e340 <__retarget_lock_release_recursive>
 800e026:	4628      	mov	r0, r5
 800e028:	bd70      	pop	{r4, r5, r6, pc}
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	da04      	bge.n	800e038 <_puts_r+0x84>
 800e02e:	69a2      	ldr	r2, [r4, #24]
 800e030:	429a      	cmp	r2, r3
 800e032:	dc06      	bgt.n	800e042 <_puts_r+0x8e>
 800e034:	290a      	cmp	r1, #10
 800e036:	d004      	beq.n	800e042 <_puts_r+0x8e>
 800e038:	6823      	ldr	r3, [r4, #0]
 800e03a:	1c5a      	adds	r2, r3, #1
 800e03c:	6022      	str	r2, [r4, #0]
 800e03e:	7019      	strb	r1, [r3, #0]
 800e040:	e7cf      	b.n	800dfe2 <_puts_r+0x2e>
 800e042:	4622      	mov	r2, r4
 800e044:	4628      	mov	r0, r5
 800e046:	f000 f854 	bl	800e0f2 <__swbuf_r>
 800e04a:	3001      	adds	r0, #1
 800e04c:	d1c9      	bne.n	800dfe2 <_puts_r+0x2e>
 800e04e:	e7df      	b.n	800e010 <_puts_r+0x5c>
 800e050:	6823      	ldr	r3, [r4, #0]
 800e052:	250a      	movs	r5, #10
 800e054:	1c5a      	adds	r2, r3, #1
 800e056:	6022      	str	r2, [r4, #0]
 800e058:	701d      	strb	r5, [r3, #0]
 800e05a:	e7db      	b.n	800e014 <_puts_r+0x60>

0800e05c <puts>:
 800e05c:	4b02      	ldr	r3, [pc, #8]	; (800e068 <puts+0xc>)
 800e05e:	4601      	mov	r1, r0
 800e060:	6818      	ldr	r0, [r3, #0]
 800e062:	f7ff bfa7 	b.w	800dfb4 <_puts_r>
 800e066:	bf00      	nop
 800e068:	20000098 	.word	0x20000098

0800e06c <__sread>:
 800e06c:	b510      	push	{r4, lr}
 800e06e:	460c      	mov	r4, r1
 800e070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e074:	f000 f914 	bl	800e2a0 <_read_r>
 800e078:	2800      	cmp	r0, #0
 800e07a:	bfab      	itete	ge
 800e07c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e07e:	89a3      	ldrhlt	r3, [r4, #12]
 800e080:	181b      	addge	r3, r3, r0
 800e082:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e086:	bfac      	ite	ge
 800e088:	6563      	strge	r3, [r4, #84]	; 0x54
 800e08a:	81a3      	strhlt	r3, [r4, #12]
 800e08c:	bd10      	pop	{r4, pc}

0800e08e <__swrite>:
 800e08e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e092:	461f      	mov	r7, r3
 800e094:	898b      	ldrh	r3, [r1, #12]
 800e096:	05db      	lsls	r3, r3, #23
 800e098:	4605      	mov	r5, r0
 800e09a:	460c      	mov	r4, r1
 800e09c:	4616      	mov	r6, r2
 800e09e:	d505      	bpl.n	800e0ac <__swrite+0x1e>
 800e0a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0a4:	2302      	movs	r3, #2
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	f000 f8e8 	bl	800e27c <_lseek_r>
 800e0ac:	89a3      	ldrh	r3, [r4, #12]
 800e0ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e0b6:	81a3      	strh	r3, [r4, #12]
 800e0b8:	4632      	mov	r2, r6
 800e0ba:	463b      	mov	r3, r7
 800e0bc:	4628      	mov	r0, r5
 800e0be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0c2:	f000 b8ff 	b.w	800e2c4 <_write_r>

0800e0c6 <__sseek>:
 800e0c6:	b510      	push	{r4, lr}
 800e0c8:	460c      	mov	r4, r1
 800e0ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0ce:	f000 f8d5 	bl	800e27c <_lseek_r>
 800e0d2:	1c43      	adds	r3, r0, #1
 800e0d4:	89a3      	ldrh	r3, [r4, #12]
 800e0d6:	bf15      	itete	ne
 800e0d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800e0da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e0de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e0e2:	81a3      	strheq	r3, [r4, #12]
 800e0e4:	bf18      	it	ne
 800e0e6:	81a3      	strhne	r3, [r4, #12]
 800e0e8:	bd10      	pop	{r4, pc}

0800e0ea <__sclose>:
 800e0ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0ee:	f000 b8b5 	b.w	800e25c <_close_r>

0800e0f2 <__swbuf_r>:
 800e0f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0f4:	460e      	mov	r6, r1
 800e0f6:	4614      	mov	r4, r2
 800e0f8:	4605      	mov	r5, r0
 800e0fa:	b118      	cbz	r0, 800e104 <__swbuf_r+0x12>
 800e0fc:	6a03      	ldr	r3, [r0, #32]
 800e0fe:	b90b      	cbnz	r3, 800e104 <__swbuf_r+0x12>
 800e100:	f7ff ff08 	bl	800df14 <__sinit>
 800e104:	69a3      	ldr	r3, [r4, #24]
 800e106:	60a3      	str	r3, [r4, #8]
 800e108:	89a3      	ldrh	r3, [r4, #12]
 800e10a:	071a      	lsls	r2, r3, #28
 800e10c:	d525      	bpl.n	800e15a <__swbuf_r+0x68>
 800e10e:	6923      	ldr	r3, [r4, #16]
 800e110:	b31b      	cbz	r3, 800e15a <__swbuf_r+0x68>
 800e112:	6823      	ldr	r3, [r4, #0]
 800e114:	6922      	ldr	r2, [r4, #16]
 800e116:	1a98      	subs	r0, r3, r2
 800e118:	6963      	ldr	r3, [r4, #20]
 800e11a:	b2f6      	uxtb	r6, r6
 800e11c:	4283      	cmp	r3, r0
 800e11e:	4637      	mov	r7, r6
 800e120:	dc04      	bgt.n	800e12c <__swbuf_r+0x3a>
 800e122:	4621      	mov	r1, r4
 800e124:	4628      	mov	r0, r5
 800e126:	f000 fd6d 	bl	800ec04 <_fflush_r>
 800e12a:	b9e0      	cbnz	r0, 800e166 <__swbuf_r+0x74>
 800e12c:	68a3      	ldr	r3, [r4, #8]
 800e12e:	3b01      	subs	r3, #1
 800e130:	60a3      	str	r3, [r4, #8]
 800e132:	6823      	ldr	r3, [r4, #0]
 800e134:	1c5a      	adds	r2, r3, #1
 800e136:	6022      	str	r2, [r4, #0]
 800e138:	701e      	strb	r6, [r3, #0]
 800e13a:	6962      	ldr	r2, [r4, #20]
 800e13c:	1c43      	adds	r3, r0, #1
 800e13e:	429a      	cmp	r2, r3
 800e140:	d004      	beq.n	800e14c <__swbuf_r+0x5a>
 800e142:	89a3      	ldrh	r3, [r4, #12]
 800e144:	07db      	lsls	r3, r3, #31
 800e146:	d506      	bpl.n	800e156 <__swbuf_r+0x64>
 800e148:	2e0a      	cmp	r6, #10
 800e14a:	d104      	bne.n	800e156 <__swbuf_r+0x64>
 800e14c:	4621      	mov	r1, r4
 800e14e:	4628      	mov	r0, r5
 800e150:	f000 fd58 	bl	800ec04 <_fflush_r>
 800e154:	b938      	cbnz	r0, 800e166 <__swbuf_r+0x74>
 800e156:	4638      	mov	r0, r7
 800e158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e15a:	4621      	mov	r1, r4
 800e15c:	4628      	mov	r0, r5
 800e15e:	f000 f805 	bl	800e16c <__swsetup_r>
 800e162:	2800      	cmp	r0, #0
 800e164:	d0d5      	beq.n	800e112 <__swbuf_r+0x20>
 800e166:	f04f 37ff 	mov.w	r7, #4294967295
 800e16a:	e7f4      	b.n	800e156 <__swbuf_r+0x64>

0800e16c <__swsetup_r>:
 800e16c:	b538      	push	{r3, r4, r5, lr}
 800e16e:	4b2a      	ldr	r3, [pc, #168]	; (800e218 <__swsetup_r+0xac>)
 800e170:	4605      	mov	r5, r0
 800e172:	6818      	ldr	r0, [r3, #0]
 800e174:	460c      	mov	r4, r1
 800e176:	b118      	cbz	r0, 800e180 <__swsetup_r+0x14>
 800e178:	6a03      	ldr	r3, [r0, #32]
 800e17a:	b90b      	cbnz	r3, 800e180 <__swsetup_r+0x14>
 800e17c:	f7ff feca 	bl	800df14 <__sinit>
 800e180:	89a3      	ldrh	r3, [r4, #12]
 800e182:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e186:	0718      	lsls	r0, r3, #28
 800e188:	d422      	bmi.n	800e1d0 <__swsetup_r+0x64>
 800e18a:	06d9      	lsls	r1, r3, #27
 800e18c:	d407      	bmi.n	800e19e <__swsetup_r+0x32>
 800e18e:	2309      	movs	r3, #9
 800e190:	602b      	str	r3, [r5, #0]
 800e192:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e196:	81a3      	strh	r3, [r4, #12]
 800e198:	f04f 30ff 	mov.w	r0, #4294967295
 800e19c:	e034      	b.n	800e208 <__swsetup_r+0x9c>
 800e19e:	0758      	lsls	r0, r3, #29
 800e1a0:	d512      	bpl.n	800e1c8 <__swsetup_r+0x5c>
 800e1a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e1a4:	b141      	cbz	r1, 800e1b8 <__swsetup_r+0x4c>
 800e1a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e1aa:	4299      	cmp	r1, r3
 800e1ac:	d002      	beq.n	800e1b4 <__swsetup_r+0x48>
 800e1ae:	4628      	mov	r0, r5
 800e1b0:	f000 f8d6 	bl	800e360 <_free_r>
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	6363      	str	r3, [r4, #52]	; 0x34
 800e1b8:	89a3      	ldrh	r3, [r4, #12]
 800e1ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e1be:	81a3      	strh	r3, [r4, #12]
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	6063      	str	r3, [r4, #4]
 800e1c4:	6923      	ldr	r3, [r4, #16]
 800e1c6:	6023      	str	r3, [r4, #0]
 800e1c8:	89a3      	ldrh	r3, [r4, #12]
 800e1ca:	f043 0308 	orr.w	r3, r3, #8
 800e1ce:	81a3      	strh	r3, [r4, #12]
 800e1d0:	6923      	ldr	r3, [r4, #16]
 800e1d2:	b94b      	cbnz	r3, 800e1e8 <__swsetup_r+0x7c>
 800e1d4:	89a3      	ldrh	r3, [r4, #12]
 800e1d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e1da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e1de:	d003      	beq.n	800e1e8 <__swsetup_r+0x7c>
 800e1e0:	4621      	mov	r1, r4
 800e1e2:	4628      	mov	r0, r5
 800e1e4:	f000 fd5c 	bl	800eca0 <__smakebuf_r>
 800e1e8:	89a0      	ldrh	r0, [r4, #12]
 800e1ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e1ee:	f010 0301 	ands.w	r3, r0, #1
 800e1f2:	d00a      	beq.n	800e20a <__swsetup_r+0x9e>
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	60a3      	str	r3, [r4, #8]
 800e1f8:	6963      	ldr	r3, [r4, #20]
 800e1fa:	425b      	negs	r3, r3
 800e1fc:	61a3      	str	r3, [r4, #24]
 800e1fe:	6923      	ldr	r3, [r4, #16]
 800e200:	b943      	cbnz	r3, 800e214 <__swsetup_r+0xa8>
 800e202:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e206:	d1c4      	bne.n	800e192 <__swsetup_r+0x26>
 800e208:	bd38      	pop	{r3, r4, r5, pc}
 800e20a:	0781      	lsls	r1, r0, #30
 800e20c:	bf58      	it	pl
 800e20e:	6963      	ldrpl	r3, [r4, #20]
 800e210:	60a3      	str	r3, [r4, #8]
 800e212:	e7f4      	b.n	800e1fe <__swsetup_r+0x92>
 800e214:	2000      	movs	r0, #0
 800e216:	e7f7      	b.n	800e208 <__swsetup_r+0x9c>
 800e218:	20000098 	.word	0x20000098

0800e21c <memset>:
 800e21c:	4402      	add	r2, r0
 800e21e:	4603      	mov	r3, r0
 800e220:	4293      	cmp	r3, r2
 800e222:	d100      	bne.n	800e226 <memset+0xa>
 800e224:	4770      	bx	lr
 800e226:	f803 1b01 	strb.w	r1, [r3], #1
 800e22a:	e7f9      	b.n	800e220 <memset+0x4>

0800e22c <strrchr>:
 800e22c:	b513      	push	{r0, r1, r4, lr}
 800e22e:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800e232:	4603      	mov	r3, r0
 800e234:	d110      	bne.n	800e258 <strrchr+0x2c>
 800e236:	b002      	add	sp, #8
 800e238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e23c:	f000 bda0 	b.w	800ed80 <strchr>
 800e240:	1c43      	adds	r3, r0, #1
 800e242:	4604      	mov	r4, r0
 800e244:	4618      	mov	r0, r3
 800e246:	9101      	str	r1, [sp, #4]
 800e248:	f000 fd9a 	bl	800ed80 <strchr>
 800e24c:	9901      	ldr	r1, [sp, #4]
 800e24e:	2800      	cmp	r0, #0
 800e250:	d1f6      	bne.n	800e240 <strrchr+0x14>
 800e252:	4620      	mov	r0, r4
 800e254:	b002      	add	sp, #8
 800e256:	bd10      	pop	{r4, pc}
 800e258:	2400      	movs	r4, #0
 800e25a:	e7f3      	b.n	800e244 <strrchr+0x18>

0800e25c <_close_r>:
 800e25c:	b538      	push	{r3, r4, r5, lr}
 800e25e:	4d06      	ldr	r5, [pc, #24]	; (800e278 <_close_r+0x1c>)
 800e260:	2300      	movs	r3, #0
 800e262:	4604      	mov	r4, r0
 800e264:	4608      	mov	r0, r1
 800e266:	602b      	str	r3, [r5, #0]
 800e268:	f7f4 fe1b 	bl	8002ea2 <_close>
 800e26c:	1c43      	adds	r3, r0, #1
 800e26e:	d102      	bne.n	800e276 <_close_r+0x1a>
 800e270:	682b      	ldr	r3, [r5, #0]
 800e272:	b103      	cbz	r3, 800e276 <_close_r+0x1a>
 800e274:	6023      	str	r3, [r4, #0]
 800e276:	bd38      	pop	{r3, r4, r5, pc}
 800e278:	20001864 	.word	0x20001864

0800e27c <_lseek_r>:
 800e27c:	b538      	push	{r3, r4, r5, lr}
 800e27e:	4d07      	ldr	r5, [pc, #28]	; (800e29c <_lseek_r+0x20>)
 800e280:	4604      	mov	r4, r0
 800e282:	4608      	mov	r0, r1
 800e284:	4611      	mov	r1, r2
 800e286:	2200      	movs	r2, #0
 800e288:	602a      	str	r2, [r5, #0]
 800e28a:	461a      	mov	r2, r3
 800e28c:	f7f4 fe30 	bl	8002ef0 <_lseek>
 800e290:	1c43      	adds	r3, r0, #1
 800e292:	d102      	bne.n	800e29a <_lseek_r+0x1e>
 800e294:	682b      	ldr	r3, [r5, #0]
 800e296:	b103      	cbz	r3, 800e29a <_lseek_r+0x1e>
 800e298:	6023      	str	r3, [r4, #0]
 800e29a:	bd38      	pop	{r3, r4, r5, pc}
 800e29c:	20001864 	.word	0x20001864

0800e2a0 <_read_r>:
 800e2a0:	b538      	push	{r3, r4, r5, lr}
 800e2a2:	4d07      	ldr	r5, [pc, #28]	; (800e2c0 <_read_r+0x20>)
 800e2a4:	4604      	mov	r4, r0
 800e2a6:	4608      	mov	r0, r1
 800e2a8:	4611      	mov	r1, r2
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	602a      	str	r2, [r5, #0]
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	f7f4 fdda 	bl	8002e68 <_read>
 800e2b4:	1c43      	adds	r3, r0, #1
 800e2b6:	d102      	bne.n	800e2be <_read_r+0x1e>
 800e2b8:	682b      	ldr	r3, [r5, #0]
 800e2ba:	b103      	cbz	r3, 800e2be <_read_r+0x1e>
 800e2bc:	6023      	str	r3, [r4, #0]
 800e2be:	bd38      	pop	{r3, r4, r5, pc}
 800e2c0:	20001864 	.word	0x20001864

0800e2c4 <_write_r>:
 800e2c4:	b538      	push	{r3, r4, r5, lr}
 800e2c6:	4d07      	ldr	r5, [pc, #28]	; (800e2e4 <_write_r+0x20>)
 800e2c8:	4604      	mov	r4, r0
 800e2ca:	4608      	mov	r0, r1
 800e2cc:	4611      	mov	r1, r2
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	602a      	str	r2, [r5, #0]
 800e2d2:	461a      	mov	r2, r3
 800e2d4:	f7fd faba 	bl	800b84c <_write>
 800e2d8:	1c43      	adds	r3, r0, #1
 800e2da:	d102      	bne.n	800e2e2 <_write_r+0x1e>
 800e2dc:	682b      	ldr	r3, [r5, #0]
 800e2de:	b103      	cbz	r3, 800e2e2 <_write_r+0x1e>
 800e2e0:	6023      	str	r3, [r4, #0]
 800e2e2:	bd38      	pop	{r3, r4, r5, pc}
 800e2e4:	20001864 	.word	0x20001864

0800e2e8 <__errno>:
 800e2e8:	4b01      	ldr	r3, [pc, #4]	; (800e2f0 <__errno+0x8>)
 800e2ea:	6818      	ldr	r0, [r3, #0]
 800e2ec:	4770      	bx	lr
 800e2ee:	bf00      	nop
 800e2f0:	20000098 	.word	0x20000098

0800e2f4 <__libc_init_array>:
 800e2f4:	b570      	push	{r4, r5, r6, lr}
 800e2f6:	4d0d      	ldr	r5, [pc, #52]	; (800e32c <__libc_init_array+0x38>)
 800e2f8:	4c0d      	ldr	r4, [pc, #52]	; (800e330 <__libc_init_array+0x3c>)
 800e2fa:	1b64      	subs	r4, r4, r5
 800e2fc:	10a4      	asrs	r4, r4, #2
 800e2fe:	2600      	movs	r6, #0
 800e300:	42a6      	cmp	r6, r4
 800e302:	d109      	bne.n	800e318 <__libc_init_array+0x24>
 800e304:	4d0b      	ldr	r5, [pc, #44]	; (800e334 <__libc_init_array+0x40>)
 800e306:	4c0c      	ldr	r4, [pc, #48]	; (800e338 <__libc_init_array+0x44>)
 800e308:	f000 fd7a 	bl	800ee00 <_init>
 800e30c:	1b64      	subs	r4, r4, r5
 800e30e:	10a4      	asrs	r4, r4, #2
 800e310:	2600      	movs	r6, #0
 800e312:	42a6      	cmp	r6, r4
 800e314:	d105      	bne.n	800e322 <__libc_init_array+0x2e>
 800e316:	bd70      	pop	{r4, r5, r6, pc}
 800e318:	f855 3b04 	ldr.w	r3, [r5], #4
 800e31c:	4798      	blx	r3
 800e31e:	3601      	adds	r6, #1
 800e320:	e7ee      	b.n	800e300 <__libc_init_array+0xc>
 800e322:	f855 3b04 	ldr.w	r3, [r5], #4
 800e326:	4798      	blx	r3
 800e328:	3601      	adds	r6, #1
 800e32a:	e7f2      	b.n	800e312 <__libc_init_array+0x1e>
 800e32c:	08010338 	.word	0x08010338
 800e330:	08010338 	.word	0x08010338
 800e334:	08010338 	.word	0x08010338
 800e338:	0801033c 	.word	0x0801033c

0800e33c <__retarget_lock_init_recursive>:
 800e33c:	4770      	bx	lr

0800e33e <__retarget_lock_acquire_recursive>:
 800e33e:	4770      	bx	lr

0800e340 <__retarget_lock_release_recursive>:
 800e340:	4770      	bx	lr

0800e342 <memcpy>:
 800e342:	440a      	add	r2, r1
 800e344:	4291      	cmp	r1, r2
 800e346:	f100 33ff 	add.w	r3, r0, #4294967295
 800e34a:	d100      	bne.n	800e34e <memcpy+0xc>
 800e34c:	4770      	bx	lr
 800e34e:	b510      	push	{r4, lr}
 800e350:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e354:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e358:	4291      	cmp	r1, r2
 800e35a:	d1f9      	bne.n	800e350 <memcpy+0xe>
 800e35c:	bd10      	pop	{r4, pc}
	...

0800e360 <_free_r>:
 800e360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e362:	2900      	cmp	r1, #0
 800e364:	d044      	beq.n	800e3f0 <_free_r+0x90>
 800e366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e36a:	9001      	str	r0, [sp, #4]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	f1a1 0404 	sub.w	r4, r1, #4
 800e372:	bfb8      	it	lt
 800e374:	18e4      	addlt	r4, r4, r3
 800e376:	f000 f8df 	bl	800e538 <__malloc_lock>
 800e37a:	4a1e      	ldr	r2, [pc, #120]	; (800e3f4 <_free_r+0x94>)
 800e37c:	9801      	ldr	r0, [sp, #4]
 800e37e:	6813      	ldr	r3, [r2, #0]
 800e380:	b933      	cbnz	r3, 800e390 <_free_r+0x30>
 800e382:	6063      	str	r3, [r4, #4]
 800e384:	6014      	str	r4, [r2, #0]
 800e386:	b003      	add	sp, #12
 800e388:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e38c:	f000 b8da 	b.w	800e544 <__malloc_unlock>
 800e390:	42a3      	cmp	r3, r4
 800e392:	d908      	bls.n	800e3a6 <_free_r+0x46>
 800e394:	6825      	ldr	r5, [r4, #0]
 800e396:	1961      	adds	r1, r4, r5
 800e398:	428b      	cmp	r3, r1
 800e39a:	bf01      	itttt	eq
 800e39c:	6819      	ldreq	r1, [r3, #0]
 800e39e:	685b      	ldreq	r3, [r3, #4]
 800e3a0:	1949      	addeq	r1, r1, r5
 800e3a2:	6021      	streq	r1, [r4, #0]
 800e3a4:	e7ed      	b.n	800e382 <_free_r+0x22>
 800e3a6:	461a      	mov	r2, r3
 800e3a8:	685b      	ldr	r3, [r3, #4]
 800e3aa:	b10b      	cbz	r3, 800e3b0 <_free_r+0x50>
 800e3ac:	42a3      	cmp	r3, r4
 800e3ae:	d9fa      	bls.n	800e3a6 <_free_r+0x46>
 800e3b0:	6811      	ldr	r1, [r2, #0]
 800e3b2:	1855      	adds	r5, r2, r1
 800e3b4:	42a5      	cmp	r5, r4
 800e3b6:	d10b      	bne.n	800e3d0 <_free_r+0x70>
 800e3b8:	6824      	ldr	r4, [r4, #0]
 800e3ba:	4421      	add	r1, r4
 800e3bc:	1854      	adds	r4, r2, r1
 800e3be:	42a3      	cmp	r3, r4
 800e3c0:	6011      	str	r1, [r2, #0]
 800e3c2:	d1e0      	bne.n	800e386 <_free_r+0x26>
 800e3c4:	681c      	ldr	r4, [r3, #0]
 800e3c6:	685b      	ldr	r3, [r3, #4]
 800e3c8:	6053      	str	r3, [r2, #4]
 800e3ca:	440c      	add	r4, r1
 800e3cc:	6014      	str	r4, [r2, #0]
 800e3ce:	e7da      	b.n	800e386 <_free_r+0x26>
 800e3d0:	d902      	bls.n	800e3d8 <_free_r+0x78>
 800e3d2:	230c      	movs	r3, #12
 800e3d4:	6003      	str	r3, [r0, #0]
 800e3d6:	e7d6      	b.n	800e386 <_free_r+0x26>
 800e3d8:	6825      	ldr	r5, [r4, #0]
 800e3da:	1961      	adds	r1, r4, r5
 800e3dc:	428b      	cmp	r3, r1
 800e3de:	bf04      	itt	eq
 800e3e0:	6819      	ldreq	r1, [r3, #0]
 800e3e2:	685b      	ldreq	r3, [r3, #4]
 800e3e4:	6063      	str	r3, [r4, #4]
 800e3e6:	bf04      	itt	eq
 800e3e8:	1949      	addeq	r1, r1, r5
 800e3ea:	6021      	streq	r1, [r4, #0]
 800e3ec:	6054      	str	r4, [r2, #4]
 800e3ee:	e7ca      	b.n	800e386 <_free_r+0x26>
 800e3f0:	b003      	add	sp, #12
 800e3f2:	bd30      	pop	{r4, r5, pc}
 800e3f4:	2000186c 	.word	0x2000186c

0800e3f8 <sbrk_aligned>:
 800e3f8:	b570      	push	{r4, r5, r6, lr}
 800e3fa:	4e0e      	ldr	r6, [pc, #56]	; (800e434 <sbrk_aligned+0x3c>)
 800e3fc:	460c      	mov	r4, r1
 800e3fe:	6831      	ldr	r1, [r6, #0]
 800e400:	4605      	mov	r5, r0
 800e402:	b911      	cbnz	r1, 800e40a <sbrk_aligned+0x12>
 800e404:	f000 fcec 	bl	800ede0 <_sbrk_r>
 800e408:	6030      	str	r0, [r6, #0]
 800e40a:	4621      	mov	r1, r4
 800e40c:	4628      	mov	r0, r5
 800e40e:	f000 fce7 	bl	800ede0 <_sbrk_r>
 800e412:	1c43      	adds	r3, r0, #1
 800e414:	d00a      	beq.n	800e42c <sbrk_aligned+0x34>
 800e416:	1cc4      	adds	r4, r0, #3
 800e418:	f024 0403 	bic.w	r4, r4, #3
 800e41c:	42a0      	cmp	r0, r4
 800e41e:	d007      	beq.n	800e430 <sbrk_aligned+0x38>
 800e420:	1a21      	subs	r1, r4, r0
 800e422:	4628      	mov	r0, r5
 800e424:	f000 fcdc 	bl	800ede0 <_sbrk_r>
 800e428:	3001      	adds	r0, #1
 800e42a:	d101      	bne.n	800e430 <sbrk_aligned+0x38>
 800e42c:	f04f 34ff 	mov.w	r4, #4294967295
 800e430:	4620      	mov	r0, r4
 800e432:	bd70      	pop	{r4, r5, r6, pc}
 800e434:	20001870 	.word	0x20001870

0800e438 <_malloc_r>:
 800e438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e43c:	1ccd      	adds	r5, r1, #3
 800e43e:	f025 0503 	bic.w	r5, r5, #3
 800e442:	3508      	adds	r5, #8
 800e444:	2d0c      	cmp	r5, #12
 800e446:	bf38      	it	cc
 800e448:	250c      	movcc	r5, #12
 800e44a:	2d00      	cmp	r5, #0
 800e44c:	4607      	mov	r7, r0
 800e44e:	db01      	blt.n	800e454 <_malloc_r+0x1c>
 800e450:	42a9      	cmp	r1, r5
 800e452:	d905      	bls.n	800e460 <_malloc_r+0x28>
 800e454:	230c      	movs	r3, #12
 800e456:	603b      	str	r3, [r7, #0]
 800e458:	2600      	movs	r6, #0
 800e45a:	4630      	mov	r0, r6
 800e45c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e460:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e534 <_malloc_r+0xfc>
 800e464:	f000 f868 	bl	800e538 <__malloc_lock>
 800e468:	f8d8 3000 	ldr.w	r3, [r8]
 800e46c:	461c      	mov	r4, r3
 800e46e:	bb5c      	cbnz	r4, 800e4c8 <_malloc_r+0x90>
 800e470:	4629      	mov	r1, r5
 800e472:	4638      	mov	r0, r7
 800e474:	f7ff ffc0 	bl	800e3f8 <sbrk_aligned>
 800e478:	1c43      	adds	r3, r0, #1
 800e47a:	4604      	mov	r4, r0
 800e47c:	d155      	bne.n	800e52a <_malloc_r+0xf2>
 800e47e:	f8d8 4000 	ldr.w	r4, [r8]
 800e482:	4626      	mov	r6, r4
 800e484:	2e00      	cmp	r6, #0
 800e486:	d145      	bne.n	800e514 <_malloc_r+0xdc>
 800e488:	2c00      	cmp	r4, #0
 800e48a:	d048      	beq.n	800e51e <_malloc_r+0xe6>
 800e48c:	6823      	ldr	r3, [r4, #0]
 800e48e:	4631      	mov	r1, r6
 800e490:	4638      	mov	r0, r7
 800e492:	eb04 0903 	add.w	r9, r4, r3
 800e496:	f000 fca3 	bl	800ede0 <_sbrk_r>
 800e49a:	4581      	cmp	r9, r0
 800e49c:	d13f      	bne.n	800e51e <_malloc_r+0xe6>
 800e49e:	6821      	ldr	r1, [r4, #0]
 800e4a0:	1a6d      	subs	r5, r5, r1
 800e4a2:	4629      	mov	r1, r5
 800e4a4:	4638      	mov	r0, r7
 800e4a6:	f7ff ffa7 	bl	800e3f8 <sbrk_aligned>
 800e4aa:	3001      	adds	r0, #1
 800e4ac:	d037      	beq.n	800e51e <_malloc_r+0xe6>
 800e4ae:	6823      	ldr	r3, [r4, #0]
 800e4b0:	442b      	add	r3, r5
 800e4b2:	6023      	str	r3, [r4, #0]
 800e4b4:	f8d8 3000 	ldr.w	r3, [r8]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d038      	beq.n	800e52e <_malloc_r+0xf6>
 800e4bc:	685a      	ldr	r2, [r3, #4]
 800e4be:	42a2      	cmp	r2, r4
 800e4c0:	d12b      	bne.n	800e51a <_malloc_r+0xe2>
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	605a      	str	r2, [r3, #4]
 800e4c6:	e00f      	b.n	800e4e8 <_malloc_r+0xb0>
 800e4c8:	6822      	ldr	r2, [r4, #0]
 800e4ca:	1b52      	subs	r2, r2, r5
 800e4cc:	d41f      	bmi.n	800e50e <_malloc_r+0xd6>
 800e4ce:	2a0b      	cmp	r2, #11
 800e4d0:	d917      	bls.n	800e502 <_malloc_r+0xca>
 800e4d2:	1961      	adds	r1, r4, r5
 800e4d4:	42a3      	cmp	r3, r4
 800e4d6:	6025      	str	r5, [r4, #0]
 800e4d8:	bf18      	it	ne
 800e4da:	6059      	strne	r1, [r3, #4]
 800e4dc:	6863      	ldr	r3, [r4, #4]
 800e4de:	bf08      	it	eq
 800e4e0:	f8c8 1000 	streq.w	r1, [r8]
 800e4e4:	5162      	str	r2, [r4, r5]
 800e4e6:	604b      	str	r3, [r1, #4]
 800e4e8:	4638      	mov	r0, r7
 800e4ea:	f104 060b 	add.w	r6, r4, #11
 800e4ee:	f000 f829 	bl	800e544 <__malloc_unlock>
 800e4f2:	f026 0607 	bic.w	r6, r6, #7
 800e4f6:	1d23      	adds	r3, r4, #4
 800e4f8:	1af2      	subs	r2, r6, r3
 800e4fa:	d0ae      	beq.n	800e45a <_malloc_r+0x22>
 800e4fc:	1b9b      	subs	r3, r3, r6
 800e4fe:	50a3      	str	r3, [r4, r2]
 800e500:	e7ab      	b.n	800e45a <_malloc_r+0x22>
 800e502:	42a3      	cmp	r3, r4
 800e504:	6862      	ldr	r2, [r4, #4]
 800e506:	d1dd      	bne.n	800e4c4 <_malloc_r+0x8c>
 800e508:	f8c8 2000 	str.w	r2, [r8]
 800e50c:	e7ec      	b.n	800e4e8 <_malloc_r+0xb0>
 800e50e:	4623      	mov	r3, r4
 800e510:	6864      	ldr	r4, [r4, #4]
 800e512:	e7ac      	b.n	800e46e <_malloc_r+0x36>
 800e514:	4634      	mov	r4, r6
 800e516:	6876      	ldr	r6, [r6, #4]
 800e518:	e7b4      	b.n	800e484 <_malloc_r+0x4c>
 800e51a:	4613      	mov	r3, r2
 800e51c:	e7cc      	b.n	800e4b8 <_malloc_r+0x80>
 800e51e:	230c      	movs	r3, #12
 800e520:	603b      	str	r3, [r7, #0]
 800e522:	4638      	mov	r0, r7
 800e524:	f000 f80e 	bl	800e544 <__malloc_unlock>
 800e528:	e797      	b.n	800e45a <_malloc_r+0x22>
 800e52a:	6025      	str	r5, [r4, #0]
 800e52c:	e7dc      	b.n	800e4e8 <_malloc_r+0xb0>
 800e52e:	605b      	str	r3, [r3, #4]
 800e530:	deff      	udf	#255	; 0xff
 800e532:	bf00      	nop
 800e534:	2000186c 	.word	0x2000186c

0800e538 <__malloc_lock>:
 800e538:	4801      	ldr	r0, [pc, #4]	; (800e540 <__malloc_lock+0x8>)
 800e53a:	f7ff bf00 	b.w	800e33e <__retarget_lock_acquire_recursive>
 800e53e:	bf00      	nop
 800e540:	20001868 	.word	0x20001868

0800e544 <__malloc_unlock>:
 800e544:	4801      	ldr	r0, [pc, #4]	; (800e54c <__malloc_unlock+0x8>)
 800e546:	f7ff befb 	b.w	800e340 <__retarget_lock_release_recursive>
 800e54a:	bf00      	nop
 800e54c:	20001868 	.word	0x20001868

0800e550 <__sfputc_r>:
 800e550:	6893      	ldr	r3, [r2, #8]
 800e552:	3b01      	subs	r3, #1
 800e554:	2b00      	cmp	r3, #0
 800e556:	b410      	push	{r4}
 800e558:	6093      	str	r3, [r2, #8]
 800e55a:	da08      	bge.n	800e56e <__sfputc_r+0x1e>
 800e55c:	6994      	ldr	r4, [r2, #24]
 800e55e:	42a3      	cmp	r3, r4
 800e560:	db01      	blt.n	800e566 <__sfputc_r+0x16>
 800e562:	290a      	cmp	r1, #10
 800e564:	d103      	bne.n	800e56e <__sfputc_r+0x1e>
 800e566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e56a:	f7ff bdc2 	b.w	800e0f2 <__swbuf_r>
 800e56e:	6813      	ldr	r3, [r2, #0]
 800e570:	1c58      	adds	r0, r3, #1
 800e572:	6010      	str	r0, [r2, #0]
 800e574:	7019      	strb	r1, [r3, #0]
 800e576:	4608      	mov	r0, r1
 800e578:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e57c:	4770      	bx	lr

0800e57e <__sfputs_r>:
 800e57e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e580:	4606      	mov	r6, r0
 800e582:	460f      	mov	r7, r1
 800e584:	4614      	mov	r4, r2
 800e586:	18d5      	adds	r5, r2, r3
 800e588:	42ac      	cmp	r4, r5
 800e58a:	d101      	bne.n	800e590 <__sfputs_r+0x12>
 800e58c:	2000      	movs	r0, #0
 800e58e:	e007      	b.n	800e5a0 <__sfputs_r+0x22>
 800e590:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e594:	463a      	mov	r2, r7
 800e596:	4630      	mov	r0, r6
 800e598:	f7ff ffda 	bl	800e550 <__sfputc_r>
 800e59c:	1c43      	adds	r3, r0, #1
 800e59e:	d1f3      	bne.n	800e588 <__sfputs_r+0xa>
 800e5a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e5a4 <_vfiprintf_r>:
 800e5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a8:	460d      	mov	r5, r1
 800e5aa:	b09d      	sub	sp, #116	; 0x74
 800e5ac:	4614      	mov	r4, r2
 800e5ae:	4698      	mov	r8, r3
 800e5b0:	4606      	mov	r6, r0
 800e5b2:	b118      	cbz	r0, 800e5bc <_vfiprintf_r+0x18>
 800e5b4:	6a03      	ldr	r3, [r0, #32]
 800e5b6:	b90b      	cbnz	r3, 800e5bc <_vfiprintf_r+0x18>
 800e5b8:	f7ff fcac 	bl	800df14 <__sinit>
 800e5bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5be:	07d9      	lsls	r1, r3, #31
 800e5c0:	d405      	bmi.n	800e5ce <_vfiprintf_r+0x2a>
 800e5c2:	89ab      	ldrh	r3, [r5, #12]
 800e5c4:	059a      	lsls	r2, r3, #22
 800e5c6:	d402      	bmi.n	800e5ce <_vfiprintf_r+0x2a>
 800e5c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5ca:	f7ff feb8 	bl	800e33e <__retarget_lock_acquire_recursive>
 800e5ce:	89ab      	ldrh	r3, [r5, #12]
 800e5d0:	071b      	lsls	r3, r3, #28
 800e5d2:	d501      	bpl.n	800e5d8 <_vfiprintf_r+0x34>
 800e5d4:	692b      	ldr	r3, [r5, #16]
 800e5d6:	b99b      	cbnz	r3, 800e600 <_vfiprintf_r+0x5c>
 800e5d8:	4629      	mov	r1, r5
 800e5da:	4630      	mov	r0, r6
 800e5dc:	f7ff fdc6 	bl	800e16c <__swsetup_r>
 800e5e0:	b170      	cbz	r0, 800e600 <_vfiprintf_r+0x5c>
 800e5e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5e4:	07dc      	lsls	r4, r3, #31
 800e5e6:	d504      	bpl.n	800e5f2 <_vfiprintf_r+0x4e>
 800e5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e5ec:	b01d      	add	sp, #116	; 0x74
 800e5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5f2:	89ab      	ldrh	r3, [r5, #12]
 800e5f4:	0598      	lsls	r0, r3, #22
 800e5f6:	d4f7      	bmi.n	800e5e8 <_vfiprintf_r+0x44>
 800e5f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5fa:	f7ff fea1 	bl	800e340 <__retarget_lock_release_recursive>
 800e5fe:	e7f3      	b.n	800e5e8 <_vfiprintf_r+0x44>
 800e600:	2300      	movs	r3, #0
 800e602:	9309      	str	r3, [sp, #36]	; 0x24
 800e604:	2320      	movs	r3, #32
 800e606:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e60a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e60e:	2330      	movs	r3, #48	; 0x30
 800e610:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e7c4 <_vfiprintf_r+0x220>
 800e614:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e618:	f04f 0901 	mov.w	r9, #1
 800e61c:	4623      	mov	r3, r4
 800e61e:	469a      	mov	sl, r3
 800e620:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e624:	b10a      	cbz	r2, 800e62a <_vfiprintf_r+0x86>
 800e626:	2a25      	cmp	r2, #37	; 0x25
 800e628:	d1f9      	bne.n	800e61e <_vfiprintf_r+0x7a>
 800e62a:	ebba 0b04 	subs.w	fp, sl, r4
 800e62e:	d00b      	beq.n	800e648 <_vfiprintf_r+0xa4>
 800e630:	465b      	mov	r3, fp
 800e632:	4622      	mov	r2, r4
 800e634:	4629      	mov	r1, r5
 800e636:	4630      	mov	r0, r6
 800e638:	f7ff ffa1 	bl	800e57e <__sfputs_r>
 800e63c:	3001      	adds	r0, #1
 800e63e:	f000 80a9 	beq.w	800e794 <_vfiprintf_r+0x1f0>
 800e642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e644:	445a      	add	r2, fp
 800e646:	9209      	str	r2, [sp, #36]	; 0x24
 800e648:	f89a 3000 	ldrb.w	r3, [sl]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	f000 80a1 	beq.w	800e794 <_vfiprintf_r+0x1f0>
 800e652:	2300      	movs	r3, #0
 800e654:	f04f 32ff 	mov.w	r2, #4294967295
 800e658:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e65c:	f10a 0a01 	add.w	sl, sl, #1
 800e660:	9304      	str	r3, [sp, #16]
 800e662:	9307      	str	r3, [sp, #28]
 800e664:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e668:	931a      	str	r3, [sp, #104]	; 0x68
 800e66a:	4654      	mov	r4, sl
 800e66c:	2205      	movs	r2, #5
 800e66e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e672:	4854      	ldr	r0, [pc, #336]	; (800e7c4 <_vfiprintf_r+0x220>)
 800e674:	f7f1 fd8c 	bl	8000190 <memchr>
 800e678:	9a04      	ldr	r2, [sp, #16]
 800e67a:	b9d8      	cbnz	r0, 800e6b4 <_vfiprintf_r+0x110>
 800e67c:	06d1      	lsls	r1, r2, #27
 800e67e:	bf44      	itt	mi
 800e680:	2320      	movmi	r3, #32
 800e682:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e686:	0713      	lsls	r3, r2, #28
 800e688:	bf44      	itt	mi
 800e68a:	232b      	movmi	r3, #43	; 0x2b
 800e68c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e690:	f89a 3000 	ldrb.w	r3, [sl]
 800e694:	2b2a      	cmp	r3, #42	; 0x2a
 800e696:	d015      	beq.n	800e6c4 <_vfiprintf_r+0x120>
 800e698:	9a07      	ldr	r2, [sp, #28]
 800e69a:	4654      	mov	r4, sl
 800e69c:	2000      	movs	r0, #0
 800e69e:	f04f 0c0a 	mov.w	ip, #10
 800e6a2:	4621      	mov	r1, r4
 800e6a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6a8:	3b30      	subs	r3, #48	; 0x30
 800e6aa:	2b09      	cmp	r3, #9
 800e6ac:	d94d      	bls.n	800e74a <_vfiprintf_r+0x1a6>
 800e6ae:	b1b0      	cbz	r0, 800e6de <_vfiprintf_r+0x13a>
 800e6b0:	9207      	str	r2, [sp, #28]
 800e6b2:	e014      	b.n	800e6de <_vfiprintf_r+0x13a>
 800e6b4:	eba0 0308 	sub.w	r3, r0, r8
 800e6b8:	fa09 f303 	lsl.w	r3, r9, r3
 800e6bc:	4313      	orrs	r3, r2
 800e6be:	9304      	str	r3, [sp, #16]
 800e6c0:	46a2      	mov	sl, r4
 800e6c2:	e7d2      	b.n	800e66a <_vfiprintf_r+0xc6>
 800e6c4:	9b03      	ldr	r3, [sp, #12]
 800e6c6:	1d19      	adds	r1, r3, #4
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	9103      	str	r1, [sp, #12]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	bfbb      	ittet	lt
 800e6d0:	425b      	neglt	r3, r3
 800e6d2:	f042 0202 	orrlt.w	r2, r2, #2
 800e6d6:	9307      	strge	r3, [sp, #28]
 800e6d8:	9307      	strlt	r3, [sp, #28]
 800e6da:	bfb8      	it	lt
 800e6dc:	9204      	strlt	r2, [sp, #16]
 800e6de:	7823      	ldrb	r3, [r4, #0]
 800e6e0:	2b2e      	cmp	r3, #46	; 0x2e
 800e6e2:	d10c      	bne.n	800e6fe <_vfiprintf_r+0x15a>
 800e6e4:	7863      	ldrb	r3, [r4, #1]
 800e6e6:	2b2a      	cmp	r3, #42	; 0x2a
 800e6e8:	d134      	bne.n	800e754 <_vfiprintf_r+0x1b0>
 800e6ea:	9b03      	ldr	r3, [sp, #12]
 800e6ec:	1d1a      	adds	r2, r3, #4
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	9203      	str	r2, [sp, #12]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	bfb8      	it	lt
 800e6f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800e6fa:	3402      	adds	r4, #2
 800e6fc:	9305      	str	r3, [sp, #20]
 800e6fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e7d4 <_vfiprintf_r+0x230>
 800e702:	7821      	ldrb	r1, [r4, #0]
 800e704:	2203      	movs	r2, #3
 800e706:	4650      	mov	r0, sl
 800e708:	f7f1 fd42 	bl	8000190 <memchr>
 800e70c:	b138      	cbz	r0, 800e71e <_vfiprintf_r+0x17a>
 800e70e:	9b04      	ldr	r3, [sp, #16]
 800e710:	eba0 000a 	sub.w	r0, r0, sl
 800e714:	2240      	movs	r2, #64	; 0x40
 800e716:	4082      	lsls	r2, r0
 800e718:	4313      	orrs	r3, r2
 800e71a:	3401      	adds	r4, #1
 800e71c:	9304      	str	r3, [sp, #16]
 800e71e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e722:	4829      	ldr	r0, [pc, #164]	; (800e7c8 <_vfiprintf_r+0x224>)
 800e724:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e728:	2206      	movs	r2, #6
 800e72a:	f7f1 fd31 	bl	8000190 <memchr>
 800e72e:	2800      	cmp	r0, #0
 800e730:	d03f      	beq.n	800e7b2 <_vfiprintf_r+0x20e>
 800e732:	4b26      	ldr	r3, [pc, #152]	; (800e7cc <_vfiprintf_r+0x228>)
 800e734:	bb1b      	cbnz	r3, 800e77e <_vfiprintf_r+0x1da>
 800e736:	9b03      	ldr	r3, [sp, #12]
 800e738:	3307      	adds	r3, #7
 800e73a:	f023 0307 	bic.w	r3, r3, #7
 800e73e:	3308      	adds	r3, #8
 800e740:	9303      	str	r3, [sp, #12]
 800e742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e744:	443b      	add	r3, r7
 800e746:	9309      	str	r3, [sp, #36]	; 0x24
 800e748:	e768      	b.n	800e61c <_vfiprintf_r+0x78>
 800e74a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e74e:	460c      	mov	r4, r1
 800e750:	2001      	movs	r0, #1
 800e752:	e7a6      	b.n	800e6a2 <_vfiprintf_r+0xfe>
 800e754:	2300      	movs	r3, #0
 800e756:	3401      	adds	r4, #1
 800e758:	9305      	str	r3, [sp, #20]
 800e75a:	4619      	mov	r1, r3
 800e75c:	f04f 0c0a 	mov.w	ip, #10
 800e760:	4620      	mov	r0, r4
 800e762:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e766:	3a30      	subs	r2, #48	; 0x30
 800e768:	2a09      	cmp	r2, #9
 800e76a:	d903      	bls.n	800e774 <_vfiprintf_r+0x1d0>
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d0c6      	beq.n	800e6fe <_vfiprintf_r+0x15a>
 800e770:	9105      	str	r1, [sp, #20]
 800e772:	e7c4      	b.n	800e6fe <_vfiprintf_r+0x15a>
 800e774:	fb0c 2101 	mla	r1, ip, r1, r2
 800e778:	4604      	mov	r4, r0
 800e77a:	2301      	movs	r3, #1
 800e77c:	e7f0      	b.n	800e760 <_vfiprintf_r+0x1bc>
 800e77e:	ab03      	add	r3, sp, #12
 800e780:	9300      	str	r3, [sp, #0]
 800e782:	462a      	mov	r2, r5
 800e784:	4b12      	ldr	r3, [pc, #72]	; (800e7d0 <_vfiprintf_r+0x22c>)
 800e786:	a904      	add	r1, sp, #16
 800e788:	4630      	mov	r0, r6
 800e78a:	f3af 8000 	nop.w
 800e78e:	4607      	mov	r7, r0
 800e790:	1c78      	adds	r0, r7, #1
 800e792:	d1d6      	bne.n	800e742 <_vfiprintf_r+0x19e>
 800e794:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e796:	07d9      	lsls	r1, r3, #31
 800e798:	d405      	bmi.n	800e7a6 <_vfiprintf_r+0x202>
 800e79a:	89ab      	ldrh	r3, [r5, #12]
 800e79c:	059a      	lsls	r2, r3, #22
 800e79e:	d402      	bmi.n	800e7a6 <_vfiprintf_r+0x202>
 800e7a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e7a2:	f7ff fdcd 	bl	800e340 <__retarget_lock_release_recursive>
 800e7a6:	89ab      	ldrh	r3, [r5, #12]
 800e7a8:	065b      	lsls	r3, r3, #25
 800e7aa:	f53f af1d 	bmi.w	800e5e8 <_vfiprintf_r+0x44>
 800e7ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e7b0:	e71c      	b.n	800e5ec <_vfiprintf_r+0x48>
 800e7b2:	ab03      	add	r3, sp, #12
 800e7b4:	9300      	str	r3, [sp, #0]
 800e7b6:	462a      	mov	r2, r5
 800e7b8:	4b05      	ldr	r3, [pc, #20]	; (800e7d0 <_vfiprintf_r+0x22c>)
 800e7ba:	a904      	add	r1, sp, #16
 800e7bc:	4630      	mov	r0, r6
 800e7be:	f000 f879 	bl	800e8b4 <_printf_i>
 800e7c2:	e7e4      	b.n	800e78e <_vfiprintf_r+0x1ea>
 800e7c4:	080102fc 	.word	0x080102fc
 800e7c8:	08010306 	.word	0x08010306
 800e7cc:	00000000 	.word	0x00000000
 800e7d0:	0800e57f 	.word	0x0800e57f
 800e7d4:	08010302 	.word	0x08010302

0800e7d8 <_printf_common>:
 800e7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7dc:	4616      	mov	r6, r2
 800e7de:	4699      	mov	r9, r3
 800e7e0:	688a      	ldr	r2, [r1, #8]
 800e7e2:	690b      	ldr	r3, [r1, #16]
 800e7e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e7e8:	4293      	cmp	r3, r2
 800e7ea:	bfb8      	it	lt
 800e7ec:	4613      	movlt	r3, r2
 800e7ee:	6033      	str	r3, [r6, #0]
 800e7f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e7f4:	4607      	mov	r7, r0
 800e7f6:	460c      	mov	r4, r1
 800e7f8:	b10a      	cbz	r2, 800e7fe <_printf_common+0x26>
 800e7fa:	3301      	adds	r3, #1
 800e7fc:	6033      	str	r3, [r6, #0]
 800e7fe:	6823      	ldr	r3, [r4, #0]
 800e800:	0699      	lsls	r1, r3, #26
 800e802:	bf42      	ittt	mi
 800e804:	6833      	ldrmi	r3, [r6, #0]
 800e806:	3302      	addmi	r3, #2
 800e808:	6033      	strmi	r3, [r6, #0]
 800e80a:	6825      	ldr	r5, [r4, #0]
 800e80c:	f015 0506 	ands.w	r5, r5, #6
 800e810:	d106      	bne.n	800e820 <_printf_common+0x48>
 800e812:	f104 0a19 	add.w	sl, r4, #25
 800e816:	68e3      	ldr	r3, [r4, #12]
 800e818:	6832      	ldr	r2, [r6, #0]
 800e81a:	1a9b      	subs	r3, r3, r2
 800e81c:	42ab      	cmp	r3, r5
 800e81e:	dc26      	bgt.n	800e86e <_printf_common+0x96>
 800e820:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e824:	1e13      	subs	r3, r2, #0
 800e826:	6822      	ldr	r2, [r4, #0]
 800e828:	bf18      	it	ne
 800e82a:	2301      	movne	r3, #1
 800e82c:	0692      	lsls	r2, r2, #26
 800e82e:	d42b      	bmi.n	800e888 <_printf_common+0xb0>
 800e830:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e834:	4649      	mov	r1, r9
 800e836:	4638      	mov	r0, r7
 800e838:	47c0      	blx	r8
 800e83a:	3001      	adds	r0, #1
 800e83c:	d01e      	beq.n	800e87c <_printf_common+0xa4>
 800e83e:	6823      	ldr	r3, [r4, #0]
 800e840:	6922      	ldr	r2, [r4, #16]
 800e842:	f003 0306 	and.w	r3, r3, #6
 800e846:	2b04      	cmp	r3, #4
 800e848:	bf02      	ittt	eq
 800e84a:	68e5      	ldreq	r5, [r4, #12]
 800e84c:	6833      	ldreq	r3, [r6, #0]
 800e84e:	1aed      	subeq	r5, r5, r3
 800e850:	68a3      	ldr	r3, [r4, #8]
 800e852:	bf0c      	ite	eq
 800e854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e858:	2500      	movne	r5, #0
 800e85a:	4293      	cmp	r3, r2
 800e85c:	bfc4      	itt	gt
 800e85e:	1a9b      	subgt	r3, r3, r2
 800e860:	18ed      	addgt	r5, r5, r3
 800e862:	2600      	movs	r6, #0
 800e864:	341a      	adds	r4, #26
 800e866:	42b5      	cmp	r5, r6
 800e868:	d11a      	bne.n	800e8a0 <_printf_common+0xc8>
 800e86a:	2000      	movs	r0, #0
 800e86c:	e008      	b.n	800e880 <_printf_common+0xa8>
 800e86e:	2301      	movs	r3, #1
 800e870:	4652      	mov	r2, sl
 800e872:	4649      	mov	r1, r9
 800e874:	4638      	mov	r0, r7
 800e876:	47c0      	blx	r8
 800e878:	3001      	adds	r0, #1
 800e87a:	d103      	bne.n	800e884 <_printf_common+0xac>
 800e87c:	f04f 30ff 	mov.w	r0, #4294967295
 800e880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e884:	3501      	adds	r5, #1
 800e886:	e7c6      	b.n	800e816 <_printf_common+0x3e>
 800e888:	18e1      	adds	r1, r4, r3
 800e88a:	1c5a      	adds	r2, r3, #1
 800e88c:	2030      	movs	r0, #48	; 0x30
 800e88e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e892:	4422      	add	r2, r4
 800e894:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e898:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e89c:	3302      	adds	r3, #2
 800e89e:	e7c7      	b.n	800e830 <_printf_common+0x58>
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	4622      	mov	r2, r4
 800e8a4:	4649      	mov	r1, r9
 800e8a6:	4638      	mov	r0, r7
 800e8a8:	47c0      	blx	r8
 800e8aa:	3001      	adds	r0, #1
 800e8ac:	d0e6      	beq.n	800e87c <_printf_common+0xa4>
 800e8ae:	3601      	adds	r6, #1
 800e8b0:	e7d9      	b.n	800e866 <_printf_common+0x8e>
	...

0800e8b4 <_printf_i>:
 800e8b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e8b8:	7e0f      	ldrb	r7, [r1, #24]
 800e8ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e8bc:	2f78      	cmp	r7, #120	; 0x78
 800e8be:	4691      	mov	r9, r2
 800e8c0:	4680      	mov	r8, r0
 800e8c2:	460c      	mov	r4, r1
 800e8c4:	469a      	mov	sl, r3
 800e8c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e8ca:	d807      	bhi.n	800e8dc <_printf_i+0x28>
 800e8cc:	2f62      	cmp	r7, #98	; 0x62
 800e8ce:	d80a      	bhi.n	800e8e6 <_printf_i+0x32>
 800e8d0:	2f00      	cmp	r7, #0
 800e8d2:	f000 80d4 	beq.w	800ea7e <_printf_i+0x1ca>
 800e8d6:	2f58      	cmp	r7, #88	; 0x58
 800e8d8:	f000 80c0 	beq.w	800ea5c <_printf_i+0x1a8>
 800e8dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e8e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e8e4:	e03a      	b.n	800e95c <_printf_i+0xa8>
 800e8e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e8ea:	2b15      	cmp	r3, #21
 800e8ec:	d8f6      	bhi.n	800e8dc <_printf_i+0x28>
 800e8ee:	a101      	add	r1, pc, #4	; (adr r1, 800e8f4 <_printf_i+0x40>)
 800e8f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e8f4:	0800e94d 	.word	0x0800e94d
 800e8f8:	0800e961 	.word	0x0800e961
 800e8fc:	0800e8dd 	.word	0x0800e8dd
 800e900:	0800e8dd 	.word	0x0800e8dd
 800e904:	0800e8dd 	.word	0x0800e8dd
 800e908:	0800e8dd 	.word	0x0800e8dd
 800e90c:	0800e961 	.word	0x0800e961
 800e910:	0800e8dd 	.word	0x0800e8dd
 800e914:	0800e8dd 	.word	0x0800e8dd
 800e918:	0800e8dd 	.word	0x0800e8dd
 800e91c:	0800e8dd 	.word	0x0800e8dd
 800e920:	0800ea65 	.word	0x0800ea65
 800e924:	0800e98d 	.word	0x0800e98d
 800e928:	0800ea1f 	.word	0x0800ea1f
 800e92c:	0800e8dd 	.word	0x0800e8dd
 800e930:	0800e8dd 	.word	0x0800e8dd
 800e934:	0800ea87 	.word	0x0800ea87
 800e938:	0800e8dd 	.word	0x0800e8dd
 800e93c:	0800e98d 	.word	0x0800e98d
 800e940:	0800e8dd 	.word	0x0800e8dd
 800e944:	0800e8dd 	.word	0x0800e8dd
 800e948:	0800ea27 	.word	0x0800ea27
 800e94c:	682b      	ldr	r3, [r5, #0]
 800e94e:	1d1a      	adds	r2, r3, #4
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	602a      	str	r2, [r5, #0]
 800e954:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e95c:	2301      	movs	r3, #1
 800e95e:	e09f      	b.n	800eaa0 <_printf_i+0x1ec>
 800e960:	6820      	ldr	r0, [r4, #0]
 800e962:	682b      	ldr	r3, [r5, #0]
 800e964:	0607      	lsls	r7, r0, #24
 800e966:	f103 0104 	add.w	r1, r3, #4
 800e96a:	6029      	str	r1, [r5, #0]
 800e96c:	d501      	bpl.n	800e972 <_printf_i+0xbe>
 800e96e:	681e      	ldr	r6, [r3, #0]
 800e970:	e003      	b.n	800e97a <_printf_i+0xc6>
 800e972:	0646      	lsls	r6, r0, #25
 800e974:	d5fb      	bpl.n	800e96e <_printf_i+0xba>
 800e976:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e97a:	2e00      	cmp	r6, #0
 800e97c:	da03      	bge.n	800e986 <_printf_i+0xd2>
 800e97e:	232d      	movs	r3, #45	; 0x2d
 800e980:	4276      	negs	r6, r6
 800e982:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e986:	485a      	ldr	r0, [pc, #360]	; (800eaf0 <_printf_i+0x23c>)
 800e988:	230a      	movs	r3, #10
 800e98a:	e012      	b.n	800e9b2 <_printf_i+0xfe>
 800e98c:	682b      	ldr	r3, [r5, #0]
 800e98e:	6820      	ldr	r0, [r4, #0]
 800e990:	1d19      	adds	r1, r3, #4
 800e992:	6029      	str	r1, [r5, #0]
 800e994:	0605      	lsls	r5, r0, #24
 800e996:	d501      	bpl.n	800e99c <_printf_i+0xe8>
 800e998:	681e      	ldr	r6, [r3, #0]
 800e99a:	e002      	b.n	800e9a2 <_printf_i+0xee>
 800e99c:	0641      	lsls	r1, r0, #25
 800e99e:	d5fb      	bpl.n	800e998 <_printf_i+0xe4>
 800e9a0:	881e      	ldrh	r6, [r3, #0]
 800e9a2:	4853      	ldr	r0, [pc, #332]	; (800eaf0 <_printf_i+0x23c>)
 800e9a4:	2f6f      	cmp	r7, #111	; 0x6f
 800e9a6:	bf0c      	ite	eq
 800e9a8:	2308      	moveq	r3, #8
 800e9aa:	230a      	movne	r3, #10
 800e9ac:	2100      	movs	r1, #0
 800e9ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e9b2:	6865      	ldr	r5, [r4, #4]
 800e9b4:	60a5      	str	r5, [r4, #8]
 800e9b6:	2d00      	cmp	r5, #0
 800e9b8:	bfa2      	ittt	ge
 800e9ba:	6821      	ldrge	r1, [r4, #0]
 800e9bc:	f021 0104 	bicge.w	r1, r1, #4
 800e9c0:	6021      	strge	r1, [r4, #0]
 800e9c2:	b90e      	cbnz	r6, 800e9c8 <_printf_i+0x114>
 800e9c4:	2d00      	cmp	r5, #0
 800e9c6:	d04b      	beq.n	800ea60 <_printf_i+0x1ac>
 800e9c8:	4615      	mov	r5, r2
 800e9ca:	fbb6 f1f3 	udiv	r1, r6, r3
 800e9ce:	fb03 6711 	mls	r7, r3, r1, r6
 800e9d2:	5dc7      	ldrb	r7, [r0, r7]
 800e9d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e9d8:	4637      	mov	r7, r6
 800e9da:	42bb      	cmp	r3, r7
 800e9dc:	460e      	mov	r6, r1
 800e9de:	d9f4      	bls.n	800e9ca <_printf_i+0x116>
 800e9e0:	2b08      	cmp	r3, #8
 800e9e2:	d10b      	bne.n	800e9fc <_printf_i+0x148>
 800e9e4:	6823      	ldr	r3, [r4, #0]
 800e9e6:	07de      	lsls	r6, r3, #31
 800e9e8:	d508      	bpl.n	800e9fc <_printf_i+0x148>
 800e9ea:	6923      	ldr	r3, [r4, #16]
 800e9ec:	6861      	ldr	r1, [r4, #4]
 800e9ee:	4299      	cmp	r1, r3
 800e9f0:	bfde      	ittt	le
 800e9f2:	2330      	movle	r3, #48	; 0x30
 800e9f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e9f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e9fc:	1b52      	subs	r2, r2, r5
 800e9fe:	6122      	str	r2, [r4, #16]
 800ea00:	f8cd a000 	str.w	sl, [sp]
 800ea04:	464b      	mov	r3, r9
 800ea06:	aa03      	add	r2, sp, #12
 800ea08:	4621      	mov	r1, r4
 800ea0a:	4640      	mov	r0, r8
 800ea0c:	f7ff fee4 	bl	800e7d8 <_printf_common>
 800ea10:	3001      	adds	r0, #1
 800ea12:	d14a      	bne.n	800eaaa <_printf_i+0x1f6>
 800ea14:	f04f 30ff 	mov.w	r0, #4294967295
 800ea18:	b004      	add	sp, #16
 800ea1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea1e:	6823      	ldr	r3, [r4, #0]
 800ea20:	f043 0320 	orr.w	r3, r3, #32
 800ea24:	6023      	str	r3, [r4, #0]
 800ea26:	4833      	ldr	r0, [pc, #204]	; (800eaf4 <_printf_i+0x240>)
 800ea28:	2778      	movs	r7, #120	; 0x78
 800ea2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ea2e:	6823      	ldr	r3, [r4, #0]
 800ea30:	6829      	ldr	r1, [r5, #0]
 800ea32:	061f      	lsls	r7, r3, #24
 800ea34:	f851 6b04 	ldr.w	r6, [r1], #4
 800ea38:	d402      	bmi.n	800ea40 <_printf_i+0x18c>
 800ea3a:	065f      	lsls	r7, r3, #25
 800ea3c:	bf48      	it	mi
 800ea3e:	b2b6      	uxthmi	r6, r6
 800ea40:	07df      	lsls	r7, r3, #31
 800ea42:	bf48      	it	mi
 800ea44:	f043 0320 	orrmi.w	r3, r3, #32
 800ea48:	6029      	str	r1, [r5, #0]
 800ea4a:	bf48      	it	mi
 800ea4c:	6023      	strmi	r3, [r4, #0]
 800ea4e:	b91e      	cbnz	r6, 800ea58 <_printf_i+0x1a4>
 800ea50:	6823      	ldr	r3, [r4, #0]
 800ea52:	f023 0320 	bic.w	r3, r3, #32
 800ea56:	6023      	str	r3, [r4, #0]
 800ea58:	2310      	movs	r3, #16
 800ea5a:	e7a7      	b.n	800e9ac <_printf_i+0xf8>
 800ea5c:	4824      	ldr	r0, [pc, #144]	; (800eaf0 <_printf_i+0x23c>)
 800ea5e:	e7e4      	b.n	800ea2a <_printf_i+0x176>
 800ea60:	4615      	mov	r5, r2
 800ea62:	e7bd      	b.n	800e9e0 <_printf_i+0x12c>
 800ea64:	682b      	ldr	r3, [r5, #0]
 800ea66:	6826      	ldr	r6, [r4, #0]
 800ea68:	6961      	ldr	r1, [r4, #20]
 800ea6a:	1d18      	adds	r0, r3, #4
 800ea6c:	6028      	str	r0, [r5, #0]
 800ea6e:	0635      	lsls	r5, r6, #24
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	d501      	bpl.n	800ea78 <_printf_i+0x1c4>
 800ea74:	6019      	str	r1, [r3, #0]
 800ea76:	e002      	b.n	800ea7e <_printf_i+0x1ca>
 800ea78:	0670      	lsls	r0, r6, #25
 800ea7a:	d5fb      	bpl.n	800ea74 <_printf_i+0x1c0>
 800ea7c:	8019      	strh	r1, [r3, #0]
 800ea7e:	2300      	movs	r3, #0
 800ea80:	6123      	str	r3, [r4, #16]
 800ea82:	4615      	mov	r5, r2
 800ea84:	e7bc      	b.n	800ea00 <_printf_i+0x14c>
 800ea86:	682b      	ldr	r3, [r5, #0]
 800ea88:	1d1a      	adds	r2, r3, #4
 800ea8a:	602a      	str	r2, [r5, #0]
 800ea8c:	681d      	ldr	r5, [r3, #0]
 800ea8e:	6862      	ldr	r2, [r4, #4]
 800ea90:	2100      	movs	r1, #0
 800ea92:	4628      	mov	r0, r5
 800ea94:	f7f1 fb7c 	bl	8000190 <memchr>
 800ea98:	b108      	cbz	r0, 800ea9e <_printf_i+0x1ea>
 800ea9a:	1b40      	subs	r0, r0, r5
 800ea9c:	6060      	str	r0, [r4, #4]
 800ea9e:	6863      	ldr	r3, [r4, #4]
 800eaa0:	6123      	str	r3, [r4, #16]
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eaa8:	e7aa      	b.n	800ea00 <_printf_i+0x14c>
 800eaaa:	6923      	ldr	r3, [r4, #16]
 800eaac:	462a      	mov	r2, r5
 800eaae:	4649      	mov	r1, r9
 800eab0:	4640      	mov	r0, r8
 800eab2:	47d0      	blx	sl
 800eab4:	3001      	adds	r0, #1
 800eab6:	d0ad      	beq.n	800ea14 <_printf_i+0x160>
 800eab8:	6823      	ldr	r3, [r4, #0]
 800eaba:	079b      	lsls	r3, r3, #30
 800eabc:	d413      	bmi.n	800eae6 <_printf_i+0x232>
 800eabe:	68e0      	ldr	r0, [r4, #12]
 800eac0:	9b03      	ldr	r3, [sp, #12]
 800eac2:	4298      	cmp	r0, r3
 800eac4:	bfb8      	it	lt
 800eac6:	4618      	movlt	r0, r3
 800eac8:	e7a6      	b.n	800ea18 <_printf_i+0x164>
 800eaca:	2301      	movs	r3, #1
 800eacc:	4632      	mov	r2, r6
 800eace:	4649      	mov	r1, r9
 800ead0:	4640      	mov	r0, r8
 800ead2:	47d0      	blx	sl
 800ead4:	3001      	adds	r0, #1
 800ead6:	d09d      	beq.n	800ea14 <_printf_i+0x160>
 800ead8:	3501      	adds	r5, #1
 800eada:	68e3      	ldr	r3, [r4, #12]
 800eadc:	9903      	ldr	r1, [sp, #12]
 800eade:	1a5b      	subs	r3, r3, r1
 800eae0:	42ab      	cmp	r3, r5
 800eae2:	dcf2      	bgt.n	800eaca <_printf_i+0x216>
 800eae4:	e7eb      	b.n	800eabe <_printf_i+0x20a>
 800eae6:	2500      	movs	r5, #0
 800eae8:	f104 0619 	add.w	r6, r4, #25
 800eaec:	e7f5      	b.n	800eada <_printf_i+0x226>
 800eaee:	bf00      	nop
 800eaf0:	0801030d 	.word	0x0801030d
 800eaf4:	0801031e 	.word	0x0801031e

0800eaf8 <__sflush_r>:
 800eaf8:	898a      	ldrh	r2, [r1, #12]
 800eafa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eafe:	4605      	mov	r5, r0
 800eb00:	0710      	lsls	r0, r2, #28
 800eb02:	460c      	mov	r4, r1
 800eb04:	d458      	bmi.n	800ebb8 <__sflush_r+0xc0>
 800eb06:	684b      	ldr	r3, [r1, #4]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	dc05      	bgt.n	800eb18 <__sflush_r+0x20>
 800eb0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	dc02      	bgt.n	800eb18 <__sflush_r+0x20>
 800eb12:	2000      	movs	r0, #0
 800eb14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb1a:	2e00      	cmp	r6, #0
 800eb1c:	d0f9      	beq.n	800eb12 <__sflush_r+0x1a>
 800eb1e:	2300      	movs	r3, #0
 800eb20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eb24:	682f      	ldr	r7, [r5, #0]
 800eb26:	6a21      	ldr	r1, [r4, #32]
 800eb28:	602b      	str	r3, [r5, #0]
 800eb2a:	d032      	beq.n	800eb92 <__sflush_r+0x9a>
 800eb2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eb2e:	89a3      	ldrh	r3, [r4, #12]
 800eb30:	075a      	lsls	r2, r3, #29
 800eb32:	d505      	bpl.n	800eb40 <__sflush_r+0x48>
 800eb34:	6863      	ldr	r3, [r4, #4]
 800eb36:	1ac0      	subs	r0, r0, r3
 800eb38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb3a:	b10b      	cbz	r3, 800eb40 <__sflush_r+0x48>
 800eb3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eb3e:	1ac0      	subs	r0, r0, r3
 800eb40:	2300      	movs	r3, #0
 800eb42:	4602      	mov	r2, r0
 800eb44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eb46:	6a21      	ldr	r1, [r4, #32]
 800eb48:	4628      	mov	r0, r5
 800eb4a:	47b0      	blx	r6
 800eb4c:	1c43      	adds	r3, r0, #1
 800eb4e:	89a3      	ldrh	r3, [r4, #12]
 800eb50:	d106      	bne.n	800eb60 <__sflush_r+0x68>
 800eb52:	6829      	ldr	r1, [r5, #0]
 800eb54:	291d      	cmp	r1, #29
 800eb56:	d82b      	bhi.n	800ebb0 <__sflush_r+0xb8>
 800eb58:	4a29      	ldr	r2, [pc, #164]	; (800ec00 <__sflush_r+0x108>)
 800eb5a:	410a      	asrs	r2, r1
 800eb5c:	07d6      	lsls	r6, r2, #31
 800eb5e:	d427      	bmi.n	800ebb0 <__sflush_r+0xb8>
 800eb60:	2200      	movs	r2, #0
 800eb62:	6062      	str	r2, [r4, #4]
 800eb64:	04d9      	lsls	r1, r3, #19
 800eb66:	6922      	ldr	r2, [r4, #16]
 800eb68:	6022      	str	r2, [r4, #0]
 800eb6a:	d504      	bpl.n	800eb76 <__sflush_r+0x7e>
 800eb6c:	1c42      	adds	r2, r0, #1
 800eb6e:	d101      	bne.n	800eb74 <__sflush_r+0x7c>
 800eb70:	682b      	ldr	r3, [r5, #0]
 800eb72:	b903      	cbnz	r3, 800eb76 <__sflush_r+0x7e>
 800eb74:	6560      	str	r0, [r4, #84]	; 0x54
 800eb76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb78:	602f      	str	r7, [r5, #0]
 800eb7a:	2900      	cmp	r1, #0
 800eb7c:	d0c9      	beq.n	800eb12 <__sflush_r+0x1a>
 800eb7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb82:	4299      	cmp	r1, r3
 800eb84:	d002      	beq.n	800eb8c <__sflush_r+0x94>
 800eb86:	4628      	mov	r0, r5
 800eb88:	f7ff fbea 	bl	800e360 <_free_r>
 800eb8c:	2000      	movs	r0, #0
 800eb8e:	6360      	str	r0, [r4, #52]	; 0x34
 800eb90:	e7c0      	b.n	800eb14 <__sflush_r+0x1c>
 800eb92:	2301      	movs	r3, #1
 800eb94:	4628      	mov	r0, r5
 800eb96:	47b0      	blx	r6
 800eb98:	1c41      	adds	r1, r0, #1
 800eb9a:	d1c8      	bne.n	800eb2e <__sflush_r+0x36>
 800eb9c:	682b      	ldr	r3, [r5, #0]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d0c5      	beq.n	800eb2e <__sflush_r+0x36>
 800eba2:	2b1d      	cmp	r3, #29
 800eba4:	d001      	beq.n	800ebaa <__sflush_r+0xb2>
 800eba6:	2b16      	cmp	r3, #22
 800eba8:	d101      	bne.n	800ebae <__sflush_r+0xb6>
 800ebaa:	602f      	str	r7, [r5, #0]
 800ebac:	e7b1      	b.n	800eb12 <__sflush_r+0x1a>
 800ebae:	89a3      	ldrh	r3, [r4, #12]
 800ebb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebb4:	81a3      	strh	r3, [r4, #12]
 800ebb6:	e7ad      	b.n	800eb14 <__sflush_r+0x1c>
 800ebb8:	690f      	ldr	r7, [r1, #16]
 800ebba:	2f00      	cmp	r7, #0
 800ebbc:	d0a9      	beq.n	800eb12 <__sflush_r+0x1a>
 800ebbe:	0793      	lsls	r3, r2, #30
 800ebc0:	680e      	ldr	r6, [r1, #0]
 800ebc2:	bf08      	it	eq
 800ebc4:	694b      	ldreq	r3, [r1, #20]
 800ebc6:	600f      	str	r7, [r1, #0]
 800ebc8:	bf18      	it	ne
 800ebca:	2300      	movne	r3, #0
 800ebcc:	eba6 0807 	sub.w	r8, r6, r7
 800ebd0:	608b      	str	r3, [r1, #8]
 800ebd2:	f1b8 0f00 	cmp.w	r8, #0
 800ebd6:	dd9c      	ble.n	800eb12 <__sflush_r+0x1a>
 800ebd8:	6a21      	ldr	r1, [r4, #32]
 800ebda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ebdc:	4643      	mov	r3, r8
 800ebde:	463a      	mov	r2, r7
 800ebe0:	4628      	mov	r0, r5
 800ebe2:	47b0      	blx	r6
 800ebe4:	2800      	cmp	r0, #0
 800ebe6:	dc06      	bgt.n	800ebf6 <__sflush_r+0xfe>
 800ebe8:	89a3      	ldrh	r3, [r4, #12]
 800ebea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebee:	81a3      	strh	r3, [r4, #12]
 800ebf0:	f04f 30ff 	mov.w	r0, #4294967295
 800ebf4:	e78e      	b.n	800eb14 <__sflush_r+0x1c>
 800ebf6:	4407      	add	r7, r0
 800ebf8:	eba8 0800 	sub.w	r8, r8, r0
 800ebfc:	e7e9      	b.n	800ebd2 <__sflush_r+0xda>
 800ebfe:	bf00      	nop
 800ec00:	dfbffffe 	.word	0xdfbffffe

0800ec04 <_fflush_r>:
 800ec04:	b538      	push	{r3, r4, r5, lr}
 800ec06:	690b      	ldr	r3, [r1, #16]
 800ec08:	4605      	mov	r5, r0
 800ec0a:	460c      	mov	r4, r1
 800ec0c:	b913      	cbnz	r3, 800ec14 <_fflush_r+0x10>
 800ec0e:	2500      	movs	r5, #0
 800ec10:	4628      	mov	r0, r5
 800ec12:	bd38      	pop	{r3, r4, r5, pc}
 800ec14:	b118      	cbz	r0, 800ec1e <_fflush_r+0x1a>
 800ec16:	6a03      	ldr	r3, [r0, #32]
 800ec18:	b90b      	cbnz	r3, 800ec1e <_fflush_r+0x1a>
 800ec1a:	f7ff f97b 	bl	800df14 <__sinit>
 800ec1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d0f3      	beq.n	800ec0e <_fflush_r+0xa>
 800ec26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ec28:	07d0      	lsls	r0, r2, #31
 800ec2a:	d404      	bmi.n	800ec36 <_fflush_r+0x32>
 800ec2c:	0599      	lsls	r1, r3, #22
 800ec2e:	d402      	bmi.n	800ec36 <_fflush_r+0x32>
 800ec30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec32:	f7ff fb84 	bl	800e33e <__retarget_lock_acquire_recursive>
 800ec36:	4628      	mov	r0, r5
 800ec38:	4621      	mov	r1, r4
 800ec3a:	f7ff ff5d 	bl	800eaf8 <__sflush_r>
 800ec3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec40:	07da      	lsls	r2, r3, #31
 800ec42:	4605      	mov	r5, r0
 800ec44:	d4e4      	bmi.n	800ec10 <_fflush_r+0xc>
 800ec46:	89a3      	ldrh	r3, [r4, #12]
 800ec48:	059b      	lsls	r3, r3, #22
 800ec4a:	d4e1      	bmi.n	800ec10 <_fflush_r+0xc>
 800ec4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec4e:	f7ff fb77 	bl	800e340 <__retarget_lock_release_recursive>
 800ec52:	e7dd      	b.n	800ec10 <_fflush_r+0xc>

0800ec54 <__swhatbuf_r>:
 800ec54:	b570      	push	{r4, r5, r6, lr}
 800ec56:	460c      	mov	r4, r1
 800ec58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec5c:	2900      	cmp	r1, #0
 800ec5e:	b096      	sub	sp, #88	; 0x58
 800ec60:	4615      	mov	r5, r2
 800ec62:	461e      	mov	r6, r3
 800ec64:	da0d      	bge.n	800ec82 <__swhatbuf_r+0x2e>
 800ec66:	89a3      	ldrh	r3, [r4, #12]
 800ec68:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ec6c:	f04f 0100 	mov.w	r1, #0
 800ec70:	bf0c      	ite	eq
 800ec72:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ec76:	2340      	movne	r3, #64	; 0x40
 800ec78:	2000      	movs	r0, #0
 800ec7a:	6031      	str	r1, [r6, #0]
 800ec7c:	602b      	str	r3, [r5, #0]
 800ec7e:	b016      	add	sp, #88	; 0x58
 800ec80:	bd70      	pop	{r4, r5, r6, pc}
 800ec82:	466a      	mov	r2, sp
 800ec84:	f000 f88a 	bl	800ed9c <_fstat_r>
 800ec88:	2800      	cmp	r0, #0
 800ec8a:	dbec      	blt.n	800ec66 <__swhatbuf_r+0x12>
 800ec8c:	9901      	ldr	r1, [sp, #4]
 800ec8e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ec92:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ec96:	4259      	negs	r1, r3
 800ec98:	4159      	adcs	r1, r3
 800ec9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec9e:	e7eb      	b.n	800ec78 <__swhatbuf_r+0x24>

0800eca0 <__smakebuf_r>:
 800eca0:	898b      	ldrh	r3, [r1, #12]
 800eca2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eca4:	079d      	lsls	r5, r3, #30
 800eca6:	4606      	mov	r6, r0
 800eca8:	460c      	mov	r4, r1
 800ecaa:	d507      	bpl.n	800ecbc <__smakebuf_r+0x1c>
 800ecac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ecb0:	6023      	str	r3, [r4, #0]
 800ecb2:	6123      	str	r3, [r4, #16]
 800ecb4:	2301      	movs	r3, #1
 800ecb6:	6163      	str	r3, [r4, #20]
 800ecb8:	b002      	add	sp, #8
 800ecba:	bd70      	pop	{r4, r5, r6, pc}
 800ecbc:	ab01      	add	r3, sp, #4
 800ecbe:	466a      	mov	r2, sp
 800ecc0:	f7ff ffc8 	bl	800ec54 <__swhatbuf_r>
 800ecc4:	9900      	ldr	r1, [sp, #0]
 800ecc6:	4605      	mov	r5, r0
 800ecc8:	4630      	mov	r0, r6
 800ecca:	f7ff fbb5 	bl	800e438 <_malloc_r>
 800ecce:	b948      	cbnz	r0, 800ece4 <__smakebuf_r+0x44>
 800ecd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecd4:	059a      	lsls	r2, r3, #22
 800ecd6:	d4ef      	bmi.n	800ecb8 <__smakebuf_r+0x18>
 800ecd8:	f023 0303 	bic.w	r3, r3, #3
 800ecdc:	f043 0302 	orr.w	r3, r3, #2
 800ece0:	81a3      	strh	r3, [r4, #12]
 800ece2:	e7e3      	b.n	800ecac <__smakebuf_r+0xc>
 800ece4:	89a3      	ldrh	r3, [r4, #12]
 800ece6:	6020      	str	r0, [r4, #0]
 800ece8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecec:	81a3      	strh	r3, [r4, #12]
 800ecee:	9b00      	ldr	r3, [sp, #0]
 800ecf0:	6163      	str	r3, [r4, #20]
 800ecf2:	9b01      	ldr	r3, [sp, #4]
 800ecf4:	6120      	str	r0, [r4, #16]
 800ecf6:	b15b      	cbz	r3, 800ed10 <__smakebuf_r+0x70>
 800ecf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ecfc:	4630      	mov	r0, r6
 800ecfe:	f000 f85f 	bl	800edc0 <_isatty_r>
 800ed02:	b128      	cbz	r0, 800ed10 <__smakebuf_r+0x70>
 800ed04:	89a3      	ldrh	r3, [r4, #12]
 800ed06:	f023 0303 	bic.w	r3, r3, #3
 800ed0a:	f043 0301 	orr.w	r3, r3, #1
 800ed0e:	81a3      	strh	r3, [r4, #12]
 800ed10:	89a3      	ldrh	r3, [r4, #12]
 800ed12:	431d      	orrs	r5, r3
 800ed14:	81a5      	strh	r5, [r4, #12]
 800ed16:	e7cf      	b.n	800ecb8 <__smakebuf_r+0x18>

0800ed18 <_putc_r>:
 800ed18:	b570      	push	{r4, r5, r6, lr}
 800ed1a:	460d      	mov	r5, r1
 800ed1c:	4614      	mov	r4, r2
 800ed1e:	4606      	mov	r6, r0
 800ed20:	b118      	cbz	r0, 800ed2a <_putc_r+0x12>
 800ed22:	6a03      	ldr	r3, [r0, #32]
 800ed24:	b90b      	cbnz	r3, 800ed2a <_putc_r+0x12>
 800ed26:	f7ff f8f5 	bl	800df14 <__sinit>
 800ed2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed2c:	07d8      	lsls	r0, r3, #31
 800ed2e:	d405      	bmi.n	800ed3c <_putc_r+0x24>
 800ed30:	89a3      	ldrh	r3, [r4, #12]
 800ed32:	0599      	lsls	r1, r3, #22
 800ed34:	d402      	bmi.n	800ed3c <_putc_r+0x24>
 800ed36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed38:	f7ff fb01 	bl	800e33e <__retarget_lock_acquire_recursive>
 800ed3c:	68a3      	ldr	r3, [r4, #8]
 800ed3e:	3b01      	subs	r3, #1
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	60a3      	str	r3, [r4, #8]
 800ed44:	da05      	bge.n	800ed52 <_putc_r+0x3a>
 800ed46:	69a2      	ldr	r2, [r4, #24]
 800ed48:	4293      	cmp	r3, r2
 800ed4a:	db12      	blt.n	800ed72 <_putc_r+0x5a>
 800ed4c:	b2eb      	uxtb	r3, r5
 800ed4e:	2b0a      	cmp	r3, #10
 800ed50:	d00f      	beq.n	800ed72 <_putc_r+0x5a>
 800ed52:	6823      	ldr	r3, [r4, #0]
 800ed54:	1c5a      	adds	r2, r3, #1
 800ed56:	6022      	str	r2, [r4, #0]
 800ed58:	701d      	strb	r5, [r3, #0]
 800ed5a:	b2ed      	uxtb	r5, r5
 800ed5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed5e:	07da      	lsls	r2, r3, #31
 800ed60:	d405      	bmi.n	800ed6e <_putc_r+0x56>
 800ed62:	89a3      	ldrh	r3, [r4, #12]
 800ed64:	059b      	lsls	r3, r3, #22
 800ed66:	d402      	bmi.n	800ed6e <_putc_r+0x56>
 800ed68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed6a:	f7ff fae9 	bl	800e340 <__retarget_lock_release_recursive>
 800ed6e:	4628      	mov	r0, r5
 800ed70:	bd70      	pop	{r4, r5, r6, pc}
 800ed72:	4629      	mov	r1, r5
 800ed74:	4622      	mov	r2, r4
 800ed76:	4630      	mov	r0, r6
 800ed78:	f7ff f9bb 	bl	800e0f2 <__swbuf_r>
 800ed7c:	4605      	mov	r5, r0
 800ed7e:	e7ed      	b.n	800ed5c <_putc_r+0x44>

0800ed80 <strchr>:
 800ed80:	b2c9      	uxtb	r1, r1
 800ed82:	4603      	mov	r3, r0
 800ed84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed88:	b11a      	cbz	r2, 800ed92 <strchr+0x12>
 800ed8a:	428a      	cmp	r2, r1
 800ed8c:	d1f9      	bne.n	800ed82 <strchr+0x2>
 800ed8e:	4618      	mov	r0, r3
 800ed90:	4770      	bx	lr
 800ed92:	2900      	cmp	r1, #0
 800ed94:	bf18      	it	ne
 800ed96:	2300      	movne	r3, #0
 800ed98:	e7f9      	b.n	800ed8e <strchr+0xe>
	...

0800ed9c <_fstat_r>:
 800ed9c:	b538      	push	{r3, r4, r5, lr}
 800ed9e:	4d07      	ldr	r5, [pc, #28]	; (800edbc <_fstat_r+0x20>)
 800eda0:	2300      	movs	r3, #0
 800eda2:	4604      	mov	r4, r0
 800eda4:	4608      	mov	r0, r1
 800eda6:	4611      	mov	r1, r2
 800eda8:	602b      	str	r3, [r5, #0]
 800edaa:	f7f4 f886 	bl	8002eba <_fstat>
 800edae:	1c43      	adds	r3, r0, #1
 800edb0:	d102      	bne.n	800edb8 <_fstat_r+0x1c>
 800edb2:	682b      	ldr	r3, [r5, #0]
 800edb4:	b103      	cbz	r3, 800edb8 <_fstat_r+0x1c>
 800edb6:	6023      	str	r3, [r4, #0]
 800edb8:	bd38      	pop	{r3, r4, r5, pc}
 800edba:	bf00      	nop
 800edbc:	20001864 	.word	0x20001864

0800edc0 <_isatty_r>:
 800edc0:	b538      	push	{r3, r4, r5, lr}
 800edc2:	4d06      	ldr	r5, [pc, #24]	; (800eddc <_isatty_r+0x1c>)
 800edc4:	2300      	movs	r3, #0
 800edc6:	4604      	mov	r4, r0
 800edc8:	4608      	mov	r0, r1
 800edca:	602b      	str	r3, [r5, #0]
 800edcc:	f7f4 f885 	bl	8002eda <_isatty>
 800edd0:	1c43      	adds	r3, r0, #1
 800edd2:	d102      	bne.n	800edda <_isatty_r+0x1a>
 800edd4:	682b      	ldr	r3, [r5, #0]
 800edd6:	b103      	cbz	r3, 800edda <_isatty_r+0x1a>
 800edd8:	6023      	str	r3, [r4, #0]
 800edda:	bd38      	pop	{r3, r4, r5, pc}
 800eddc:	20001864 	.word	0x20001864

0800ede0 <_sbrk_r>:
 800ede0:	b538      	push	{r3, r4, r5, lr}
 800ede2:	4d06      	ldr	r5, [pc, #24]	; (800edfc <_sbrk_r+0x1c>)
 800ede4:	2300      	movs	r3, #0
 800ede6:	4604      	mov	r4, r0
 800ede8:	4608      	mov	r0, r1
 800edea:	602b      	str	r3, [r5, #0]
 800edec:	f7f4 f88e 	bl	8002f0c <_sbrk>
 800edf0:	1c43      	adds	r3, r0, #1
 800edf2:	d102      	bne.n	800edfa <_sbrk_r+0x1a>
 800edf4:	682b      	ldr	r3, [r5, #0]
 800edf6:	b103      	cbz	r3, 800edfa <_sbrk_r+0x1a>
 800edf8:	6023      	str	r3, [r4, #0]
 800edfa:	bd38      	pop	{r3, r4, r5, pc}
 800edfc:	20001864 	.word	0x20001864

0800ee00 <_init>:
 800ee00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee02:	bf00      	nop
 800ee04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee06:	bc08      	pop	{r3}
 800ee08:	469e      	mov	lr, r3
 800ee0a:	4770      	bx	lr

0800ee0c <_fini>:
 800ee0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee0e:	bf00      	nop
 800ee10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee12:	bc08      	pop	{r3}
 800ee14:	469e      	mov	lr, r3
 800ee16:	4770      	bx	lr

0800ee18 <__FLASH_Program_Fast_veneer>:
 800ee18:	f85f f000 	ldr.w	pc, [pc]	; 800ee1c <__FLASH_Program_Fast_veneer+0x4>
 800ee1c:	2000009d 	.word	0x2000009d

Disassembly of section .data:

20000008 <SystemCoreClock>:
20000008:	003d0900                                ..=.

2000000c <uwTickPrio>:
2000000c:	00000010                                ....

20000010 <uwTickFreq>:
20000010:	00000001                                ....

20000014 <uwAddressNextWrite>:
20000014:	00000020                                 ...

20000018 <DbgTracePeripheralReady>:
20000018:	00000001                                ....

2000001c <a_AdvData>:
2000001c:	4c420908 564e5f45 30ff0f4d 00000000     ..BLE_NVM..0....
	...

20000035 <SizeLed_C>:
20000035:	                                         ...

20000038 <TaskMask>:
20000038:	ffffffff                                ....

2000003c <SuperMask>:
2000003c:	ffffffff                                ....

20000040 <__sglue>:
20000040:	00000000 00000003 20001728              ........(.. 

2000004c <_impure_data>:
2000004c:	00000000 20001728 20001790 200017f8     ....(.. ... ... 
	...

20000098 <_impure_ptr>:
20000098:	2000004c                                L.. 

2000009c <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
2000009c:	b480      	push	{r7}
2000009e:	b089      	sub	sp, #36	; 0x24
200000a0:	af00      	add	r7, sp, #0
200000a2:	6078      	str	r0, [r7, #4]
200000a4:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
200000a6:	2380      	movs	r3, #128	; 0x80
200000a8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
200000aa:	687b      	ldr	r3, [r7, #4]
200000ac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
200000ae:	683b      	ldr	r3, [r7, #0]
200000b0:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200000b2:	4b18      	ldr	r3, [pc, #96]	; (20000114 <FLASH_Program_Fast+0x78>)
200000b4:	695b      	ldr	r3, [r3, #20]
200000b6:	4a17      	ldr	r2, [pc, #92]	; (20000114 <FLASH_Program_Fast+0x78>)
200000b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
200000bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
200000be:	f3ef 8310 	mrs	r3, PRIMASK
200000c2:	60fb      	str	r3, [r7, #12]
  return(result);
200000c4:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000c8:	b672      	cpsid	i
}
200000ca:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
200000cc:	697b      	ldr	r3, [r7, #20]
200000ce:	681a      	ldr	r2, [r3, #0]
200000d0:	69bb      	ldr	r3, [r7, #24]
200000d2:	601a      	str	r2, [r3, #0]
    dest_addr++;
200000d4:	69bb      	ldr	r3, [r7, #24]
200000d6:	3304      	adds	r3, #4
200000d8:	61bb      	str	r3, [r7, #24]
    src_addr++;
200000da:	697b      	ldr	r3, [r7, #20]
200000dc:	3304      	adds	r3, #4
200000de:	617b      	str	r3, [r7, #20]
    row_index--;
200000e0:	7ffb      	ldrb	r3, [r7, #31]
200000e2:	3b01      	subs	r3, #1
200000e4:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
200000e6:	7ffb      	ldrb	r3, [r7, #31]
200000e8:	2b00      	cmp	r3, #0
200000ea:	d1ef      	bne.n	200000cc <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
200000ec:	bf00      	nop
200000ee:	4b09      	ldr	r3, [pc, #36]	; (20000114 <FLASH_Program_Fast+0x78>)
200000f0:	691b      	ldr	r3, [r3, #16]
200000f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
200000f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
200000fa:	d0f8      	beq.n	200000ee <FLASH_Program_Fast+0x52>
200000fc:	693b      	ldr	r3, [r7, #16]
200000fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000100:	68bb      	ldr	r3, [r7, #8]
20000102:	f383 8810 	msr	PRIMASK, r3
}
20000106:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000108:	bf00      	nop
2000010a:	3724      	adds	r7, #36	; 0x24
2000010c:	46bd      	mov	sp, r7
2000010e:	f85d 7b04 	ldr.w	r7, [sp], #4
20000112:	4770      	bx	lr
20000114:	58004000 	.word	0x58004000
